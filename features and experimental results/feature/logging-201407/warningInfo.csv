PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/log4j/BasicConfigurationFactory.java,,52-65,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             setName("BasicConfiguration");,             final String levelName = System.getProperty(DEFAULT_LEVEL);,             final Level level = (levelName != null && Level.getLevel(levelName) != null) ? Level.getLevel(levelName),                     : Level.DEBUG;,             root.setLevel(level);,         }, ,         @Override,         protected void doConfigure() {,         }],,
I18N,DM_CONVERT_CASE,org/apache/log4j/Level.java,toLevel,178-178,[        final String s = sArg.toUpperCase();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/Level.java,readObject,225-225,[        if (levelStr == null) {],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testALL,210-210,[        assertTrue(Level.ALL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testDEBUG,194-194,[        assertTrue(Level.DEBUG instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testERROR,170-170,[        assertTrue(Level.ERROR instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testFATAL,162-162,[        assertTrue(Level.FATAL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testINFO,186-186,[        assertTrue(Level.INFO instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testOFF,154-154,[        assertTrue(Level.OFF instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testTRACE,202-202,[        assertTrue(Level.TRACE instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testWARN,178-178,[        assertTrue(Level.WARN instanceof Level);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testDEBUG,194-195,[        assertTrue(Level.DEBUG instanceof Level);,     }],,testDebug,204-242,[        currentLevel = Level.DEBUG;, ,         currentEvent = events[0];,         debug("Hello");,         debug(null, "Hello");,         currentEvent = events[1];,         debug(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         debug("Hello", t);,         debug(null, "Hello", t);,         currentEvent = events[3];,         debug(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         debug(obj);,         currentEvent = events[5];,         debug(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         debug(obj, t);,         debug(null, obj, t);,         currentEvent = events[7];,         debug(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         debug(pattern, p1, p2);,         currentEvent = events[9];,         debug(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         debug(simple);,         debug(null, simple);,         debug(null, simple, null);,         currentEvent = events[11];,         debug(simple, t);,         debug(null, simple, t);,         currentEvent = events[12];,         debug(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         debug(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         debug(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testERROR,170-171,[        assertTrue(Level.ERROR instanceof Level);,     }],,testError,246-284,[        currentLevel = Level.ERROR;, ,         currentEvent = events[0];,         error("Hello");,         error(null, "Hello");,         currentEvent = events[1];,         error(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         error("Hello", t);,         error(null, "Hello", t);,         currentEvent = events[3];,         error(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         error(obj);,         currentEvent = events[5];,         error(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         error(obj, t);,         error(null, obj, t);,         currentEvent = events[7];,         error(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         error(pattern, p1, p2);,         currentEvent = events[9];,         error(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         error(simple);,         error(null, simple);,         error(null, simple, null);,         currentEvent = events[11];,         error(simple, t);,         error(null, simple, t);,         currentEvent = events[12];,         error(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         error(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         error(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testFATAL,162-163,[        assertTrue(Level.FATAL instanceof Level);,     }],,testFatal,94-95,[        assertTrue(Priority.FATAL instanceof Level);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testINFO,186-187,[        assertTrue(Level.INFO instanceof Level);,     }],,testInfo,330-368,[        currentLevel = Level.INFO;, ,         currentEvent = events[0];,         info("Hello");,         info(null, "Hello");,         currentEvent = events[1];,         info(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         info("Hello", t);,         info(null, "Hello", t);,         currentEvent = events[3];,         info(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         info(obj);,         currentEvent = events[5];,         info(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         info(obj, t);,         info(null, obj, t);,         currentEvent = events[7];,         info(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         info(pattern, p1, p2);,         currentEvent = events[9];,         info(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         info(simple);,         info(null, simple);,         info(null, simple, null);,         currentEvent = events[11];,         info(simple, t);,         info(null, simple, t);,         currentEvent = events[12];,         info(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         info(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         info(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testTRACE,202-203,[        assertTrue(Level.TRACE instanceof Level);,     }],,testTrace,386-406,[        final ListAppender appender = new ListAppender("List");,         appender.start();,         final Logger root = Logger.getRootLogger();,         root.getLogger().addAppender(appender);,         root.setLevel(Level.INFO);, ,         final Logger tracer = Logger.getLogger("com.example.Tracer");,         tracer.setLevel(Level.TRACE);, ,         tracer.trace("Message 1");,         root.trace("Discarded Message");,         root.trace("Discarded Message");, ,         final List<LogEvent> msgs = appender.getEvents();,         assertEquals(1, msgs.size());,         final LogEvent event = msgs.get(0);,         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());,         assertEquals("Message 1", event.getMessage().getFormat());,         appender.stop();,         root.getLogger().removeAppender(appender);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testWARN,178-179,[        assertTrue(Level.WARN instanceof Level);,     }],,testWarn,666-704,[        currentLevel = Level.WARN;, ,         currentEvent = events[0];,         warn("Hello");,         warn(null, "Hello");,         currentEvent = events[1];,         warn(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         warn("Hello", t);,         warn(null, "Hello", t);,         currentEvent = events[3];,         warn(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         warn(obj);,         currentEvent = events[5];,         warn(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         warn(obj, t);,         warn(null, obj, t);,         currentEvent = events[7];,         warn(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         warn(pattern, p1, p2);,         currentEvent = events[9];,         warn(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         warn(simple);,         warn(null, simple);,         warn(null, simple, null);,         currentEvent = events[11];,         warn(simple, t);,         warn(null, simple, t);,         currentEvent = events[12];,         warn(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         warn(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         warn(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LoggerTest.java,tearDown,75-79,[        final LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();,         ctx.reconfigure();,         a1 = null;,         a2 = null;,     }],,teardown,88-97,[        final Map<String,Appender> map = root.getAppenders();,         for (final Map.Entry<String, Appender> entry : map.entrySet()) {,             final Appender app = entry.getValue();,             root.removeAppender(app);,             app.stop();,         },         tcpCount = 0;,         udpCount = 0;,         list.clear();,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/log4j/LoggingTest.java,before,54-54,[        config = ctx.getConfiguration();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/log4j/LoggingTest.java,,54-54,[        config = ctx.getConfiguration();],,
PERFORMANCE,DM_STRING_CTOR,org/apache/log4j/VelocityTest.java,testVelocity,35-35,[        context.put("name", new String("Velocity"));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,119-119,[            final FileInputStream is = new FileInputStream(witnessFile);],,assertStreamEquals,120-120,[            final int bytesRead = is.read(expected);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,147-147,[            final FileOutputStream os = new FileOutputStream(witnessFile);],,assertStreamEquals,148-148,[            os.write(actual);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/util/StringsTest.java,testEMPTY,33-35,[        Assert.assertEquals("", Strings.EMPTY);,         Assert.assertEquals(0, Strings.EMPTY.length());,     }],,testEmpty,70-79,[        final File file = new File("target/fileRename/fileRename.log");,         final PrintStream pos = new PrintStream(file);,         pos.close();, ,         final File dest = new File("target/fileRename/newFile.log");,         final FileRenameAction action = new FileRenameAction(file, dest, false);,         action.execute();,         assertTrue("Renamed file does not exist", !dest.exists());,         assertTrue("Old file does not exist", !file.exists());,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,108-108,[                final BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,109-109,[                final PrintWriter out = new PrintWriter(socket.getOutputStream());],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,90-90,[                    notifyAll();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,101-101,[                    if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,123-123,[        } catch (final Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,stop,155-155,[            serverSocket.close();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,271-271,[                server.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,271-271,[                server.wait();],,
I18N,DM_CONVERT_CASE,org/apache/logging/dumbster/smtp/SmtpRequest.java,createRequest,191-191,[            final String su = s.toUpperCase();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testDebug,204-204,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testError,246-246,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testFatal,288-288,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testInfo,330-330,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogDebug,372-372,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogError,414-414,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogFatal,456-456,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogInfo,498-498,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogTrace,540-540,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogWarn,582-582,[        currentLevel = Level.WARN;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testTrace,624-624,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testWarn,666-666,[        currentLevel = Level.WARN;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getByteBuffer,261-261,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getBytes,267-267,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,138-138,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j,185-185,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2,213-213,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2Debug,222-222,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2IsDebug,174-174,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4jIsDebug,155-155,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logback,194-194,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackDebug,203-203,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackIsDebug,164-164,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToChannel,250-250,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToStream,241-241,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToWriter,232-232,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,132-132,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,133-133,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,138-138,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,139-139,[        final long result3 = writeToWriter(COUNT, w);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/EventLoggerTest.java,setup,39-40,[    public void setup() {,         results.clear();],,setUp,43-47,[        final Log4jJsonObjectMapper log4jObjectMapper = new Log4jJsonObjectMapper();,         writer = log4jObjectMapper.writer();,         reader = log4jObjectMapper.reader(Log4jMarker.class);,         MarkerManager.clear();,     }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,log4j2,126-126,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,logback,116-116,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/FormatterLoggerManualExample.java,,37-37,[    public static Logger logger = LogManager.getFormatterLogger("Foo");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/Log4jInitPerformance.java,testInitialize,48-48,[        final InputStream is = new ByteArrayInputStream(log4jConfigString.getBytes());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/LoggerTest.java,mdc,105-105,[        final TestLogger testLogger = (TestLogger) LogManager.getFormatterLogger(TestStringFormatterMessageFactory.class);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/LoggerTest.java,mdc,105-105,[        final TestLogger testLogger = (TestLogger) LogManager.getFormatterLogger(TestStringFormatterMessageFactory.class);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/MarkerManager.java,getParents,224-224,[                return null;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testNameOnly,54-54,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testOneParent,65-65,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testTwoParents,90-90,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,writeValueAsString,75-75,[        final String str = writer.writeValueAsString(expected);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getByteBuffer,187-187,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getBytes,193-193,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,113-113,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j,129-129,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j2,148-148,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,logback,138-138,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToChannel,176-176,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToStream,167-167,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToWriter,158-158,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,107-107,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,108-108,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,113-113,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,114-114,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getByteBuffer,128-128,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getBytes,134-134,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,73-73,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToChannel,117-117,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToStream,108-108,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToWriter,99-99,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/PerformanceRun.java,,47-47,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,67-67,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,68-68,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,73-73,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,74-74,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,logMessage,81-81,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,logMessage,80-80,[            t.printStackTrace(new PrintStream(baos));],,
STYLE,UC_USELESS_OBJECT,org/apache/logging/log4j/ThreadContext.java,push,203-203,[        disableAll = managerProps.getBooleanProperty(DISABLE_ALL);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextInheritanceTest.java,,200-213,[        public TestThread(final StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             final String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clearMap();,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextTest.java,,180-193,[        public TestThread(final StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             final String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clearMap();,         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/AppenderRefLevelJsonTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/AppenderRefLevelTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/BasicConfigurationFactory.java,getSupportedTypes,40-40,[        return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/BasicConfigurationFactory.java,,52-59,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             final String l = System.getProperty(DEFAULT_LEVEL);,             final Level level = (l != null && Level.getLevel(l) != null) ? Level.getLevel(l) : Level.ERROR;,             root.setLevel(level);,         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/CollectionLoggingTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ExtendedLevelTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/ExtendedLevelTest.java,testLevelLogging,54-54,[        List<LogEvent> events = list1.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/ExtendedLevelTest.java,testLevelLogging,62-62,[        events = list2.getEvents();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/FileConfigTest.java,,39-39,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/FileConfigTest.java,testReconfiguration,55-55,[        file.setLastModified(newTime);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/FileConfigTest.java,,45-45,[        app = context.getListAppender("List").clear();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/HostNameTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/HostNameTest.java,testHostname,54-54,[        final List<String> msgs = host.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/HostNameTest.java,testHostname,59-59,[        assertNotNull("No Host FileAppender file name", hostFile.getFileName());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LateConfigTest.java,testReconfiguration,59-59,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/LateConfigTest.java,,41-41,[    private final org.apache.logging.log4j.Logger logger = LogManager.getLogger("LoggerTest");],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LevelTest.java,,51-51,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LogEventFactoryTest.java,,67-67,[    }).around(context);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/LogEventFactoryTest.java,,67-67,[    }).around(context);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LogEventFactoryTest.java,testEvent,78-78,[        final List<LogEvent> events = app.getEvents();],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/Logger.java,getLevel,107-107,[    public boolean isEnabled(final Level level, final Marker marker, final String message, final Throwable t) {],,setLevel,97-100,[    }, ,     @Override,     public void logMessage(final String fqcn, final Level level, final Marker marker, final Message message, final Throwable t) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/logging/log4j/core/Logger.java,,259-388,[            this.loggerConfig = pc.loggerConfig;,             this.level = level;,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final LoggerConfig lc) {,             this.config = pc.config;,             this.loggerConfig = lc;,             this.level = lc.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         // LOG4J2-151: changed visibility to public,         public void logEvent(final LogEvent event) {,             config.getConfigurationMonitor().checkConfiguration();,             loggerConfig.log(event);,         }, ,         boolean filter(final Level level, final Marker marker, final String msg) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, p1);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         },     }, ,     /**,      * Returns a String representation of this instance in the form {@code "name:level[ in context_name]"}.,      * @return A String describing this Logger instance.,      */,     @Override,     public String toString() {,         final String nameLevel = Strings.EMPTY + getName() + ':' + getLevel();,         if (context == null) {,             return nameLevel;,         },         final String contextName = context.getName();,         return contextName == null ? nameLevel : nameLevel + " in " + contextName;,     }, }],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/logging/log4j/core/LoggerContext.java,,36-254,[import org.apache.logging.log4j.core.config.ConfigurationFactory;, import org.apache.logging.log4j.core.config.ConfigurationListener;, import org.apache.logging.log4j.core.config.ConfigurationSource;, import org.apache.logging.log4j.core.config.DefaultConfiguration;, import org.apache.logging.log4j.core.config.NullConfiguration;, import org.apache.logging.log4j.core.config.Reconfigurable;, import org.apache.logging.log4j.core.jmx.Server;, import org.apache.logging.log4j.core.util.Assert;, import org.apache.logging.log4j.core.util.NetUtils;, import org.apache.logging.log4j.message.MessageFactory;, import org.apache.logging.log4j.spi.AbstractLogger;, import org.apache.logging.log4j.util.PropertiesUtil;, , /**,  * The LoggerContext is the anchor for the logging system. It maintains a list,  * of all the loggers requested by applications and a reference to the,  * Configuration. The Configuration will contain the configured loggers,,  * appenders, filters, etc and will be atomically updated whenever a reconfigure,  * occurs.,  */, public class LoggerContext extends AbstractLifeCycle implements org.apache.logging.log4j.spi.LoggerContext, ConfigurationListener {, ,     private static final boolean SHUTDOWN_HOOK_ENABLED =,         PropertiesUtil.getProperties().getBooleanProperty("log4j.shutdownHookEnabled", true);, ,     public static final String PROPERTY_CONFIG = "config";,     private static final Marker SHUTDOWN_HOOK = MarkerManager.getMarker("SHUTDOWN HOOK");,     private static final Configuration NULL_CONFIGURATION = new NullConfiguration();, ,     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();,     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();, ,     /**,      * The Configuration is volatile to guarantee that initialization of the,      * Configuration has completed before the reference is updated.,      */,     private volatile Configuration config = new DefaultConfiguration();,     private Object externalContext;,     private final String name;,     private URI configLocation;, ,     /**,      * Once a shutdown hook thread executes, we can't remove it from the runtime (throws an exception). Therefore,,      * it's really pointless to keep a strongly accessible reference to said thread. Thus, please use a,      * SoftReference here to prevent possible cyclic memory references.,      */,     private Reference<Thread> shutdownThread;, ,     private final Lock configLock = new ReentrantLock();, ,     /**,      * Constructor taking only a name.,      * @param name The context name.,      */,     public LoggerContext(final String name) {,         this(name, null, (URI) null);,     }, ,     /**,      * Constructor taking a name and a reference to an external context.,      * @param name The context name.,      * @param externalContext The external context.,      */,     public LoggerContext(final String name, final Object externalContext) {,         this(name, externalContext, (URI) null);,     }, ,     /**,      * Constructor taking a name, external context and a configuration URI.,      * @param name The context name.,      * @param externalContext The external context.,      * @param configLocn The location of the configuration as a URI.,      */,     public LoggerContext(final String name, final Object externalContext, final URI configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         this.configLocation = configLocn;,     }, ,     /**,      * Constructor taking a name external context and a configuration location,      * String. The location must be resolvable to a File.,      *,      * @param name The configuration location.,      * @param externalContext The external context.,      * @param configLocn The configuration location.,      */,     public LoggerContext(final String name, final Object externalContext, final String configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         if (configLocn != null) {,             URI uri;,             try {,                 uri = new File(configLocn).toURI();,             } catch (final Exception ex) {,                 uri = null;,             },             configLocation = uri;,         } else {,             configLocation = null;,         },     }, ,     @Override,     public void start() {,         LOGGER.debug("Starting LoggerContext[name={}, {}]...", getName(), this);,         if (configLock.tryLock()) {,             try {,                 if (this.isInitialized() || this.isStopped()) {,                     this.setStarting();,                     reconfigure();,                     setUpShutdownHook();,                     this.setStarted();,                 },             } finally {,                 configLock.unlock();,             },         },         LOGGER.debug("LoggerContext[name={}, {}] started OK.", getName(), this);,     }, ,     /**,      * Start with a specific configuration.,      * @param config The new Configuration.,      */,     public void start(final Configuration config) {,         LOGGER.debug("Starting LoggerContext[name={}, {}] with configuration {}...", getName(), this, config);,         if (configLock.tryLock()) {,             try {,                 if (this.isInitialized() || this.isStopped()) {,                     setUpShutdownHook();,                     this.setStarted();,                 },             } finally {,                 configLock.unlock();,             },         },         setConfiguration(config);,         LOGGER.debug("LoggerContext[name={}, {}] started OK with configuration {}.", getName(), this, config);,     }, ,     private void setUpShutdownHook() {,         if (config.isShutdownHookEnabled() && SHUTDOWN_HOOK_ENABLED) {,             LOGGER.debug(SHUTDOWN_HOOK, "Shutdown hook enabled. Registering a new one.");,             shutdownThread = new SoftReference<Thread>(,                     new Thread(new ShutdownThread(this), "log4j-shutdown"),             );,             addShutdownHook();,         },     }, ,     private void addShutdownHook() {,         final Thread hook = getShutdownThread();,         if (hook != null) {,             try {,                 Runtime.getRuntime().addShutdownHook(hook);,             } catch (final IllegalStateException ise) {,                 LOGGER.warn(SHUTDOWN_HOOK, "Unable to register shutdown hook due to JVM state");,             } catch (final SecurityException se) {,                 LOGGER.warn(SHUTDOWN_HOOK, "Unable to register shutdown hook due to security restrictions");,             },         },     }, ,     private Thread getShutdownThread() {,         return shutdownThread == null ? null : shutdownThread.get();,     }, ,     @Override,     public void stop() {,         LOGGER.debug("Stopping LoggerContext[name={}, {}]...", getName(), this);,         configLock.lock();,         try {,             if (this.isStopped()) {,                 return;,             },             this.setStopping();,             tearDownShutdownHook();,             final Configuration prev = config;,             config = NULL_CONFIGURATION;,             updateLoggers();,             prev.stop();,             externalContext = null;,             LogManager.getFactory().removeContext(this);,             this.setStopped();,         } finally {,             configLock.unlock();, ,             // in finally: unregister MBeans even if an exception occurred while stopping,             Server.unregisterLoggerContext(getName()); // LOG4J2-406, LOG4J2-500,         },         LOGGER.debug("Stopped LoggerContext[name={}, {}]...", getName(), this);,     }, ,     private void tearDownShutdownHook() {,         if (shutdownThread != null) {,             LOGGER.debug(SHUTDOWN_HOOK, "Enqueue shutdown hook for garbage collection.");,             shutdownThread.enqueue();,         },     }, ,     /**,      * Gets the name.,      *,      * @return the name.,      */,     public String getName() {,         return name;,     }, ,     /**,      * Set the external context.,      * @param context The external context.,      */,     public void setExternalContext(final Object context) {,         this.externalContext = context;,     }, ,     /**],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/LoggerContext.java,getConfiguration,171-171,[            }],,setConfiguration,197-209,[        },     }, ,     private Thread getShutdownThread() {,         return shutdownThread == null ? null : shutdownThread.get();,     }, ,     @Override,     public void stop() {,         LOGGER.debug("Stopping LoggerContext[name={}, {}]...", getName(), this);,         configLock.lock();,         try {,             if (this.isStopped()) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerDateTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LoggerDateTest.java,testFileName,48-48,[        final String name = fileApp.getFileName();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerTest.java,,51-51,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/LoggerTest.java,testReconfiguration,202-202,[        file.setLastModified(newTime);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerUpdateTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LoggerUpdateTest.java,resetLevel,52-52,[        List<LogEvent> events = app.getEvents();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LookupTest.java,,35-35,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ShutdownDisabledTest.java,,34-34,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabled,74-74,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabledByLevel,87-87,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugLogger,100-100,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,setupClass,60-60,[        System.gc();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/StrictXmlConfigTest.java,,43-43,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ThreadedTest.java,,68-68,[    }).around(context);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,115-115,[            for (final File file : files) {],,deleteDir,114-114,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,116-116,[                file.delete();],,deleteDir,118-118,[            dir.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedTest.java,,99-108,[        public StateSettingRunnable(final State state) {,             this.state = state;,         },         @Override,         public void run() {,             for (int i=0; i < LOOP_CNT*4; ++i) {,                 Thread.yield();,                 state.setState();,             },         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/XmlEvents.java,,36-36,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/XmlEvents.java,,36-36,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/AsyncAppender.java,append,144-144,[            if (isAppenderThread.get() == Boolean.TRUE && queue.remainingCapacity() == 0) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsyncAppender.java,callAppenders,289-289,[                } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,243-243,[                    } catch (final Exception ex) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,237-237,[                final Log4jLogEvent event = Log4jLogEvent.deserialize(s);],,run,229-229,[                    if (s != null && s instanceof String && SHUTDOWN.equals(s.toString())) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/AsyncAppender.java,shutdown,299-299,[                queue.offer(SHUTDOWN);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java,after,48-48,[        app.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java,testNoLocation,57-57,[        final List<String> list = app.getMessages();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/ConsoleAppender.java,getOutputStream,133-133,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,65-65,[        final String msg = baos.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,62-62,[        System.setOut(new PrintStream(baos));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppender.java,callAppender,117-117,[            primary.callAppender(event);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,tearDown,55-55,[        app.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testFailover,61-61,[        List<LogEvent> events = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,75-75,[        List<LogEvent> events = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,84-84,[        events = foApp.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testFailover,60-60,[        logger.error("This is a test");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,73-73,[        onceLogger.error("Fail once");],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/appender/FailoversPlugin.java,createFailovers,50-50,[            return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,150-150,[            final InputStreamReader isr = new InputStreamReader(is);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,188-188,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,151-151,[            final BufferedReader br = new BufferedReader(isr);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,188-188,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/FileAppenderTest.java,,208-223,[        public FileWriterRunnable(final boolean lock, final int count) {,             this.lock = lock;,             this.count = count;,         }, ,         @Override,         public void run() {,             final Thread thread = Thread.currentThread();, ,             try {,                 writer(lock, count, thread.getName());, ,             } catch (final Exception ex) {,                 throw new RuntimeException(ex);,             },         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/FileManager.java,createManager,196-196,[                parent.mkdirs();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java,testFlushAtEndOfBatch,58-58,[        final BufferedReader reader = new BufferedReader(new FileReader(this.logFile));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java,,43-43,[    public RuleChain chain = RuleChain.outerRule(files).around(init);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/ProgressConsoleTest.java,updateProgress,51-51,[            s += ".";],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,testRandomAccessConfiguration,81-81,[        final BufferedReader reader = new BufferedReader(new FileReader(this.logFile));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,,61-61,[    public RuleChain chain = RuleChain.outerRule(files).around(init);],,
CORRECTNESS,UR_UNINIT_READ,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,<init>,60-60,[    @Rule],,
CORRECTNESS,UR_UNINIT_READ,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,<init>,61-61,[    public RuleChain chain = RuleChain.outerRule(files).around(init);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,write,101-101,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,233-233,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,219-219,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,216-216,[                parent.mkdirs();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,130-130,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,124-124,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,126-126,[            fos = new FileOutputStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,54-54,[        BufferedReader reader = new BufferedReader(new FileReader(f));],,testRollover,81-81,[        reader = new BufferedReader(new FileReader(f));],,testRollover,88-88,[        reader = new BufferedReader(new FileReader(after1));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,56-56,[        assertTrue(line1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,83-83,[        assertTrue("after rollover only new msg", new1.contains(trigger));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,90-90,[        assertTrue("renamed file line 1", old1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,92-92,[        assertTrue("renamed file line 2", old2.contains(exceed));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,46-46,[        f.delete();],,testRollover,47-47,[        after1.delete();],,testRollover,86-86,[        f.delete();],,testRollover,96-96,[        after1.delete();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testTcpAppenderNoWait,186-186,[        } catch (final Exception ex) {],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testTcpAppender,102-123,[        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "tcp", null,,             "-1", "false", "Test", null, null, null, null, null, null);,         appender.start();, ,         // set appender on root and set level to debug,         root.addAppender(appender);,         root.setAdditive(false);,         root.setLevel(Level.DEBUG);,         root.debug("This is a test message");,         final Throwable child = new LoggingException("This is a test");,         root.error("Throwing an exception", child);,         root.debug("This is another test message");,         Thread.sleep(250);,         LogEvent event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("This is a test message"));,         assertTrue("Message not delivered via TCP", tcpCount > 0);,         event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("Throwing an exception"));,         assertTrue("Message not delivered via TCP", tcpCount > 1);,     }],,testTCPAppender,52-56,[        initTCPTestEnvironment(null);, ,         sendAndCheckLegacyBSDMessage("This is a test message");,         sendAndCheckLegacyBSDMessage("This is a test message 2");,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testUdpAppender,138-151,[        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "udp", null,,             "-1", "false", "Test", null, null, null, null, null, null);,         appender.start();, ,         // set appender on root and set level to debug,         root.addAppender(appender);,         root.setAdditive(false);,         root.setLevel(Level.DEBUG);,         root.debug("This is a udp message");,         final LogEvent event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("This is a udp message"));,         assertTrue("Message not delivered via UDP", udpCount > 0);,     }],,testUDPAppender,75-80,[        initUDPTestEnvironment("bsd");, ,         sendAndCheckLegacyBSDMessage("This is a test message");,         root.removeAppender(appender);,         appender.stop();,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,94-94,[        tcpCount = 0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,95-95,[        udpCount = 0;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,245-245,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,219-219,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,shutdown,204-204,[            thread.interrupt();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,138-138,[            syslogServer.wait(timeOutInMs);],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,138-138,[            syslogServer.wait(timeOutInMs);],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,equals,60-60,[        return super.equals(frame);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/TlsSyslogFrameTest.java,getByteRepresentation,54-54,[        final byte[] representation = frame.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,52-52,[        final BufferedReader reader = new BufferedReader(new FileReader(file));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,46-46,[        file.delete();],,testFlushAtEndOfBatch,58-58,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlNoEvents,89-89,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchema,77-77,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchemaThrowable,63-63,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaNoEvents,66-66,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaSimple,54-54,[        file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,53-53,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,47-47,[        f.delete();],,testFlushAtEndOfBatch,65-65,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,53-53,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,47-47,[        f.delete();],,testFlushAtEndOfBatch,63-63,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,55-55,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,49-49,[        f.delete();],,testFlushAtEndOfBatch,67-67,[            f.delete();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java,,105-105,[        return this.running;],,,63-63,[                this.running = true;],,,93-93,[                this.running = false;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,140-140,[            final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,137-137,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,182-182,[        final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,179-179,[        final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,149-149,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,151-151,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,153-153,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,154-154,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,155-155,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,156-156,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,157-157,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,158-158,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,159-159,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,160-160,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,161-161,[                    resultSet.getString("message"));],,testDataSourceConfig,162-162,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,163-163,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,165-165,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,167-167,[            verify(dataSource);],,testDataSourceConfig,169-169,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,170-170,[        }],,testDataSourceConfig,171-171,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,148-148,[            final Statement statement = this.connection.createStatement();],,testDataSourceConfig,149-149,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,151-151,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,153-153,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,154-154,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,155-155,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,156-156,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,157-157,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,158-158,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,159-159,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,160-160,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,161-161,[                    resultSet.getString("message"));],,testDataSourceConfig,162-162,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,163-163,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,165-165,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,167-167,[            verify(dataSource);],,testDataSourceConfig,169-169,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,170-170,[        }],,testDataSourceConfig,171-171,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,191-191,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,193-193,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,195-195,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,196-196,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,197-197,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,198-198,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,199-199,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,200-200,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,201-201,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,202-202,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,203-203,[                resultSet.getString("message"));],,testFactoryMethodConfig,204-204,[        assertEquals("The exception column is not correct (1).", Strings.EMPTY,],,testFactoryMethodConfig,205-205,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,207-207,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,209-209,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,210-210,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,211-211,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,212-212,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,213-213,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,214-214,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,215-215,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,216-216,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,217-217,[                resultSet.getString("message"));],,testFactoryMethodConfig,218-218,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,219-219,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,221-221,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,222-222,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,190-190,[        final Statement statement = this.connection.createStatement();],,testFactoryMethodConfig,191-191,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,193-193,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,195-195,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,196-196,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,197-197,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,198-198,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,199-199,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,200-200,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,201-201,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,202-202,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,203-203,[                resultSet.getString("message"));],,testFactoryMethodConfig,204-204,[        assertEquals("The exception column is not correct (1).", Strings.EMPTY,],,testFactoryMethodConfig,205-205,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,207-207,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,209-209,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,210-210,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,211-211,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,212-212,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,213-213,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,214-214,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,215-215,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,216-216,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,217-217,[                resultSet.getString("message"));],,testFactoryMethodConfig,218-218,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,219-219,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,221-221,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,222-222,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith1000Events,252-252,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testPerformanceOfAppenderWith1000Events,254-254,[        resultSet.last();],,testPerformanceOfAppenderWith1000Events,255-255,[        assertEquals("The number of records is not correct.", 1001, resultSet.getRow());],,testPerformanceOfAppenderWith1000Events,257-257,[        System.out.println("Wrote 1,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith1000Events,259-259,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith1000Events,250-250,[        final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,testPerformanceOfAppenderWith1000Events,252-252,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testPerformanceOfAppenderWith1000Events,254-254,[        resultSet.last();],,testPerformanceOfAppenderWith1000Events,255-255,[        assertEquals("The number of records is not correct.", 1001, resultSet.getRow());],,testPerformanceOfAppenderWith1000Events,257-257,[        System.out.println("Wrote 1,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith1000Events,259-259,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,148-148,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,190-190,[        final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith1000Events,250-250,[        final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSourceTest.java,testDataSource,124-124,[        this.context.bind(this.jndiURL, dataSource);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,createConnectionSource,96-96,[            } catch (final Exception e) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,connectAndStart,72-72,[            this.statement = this.connection.prepareStatement(this.sqlStatement);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,getConfigConnection,41-41,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,newConnection,46-46,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,getConfigConnection,41-41,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j;ifexists=true", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,newConnection,46-46,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,102-102,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,99-99,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,164-164,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,161-161,[            final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,113-113,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,115-115,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,117-117,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,118-118,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,119-119,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,120-120,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,121-121,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,122-122,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,123-123,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,124-124,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,126-126,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,128-128,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,129-129,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,130-130,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,131-131,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,133-133,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,134-134,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,135-135,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,137-137,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,139-139,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,140-140,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,141-141,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,142-142,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,143-143,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,144-144,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,145-145,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,146-146,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,148-148,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,150-150,[            this.tearDown();],,testBaseJpaEntityAppender,151-151,[        }],,testBaseJpaEntityAppender,152-152,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,112-112,[            final Statement statement = this.connection.createStatement();],,testBaseJpaEntityAppender,113-113,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,115-115,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,117-117,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,118-118,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,119-119,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,120-120,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,121-121,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,122-122,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,123-123,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,124-124,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,126-126,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,128-128,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,129-129,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,130-130,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,131-131,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,133-133,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,134-134,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,135-135,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,137-137,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,139-139,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,140-140,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,141-141,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,142-142,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,143-143,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,144-144,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,145-145,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,146-146,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,148-148,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,150-150,[            this.tearDown();],,testBaseJpaEntityAppender,151-151,[        }],,testBaseJpaEntityAppender,152-152,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,175-175,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,177-177,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,179-179,[            long date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,180-180,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,181-181,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,182-182,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,183-183,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,184-184,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,185-185,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,186-186,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,188-188,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,190-190,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,191-191,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,192-192,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,193-193,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,195-195,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,196-196,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,197-197,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,199-199,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,201-201,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,202-202,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,203-203,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,204-204,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,205-205,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,206-206,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,207-207,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,208-208,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,210-210,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,212-212,[            this.tearDown();],,testBasicJpaEntityAppender,213-213,[        }],,testBasicJpaEntityAppender,214-214,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,174-174,[            final Statement statement = this.connection.createStatement();],,testBasicJpaEntityAppender,175-175,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,177-177,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,179-179,[            long date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,180-180,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,181-181,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,182-182,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,183-183,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,184-184,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,185-185,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,186-186,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,188-188,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,190-190,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,191-191,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,192-192,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,193-193,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,195-195,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,196-196,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,197-197,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,199-199,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,201-201,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,202-202,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,203-203,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,204-204,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,205-205,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,206-206,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,207-207,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,208-208,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,210-210,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,212-212,[            this.tearDown();],,testBasicJpaEntityAppender,213-213,[        }],,testBasicJpaEntityAppender,214-214,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,245-245,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,247-247,[            resultSet.last();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,248-248,[            assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,250-250,[            System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,253-253,[            this.tearDown();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,254-254,[        }],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,255-255,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,243-243,[            final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,245-245,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,247-247,[            resultSet.last();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,248-248,[            assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,250-250,[            System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,253-253,[            this.tearDown();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,254-254,[        }],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,255-255,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,112-112,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,174-174,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,243-243,[            final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,commitAndClose,118-118,[            if (this.transaction != null && this.transaction.isActive()) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,writeInternal,102-102,[            if (this.transaction != null && this.transaction.isActive()) {],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,36-36,[        final Connection connection = DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,38-38,[        Statement statement = connection.createStatement();],,setUpConnection,39-39,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,38-38,[        Statement statement = connection.createStatement();],,setUpConnection,45-45,[        statement = connection.createStatement();],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,40-40,[        final Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,42-42,[        Statement statement = connection.createStatement();],,setUpConnection,43-43,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,42-42,[        Statement statement = connection.createStatement();],,setUpConnection,49-49,[        statement = connection.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java,,62-62,[            return OBJECT_MAPPER.readValue(s, new TypeReference<Map<String, String>>() { });],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java,,64-64,[            list = ContextMapJsonAttributeConverter.OBJECT_MAPPER.readValue(s, new TypeReference<List<String>>() { });],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvert01,46-46,[        final String converted = this.converter.convertToDatabaseColumn(message);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullOrBlankToEntityAttribute,64-64,[        assertNull("The converted attribute should be null (1).", this.converter.convertToEntityAttribute(null));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullToDatabaseColumn,59-59,[        assertNull("The converted value should be null.", this.converter.convertToDatabaseColumn(null));],,
STYLE,DMI_USELESS_SUBSTRING,org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java,convertString,75-75,[                fileName = parenthesisContents.substring(0);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,<clinit>,47-47,[            THROWABLE_CAUSE.setAccessible(true);],,<clinit>,49-49,[            THROWABLE_MESSAGE.setAccessible(true);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,167-167,[                        THROWABLE_MESSAGE.set(throwable, cause);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,201-201,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,218-218,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,179-179,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,234-234,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,226-226,[        } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java,getStackTrace,91-91,[            returnValue += "\tat " + element.toString() + '\n';],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java,valueOf,139-139,[            if (op == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java,testFilter,105-105,[        assertTrue("Events were generated", list == null || list.isEmpty());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeAscending,219-219,[                        toRenameBase.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeDescending,327-327,[                        toRenameBase.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java,,53-64,[        public MyRollingManager(final TriggeringPolicy policy, final RolloverStrategy strategy) {,             super("testfile", "target/rolling1/test1-%i.log.gz", new ByteArrayOutputStream(),,                 false, 0, System.currentTimeMillis(), policy, strategy, null, null, 8192);,         }, ,         public void setFileTime(final long timestamp) {,             this.timestamp = timestamp;,         }, ,         @Override,         public long getFileTime() {,             return timestamp;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,97-97,[            for (final File file : files) {],,deleteDir,96-96,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,testAppender,82-82,[        assertTrue("No files created", files.length > 0);],,testAppender,81-81,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,98-98,[                file.delete();],,deleteDir,100-100,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,77-77,[            for (final File file : files) {],,deleteDir,76-76,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,testAppender,62-62,[        assertTrue("No files created", files.length > 0);],,testAppender,61-61,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,78-78,[                file.delete();],,deleteDir,80-80,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,79-79,[            for (final File file : files) {],,deleteDir,78-78,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,testAppender,63-63,[            assertTrue("No files created", files.length > 0);],,testAppender,62-62,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,80-80,[                file.delete();],,deleteDir,82-82,[            dir.delete();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,,46-46,[    }).around(ctx);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,,41-45,[    public RuleChain chain = RuleChain.outerRule(new ExternalResource() {,         @Override,         protected void before() throws Throwable {,             deleteDir();,         }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,83-83,[            for (final File file : files) {],,deleteDir,82-82,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,testAppender,67-67,[        assertTrue("No files created", files.length > 0);],,testAppender,66-66,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,84-84,[                file.delete();],,deleteDir,86-86,[            dir.delete();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java,testAccessManager,47-47,[        manager.getRolloverStrategy();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java,testAccessManager,48-48,[        manager.getTriggeringPolicy();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,102-102,[        return initialTime;],,,113-113,[                initialTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,94-94,[        return size;],,,85-85,[        size += length;],,,112-112,[                size = 0;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createFileAfterRollover,122-122,[        final OutputStream os = new FileOutputStream(getFileName(), isAppend());],,createFileAfterRollover,123-123,[        if (getBufferSize() > 0) { // negative buffer size means no buffering],,createFileAfterRollover,126-126,[            setOutputStream(os);],,createFileAfterRollover,128-128,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,303-303,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,306-306,[                file.createNewFile();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,write,111-111,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,177-177,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,173-173,[                parent.mkdirs();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,slurp,107-107,[            } catch (final Exception ignored) {],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,deleteDir,116-116,[            for (final File file : files) {],,deleteDir,115-115,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,testAppender,66-66,[        assertTrue("No files created", files.length > 0);],,testAppender,65-65,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,deleteDir,117-117,[                file.delete();],,deleteDir,119-119,[            dir.delete();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testConfigurableBufferSize,114-114,[                file.getName(), Strings.EMPTY, os, append, flushNow, bufferSize, triggerSize, time,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_dataExceedingBufferSize,87-87,[                file.getName(), Strings.EMPTY, os, append, flushNow, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE, triggerSize, time,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_multiplesOfBufferSize,56-56,[                file.getName(), Strings.EMPTY, os, append, flushNow, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE, triggerSize, time,],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,137-137,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,131-131,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,133-133,[            fos = new FileOutputStream(file);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/action/AbstractAction.java,,90-90,[        return complete;],,,70-70,[            complete = true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,copyFile,126-126,[            srcStream = new FileInputStream(source);],,copyFile,127-127,[            destStream = new FileOutputStream(destination);],,copyFile,132-132,[            if (srcChannel != null) {],,copyFile,133-133,[                srcChannel.close();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,execute,96-96,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,copyFile,118-118,[            destination.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,execute,107-107,[                source.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testEmpty,71-71,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testNoParent,85-85,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testRename1,55-55,[        final PrintStream pos = new PrintStream(file);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteDir,112-112,[            for (final File file : files) {],,deleteDir,111-111,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteFiles,123-123,[            for (final File file : files) {],,deleteFiles,122-122,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,beforeClass,39-39,[        file.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteDir,113-113,[                file.delete();],,deleteDir,115-115,[            dir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteFiles,124-124,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testNoParent,99-99,[                dest.delete();],,testNoParent,100-100,[                file.delete();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,execute,94-94,[            final FileInputStream fis = new FileInputStream(source);],,execute,95-95,[            final FileOutputStream fos = new FileOutputStream(destination);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,execute,103-103,[            final FileInputStream fis = new FileInputStream(source);],,execute,104-104,[            final FileOutputStream fos = new FileOutputStream(destination);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java,cleanupClass,64-64,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java,setupClass,55-55,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppenderTest.java,cleanupClass,64-64,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppenderTest.java,setupClass,55-55,[        file.delete();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,,49-49,[    @Rule],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,routingTest,66-66,[        final List<LogEvent> list = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,tearDown,59-59,[        this.app.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,after,58-58,[        listAppender1.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,routingTest,77-77,[        assertNotNull("No events generated", listAppender1.getEvents());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,after,59-59,[        listAppender2.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,routingTest,85-85,[        assertNotNull("No events generated", listAppender2.getEvents());],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,,46-46,[    @Rule],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,routingTest,63-63,[        final List<LogEvent> list = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,tearDown,56-56,[        app.clear();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLogger.java,calculateRingBufferSize,145-145,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLogger.java,initInfoForExecutorThread,159-159,[        executor.submit(new Runnable(){],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,callAppenders,111-111,[        if (!helper.callAppendersFromAnotherThread(event)) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,createRingBufferAdmin,148-148,[        return helper.createRingBufferAdmin(contextName, getName());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigAutoFlushTest.java,testFlushAtEndOfBatch,50-50,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigAutoFlushTest.java,testFlushAtEndOfBatch,53-53,[        f.delete();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,callAppendersFromAnotherThread,327-327,[        if (isAppenderThread.get() == Boolean.TRUE //],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,calculateRingBufferSize,159-159,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,initThreadLocalForExecutorThread,297-297,[        executor.submit(new Runnable() {],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,release,274-274,[                Thread.sleep(SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS); // give up the CPU for a while],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,,89-96,[            = new EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig>() {, ,         @Override,         public void translateTo(final Log4jEventWrapper ringBufferElement, final long sequence, ,                 final LogEvent logEvent, final AsyncLoggerConfig loggerConfig) {,             ringBufferElement.event = logEvent;,             ringBufferElement.loggerConfig = loggerConfig;,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,50-50,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,54-54,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,58-58,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,62-62,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,62-62,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,54-54,[        f.delete();],,testAsyncLogUsesCachedThreadName,68-68,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,63-63,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,55-55,[        f.delete();],,testAsyncLogUsesCurrentThreadName,69-69,[        f.delete();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEvent.java,execute,101-101,[        asyncLogger.actualAsyncLog(this);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,onEvent,50-50,[            sequenceCallback.set(sequence);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testCreateMementoReturnsCopy,212-212,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,62-62,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,81-81,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,100-100,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsMsgTimestampForTimestampMessage,155-155,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,174-174,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,174-174,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,174-174,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,174-174,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,getParameters,132-132,[            return null;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,65-65,[        new File("perftest.log").createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,64-64,[        new File("perftest.log").delete();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,68-68,[        PerfTest.throughput = false;],,runTestAndPrintResult,72-72,[        PerfTest.throughput = true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTest.java,reportResult,143-143,[            final FileWriter writer = new FileWriter(file, true);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,90-90,[        System.exit(0);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,82-82,[                throughput = true;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,79-79,[                verbose = true;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,runTestAndPrintResult,119-119,[        throughput = false;],,runTestAndPrintResult,124-124,[        throughput = true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,304-304,[            final FileReader reader = new FileReader(config._temp);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,308-308,[            config._temp.delete();],,main,318-318,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,352-352,[                gc.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,354-354,[            new File("gc.log").renameTo(gc);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,365-365,[                        process.getInputStream()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,364-364,[                final BufferedReader in = new BufferedReader(new InputStreamReader(],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,371-371,[                } catch (final Exception ignored) {],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,compareTo,129-129,[            return (int) Math.signum(other._stats._averageOpsPerSec],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,main,172-172,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,88-96,[                    switch (i) {,                     case 0:,                         sb.append('\t').append((long) stats.avgLatency);,                         break;,                     case 1:,                         sb.append('\t').append((long) stats.latency99Pct);,                         break;,                     case 2:,                         sb.append('\t').append((long) stats.latency99_99Pct);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,85-85,[                final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,87-87,[                    final Stats stats = sub.get(subKey);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,117-117,[            final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,119-119,[                final Stats stats = sub.get(subKey);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,,153-165,[        return new Comparator<String>() {,             List<String> expected = Arrays.asList("1 thread", "2 threads",,                     "4 threads", "8 threads", "16 threads", "32 threads",,                     "64 threads");, ,             @Override,             public int compare(final String o1, final String o2) {,                 final int i1 = expected.indexOf(o1);,                 final int i2 = expected.indexOf(o2);,                 if (i1 < 0 || i2 < 0) {,                     return o1.compareTo(o2);,                 },                 return i1 - i2;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j1.java,runLatencyTest,51-51,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j2.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLogback.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/AbstractConfiguration.java,createAdvertiser,284-284,[            attributes.put("content", new String(buffer));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/AbstractConfiguration.java,createPluginObject,731-731,[            } catch (final Exception ex) {],,createPluginObject,739-739,[            } catch (final Exception ex) {],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/AbstractConfiguration.java,addLoggerAppender,518-518,[        appenders.putIfAbsent(appender.getName(), appender);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/logging/log4j/core/config/AbstractConfiguration.java,stop,178-178,[            if (selector instanceof AsyncLoggerContextSelector) { // all loggers are async],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,cleanupClass,64-64,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,setupClass,43-43,[        file.delete();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInputFromString,284-284,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInstance,143-143,[                        } catch (final Exception ex) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getSupportedTypes,464-464,[            return null;],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,compareTo,351-357,[            final int w = wf.weight;,             if (weight == w) {,                 return 0;,             } else if (weight > w) {,                 return -1;,             } else {,                 return 1;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/config/ConfigurationSource.java,getURL,128-128,[        return url;],,getUrl,57-57,[        return url;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/ConfigurationTest.java,testLogToFile,128-128,[        final BufferedReader in = new BufferedReader(new FileReader(this.logFileName));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/ConfigurationTest.java,,75-75,[        rules = RuleChain.outerRule(new CleanFiles(logFileName)).around(this.init);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/CustomConfigurationTest.java,setUp,59-59,[        new File(LOG_FILE).delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/DefaultConfiguration.java,<init>,68-68,[        final Level level = levelName != null && Level.valueOf(levelName) != null ?],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/FileConfigurationMonitor.java,,100-108,[        public ReconfigurationWorker(final ConfigurationListener listener, final Reconfigurable reconfigurable) {,             this.listener = listener;,             this.reconfigurable = reconfigurable;,         }, ,         @Override,         public void run() {,             listener.onChange(reconfigurable);,         }],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/FileOutputTest.java,,38-38,[    public RuleChain rules = RuleChain.outerRule(new CleanFiles(STATUS_LOG)).around(new InitialLoggerContext(CONFIG));],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/LoggerConfig.java,createLogger,363-363,[        }],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/LoggerConfig.java,createLogger,382-382,[                    }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/config/Node.java,toString,104-104,[    public void setObject(final Object obj) {],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,35-35,[    @Rule],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,run,99-99,[            } catch (final Exception ie) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,86-103,[        private final Logger logger = LogManager.getRootLogger();,         private final int index;, ,         public LoggerThread(final int i) {,             index = i;,         },         @Override,         public void run() {,             int i = 0;,             try {,                 for (i=0; i < 30; ++i) {,                     logger.error("Thread: " + index + ", Test: " + i++);,                 },             } catch (final Exception ie) {,                 return;,             },             finished[index] = true;,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,run,121-121,[                    file.setLastModified(System.currentTimeMillis());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,106-124,[    private class Updater extends Thread {, ,         public volatile boolean shutdown = false;, ,         @Override,         public void run() {,             while (!shutdown) {,                 try {,                     Thread.sleep(1000);,                 } catch (final InterruptedException e) {,                     e.printStackTrace();,                 },                 // for running from IDE,                 final File file = new File("target/test-classes/reconfiguration-deadlock.xml");,                 if (file.exists()) {,                     file.setLastModified(System.currentTimeMillis());,                 },             },         }],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/TestConfigurator.java,testBadFileName,333-333,[            dir.append(element.toUpperCase());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,reconfigure,140-140,[            if (source == null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,<init>,105-105,[        } catch (final Exception ex) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,,266-266,[            this.node = node;],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,visitType,160-160,[                entry.setKey(alias.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,visitType,129-129,[            entry.setKey(plugin.name().toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testFakePluginAliasesContainSameInformation,66-66,[            final PluginEntry fake = pluginCache.getCategory(p.category()).get(alias.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testFakePluginFoundWithCorrectInformation,58-58,[        final PluginEntry fake = pluginCache.getCategory(p.category()).get(p.name().toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testNestedPlugin,84-84,[        final PluginEntry nested = pluginCache.getCategory(p.category()).get(p.name().toLowerCase());],,testNestedPlugin,86-86,[        assertEquals(p.name().toLowerCase(), nested.getKey());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,verifyFakePluginEntry,72-72,[        assertNotNull("The plugin '" + name.toLowerCase() + "' was not found.", fake);],,verifyFakePluginEntry,74-74,[        assertEquals(name.toLowerCase(), fake.getKey());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,build,121-121,[        } catch (final Exception e) {],,build,136-136,[        } catch (final Exception e) {],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,getPluginType,86-86,[        return plugins.get(name.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,getCategory,48-48,[        final String key = category.toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,hasCategory,90-90,[        final String key = category.toLowerCase();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/logging/log4j/core/config/plugins/util/TypeConvertersTest.java,data,149-149,[                { "ASCII", Charset.forName("ASCII"), "UTF-8", Charset.class },],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/status/StatusConfiguration.java,parseStreamName,123-123,[        return new PrintStream(fos, true);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,reconfigure,232-232,[            if (source == null) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,,335-335,[            this.element = element;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/xml/XmlConfigurationFactory.java,,35-35,[    public static final String[] SUFFIXES = new String[] {".xml", "*"};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/filter/BurstFilter.java,,167-213,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         @Override,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         @Override,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/filter/BurstFilterTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/filter/BurstFilterTest.java,test,68-68,[        List<String> msgs = app.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/filter/BurstFilterTest.java,test,66-66,[            assertTrue("Incorrect number of available slots", filter.getAvailable() < 100);],,test,72-72,[        assertTrue("Incorrect number of available slots", filter.getAvailable() < 100);],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/logging/log4j/core/filter/RegexFilterTest.java,TestNoMsg,61-68,[        final RegexFilter filter = RegexFilter.createFilter(Pattern.compile(".* test .*"), false, null, null);,         filter.start();,         assertTrue(filter.isStarted());,         assertSame(Filter.Result.DENY, filter.filter(null, Level.DEBUG, null, (String) null, (Throwable) null));,         assertSame(Filter.Result.DENY, filter.filter(null, Level.DEBUG, null, (Message) null, (Throwable) null));,         assertSame(Filter.Result.DENY, filter.filter(null, Level.DEBUG, null, null, (Object[]) null));, ,     }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,179-179,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,179-179,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,179-179,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,189-189,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,189-189,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,189-189,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/impl/ReflectionComparison.java,testCreateObjects,92-92,[            new StringFormattedMessage("Hello %1", i);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/impl/ThrowableProxy.java,toSuppressedProxies,655-655,[        return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,toCacheEntry,553-553,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testContainer,87-87,[        final ObjectReader fixtureReader = log4jObjectMapper.reader(Fixture.class);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testNameOnly,97-97,[        final Level actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testContainer,85-85,[        final String str = writer.writeValueAsString(expected);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testNameOnly,95-95,[        final String str = writer.writeValueAsString(expected);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/jackson/ListOfMapEntryDeserializer.java,,46-46,[        final List<MapEntry> list = jp.readValueAs(new TypeReference<List<MapEntry>>() {],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/jackson/Log4jStackTraceElementDeserializer.java,deserialize,65-65,[                            lineNumber = Integer.valueOf(jp.getText().trim()).intValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/jackson/MutableThreadContextStackDeserializer.java,,46-46,[        final List<String> list = jp.readValueAs(new TypeReference<List<String>>() {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/jmx/LoggerContextAdmin.java,setConfigText,203-203,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/jmx/Server.java,reregisterMBeansAfterReconfigure,161-161,[        } catch (final Exception ex) {],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterContextSelector,264-264,[        final String search = String.format(pattern, escape(contextName), "*");],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterLoggerContext,228-228,[        final String search = String.format(pattern, escape(contextName), "*");],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterStatusLogger,258-258,[        final String search = String.format(pattern, escape(contextName), "*");],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerAppenders,339-339,[            final Appender appender = map.get(name);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerLoggerConfigs,322-322,[            final LoggerConfig cfg = map.get(name);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,,39-39,[        this.compact = compact;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/layout/AbstractStringLayout.java,<init>,41-41,[    }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JsonLayout.java,getFooter,824-824,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JsonLayout.java,getHeader,808-808,[            return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,createPatternParser,205-205,[            return new PatternParser(config, KEY, LogEventPatternConverter.class);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/PatternLayout.java,toBytes,131-131,[        return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testHeaderFooter,177-177,[        assertTrue("expected \"Hello world Header\", actual \"" + new String(header) + '"',],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testMdcPattern,106-106,[        assertEquals(expectedStr, new String(result));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testRegex,116-116,[        assertEquals("org/apache/logging/log4j/core/layout/PatternLayoutTest Hello, world!", new String(result));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testSpecialChars,188-188,[        assertEquals("\\INFO\tHello, world!\n\torg.apache.logging.log4j.core.layout.PatternLayoutTest\r\n\f",],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,141-141,[        assertEquals(event1.getTimeMillis() / 1000 + " Hello, world 1!", new String(result1));],,testUnixTime,146-146,[        assertEquals(event2.getTimeMillis() / 1000 + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,125-125,[        assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));],,testUnixTime,130-130,[        assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTimeMillis,157-157,[        assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));],,testUnixTimeMillis,162-162,[        assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));],,
PERFORMANCE,DM_STRING_CTOR,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testHeaderFooter,177-177,[        assertTrue("expected \"Hello world Header\", actual \"" + new String(header) + '"',],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,120-132,[        final PatternLayout layout = PatternLayout.newBuilder().withPattern(pattern + " %m"),                 .withConfiguration(ctx.getConfiguration()).build();,         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 1!"), null);,         final byte[] result1 = layout.toByteArray(event1);,         assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));,         // System.out.println("event1=" + event1.getMillis());,         final LogEvent event2 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 2!"), null);,         final byte[] result2 = layout.toByteArray(event2);,         assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));,         // System.out.println("event2=" + event2.getMillis());,     }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,69-69,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,46-46,[    static String OUTPUT_FILE = "target/output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,48-48,[    static String WITNESS_FILE = "witness/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,45-45,[    static String msgPattern = "%m%n";],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,createPatternParser,226-226,[            return new PatternParser(config, PatternLayout.KEY, LogEventPatternConverter.class, filterClass);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,137-137,[        this.eventPrefix = eventPrefix;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,581-584,[    private class NoopChecker implements ListChecker {,         @Override,         public boolean check(final String key) {,             return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,685-709,[        public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {,             this.discardIfEmpty = discardIfEmpty;,             this.fields = fields;,         }, ,         boolean discard() {,             if (discardIfEmpty == false) {,                 return false;,             },             boolean foundNotEmptyValue = false;,             for (final Map.Entry<String, String> entry : fields.entrySet()) {,                 if (Strings.isNotEmpty(entry.getValue())) {,                     foundNotEmptyValue = true;,                     break;,                 },             },             return !foundNotEmptyValue;,         }, ,         void union(final Map<String, String> fields) {,             this.fields.putAll(fields);,         }, ,         Map<String, String> getFields() {,             return this.fields;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/SerializedLayout.java,,124-130,[        public PrivateObjectOutputStream(final OutputStream os) throws IOException {,             super(os);,         }, ,         @Override,         protected void writeStreamHeader() {,         }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/layout/SerializedLayoutTest.java,testSerialization,152-152,[        final FileOutputStream fos = new FileOutputStream(DAT_PATH);],,testSerialization,153-153,[        fos.write(layout.getHeader());],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/layout/SerializedLayoutTest.java,testDeserialization,163-163,[        final ObjectInputStream ois = new ObjectInputStream(fis);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XmlLayout.java,getFooter,231-231,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XmlLayout.java,getHeader,208-208,[            return null;],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,42-52,[    private class MyLogEvent extends AbstractLogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,42-52,[    private class MyLogEvent extends AbstractLogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/lookup/Interpolator.java,<init>,82-82,[            } catch (final Exception ignored) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/lookup/Interpolator.java,<init>,54-54,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/lookup/JndiLookupTest.java,after,50-50,[            context.close();],,
CORRECTNESS,BSHIFT_WRONG_ADD_PRIORITY,org/apache/logging/log4j/core/net/Priority.java,getValue,70-70,[        return facility.getCode() << 3 + severity.getCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/net/SmtpManager.java,,343-349,[                return new Authenticator() {,                     private final PasswordAuthentication passwordAuthentication =,                         new PasswordAuthentication(username, password);, ,                     @Override,                     protected PasswordAuthentication getPasswordAuthentication() {,                         return passwordAuthentication;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,67-67,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,,47-47,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,67-67,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketReconnectTest.java,,50-50,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,144-144,[                    final BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,146-146,[                    if (line.equals("Shutdown")) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/SslSocketManager.java,,118-118,[        private class TlsSocketManagerFactoryException extends Exception {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/TcpSocketManager.java,,207-207,[                        connector = null;],,,115-115,[            if (connector != null && !immediateFail) {],,,116-116,[                connector.latch();],,,127-127,[                if (retry && connector == null) {],,,128-128,[                    connector = new Reconnector(this);],,,129-129,[                    connector.setDaemon(true);],,,130-130,[                    connector.setPriority(Thread.MIN_PRIORITY);],,,131-131,[                    connector.start();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/net/TcpSocketManager.java,write,118-118,[            if (socket == null) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/core/net/TcpSocketManager.java,<init>,86-86,[            connector.start();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/jms/JmsQueueAppenderTest.java,,56-56,[    Logger root = ctx.getLogger("JmsQueueTest");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/jms/JmsQueueAppenderTest.java,,68-68,[        receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/jms/JmsQueueFailoverTest.java,before,80-80,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/jms/JmsQueueFailoverTest.java,before,81-81,[        listAppender = (ListAppender) config.getAppender("List");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/jms/JmsQueueFailoverTest.java,testReconnect,113-113,[        receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/jms/JmsQueueManager.java,,125-125,[            info.session.close();],,,132-132,[            info.conn.close();],,,138-138,[        info = null;],,,118-118,[        if (info != null) {],,,105-105,[        if (info == null) {],,,109-109,[            super.send(object, info.session, info.sender);],,,106-106,[            info = connect(context, factoryBindingName, queueBindingName, userName, password, false);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/jms/JmsQueueReceiver.java,usage,105-105,[        System.exit(1);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/jms/JmsQueueTest.java,,74-74,[        receiver = new JmsQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/jms/JmsQueueTest.java,,125-139,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/jms/JmsTopicFailoverTest.java,before,79-79,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/jms/JmsTopicFailoverTest.java,before,80-80,[        listAppender = (ListAppender) config.getAppender("List");],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/jms/JmsTopicReceiver.java,usage,103-103,[        System.exit(1);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/jms/JmsTopicTest.java,,74-74,[        receiver = new JmsTopicReceiver(FACTORY_NAME, TOPIC_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/jms/JmsTopicTest.java,,126-140,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,28-28,[        this.numberOfMessagesToReceive = numberOfMessagesToReceive;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,30-30,[        this.port = port;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,58-58,[                            final String line = new String(buffer, 0, i);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,53-53,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,70-70,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,shutdown,42-42,[        thread.interrupt();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,closeSockets,98-98,[            catch(final Exception e) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,shutdown,55-55,[            catch (final Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,,79-79,[        syslogReader = createTLSSyslogReader(clientSocketInputStream);],,,113-113,[                message = syslogReader.read();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,processFrames,123-123,[            this.notify();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockUdpSyslogServer.java,run,48-48,[                final String str = new String(packet.getData(), 0, packet.getLength());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockUdpSyslogServer.java,shutdown,36-36,[        thread.interrupt();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java,,57-63,[        public ThreadFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Filter.Result filter(final LogEvent event) {,             return event.getThreadName().equals(Thread.currentThread().getName()) ? onMatch : onMismatch;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/net/server/JsonInputStreamLogEventBridge.java,getEventIndices,59-74,[                switch (c) {,                 case EVENT_START_MARKER:,                     if (!inStr) {,                         stack++;,                     },                     break;,                 case EVENT_END_MARKER:,                     if (!inStr) {,                         stack--;,                     },                     break;,                 case JSON_STR_DELIM:,                     inStr = !inStr;,                     break;,                 case JSON_ESC:,                     inEsc = true;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/server/TcpSocketServer.java,run,74-74,[                    } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/server/UdpSocketServer.java,main,105-105,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/server/UdpSocketServer.java,,124-124,[    private final int maxBufferSize = 1024 * 65 + 1024;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/LegacyBsdTlsSyslogInputStreamReader.java,read,51-51,[                message = buffer.toString();],,read,57-57,[        message = buffer.toString();],,
CORRECTNESS,EQ_SELF_USE_OBJECT,org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,equals,209-228,[        if (config == null) {,             return false;,         }, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null) {,             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         } else {,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;,         }, ,         if (trustStoreConfig != null) {,             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         } else {,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;,         }, ,         return keyStoreEquals && trustStoreEquals;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,equals,209-228,[        if (config == null) {,             return false;,         }, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null) {,             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         } else {,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;,         }, ,         if (trustStoreConfig != null) {,             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         } else {,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;,         }, ,         return keyStoreEquals && trustStoreEquals;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java,connectionFailsWithoutValidServerCertificate,54-54,[        os.write("GET config/login_verify2?".getBytes());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,buildMessage,67-67,[        final String message = messageBuffer.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,,32-32,[    private final int lengthBufferSize = 8192;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,,31-31,[    private final int messagePartBufferSize = 8192;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReaderBase.java,,29-29,[        this.messageFormat = messageFormat;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/AnsiEscape.java,createSequence,326-326,[            } catch (final Exception ex) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/CallerInformationTest.java,,32-32,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j2-calling-class.xml");],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/DatePatternConverter.java,,239-239,[        output.append(cachedDateString);],,,236-236,[                cachedDateString = formatter.format(timestamp);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/ExtendedThrowableTest.java,,37-37,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j-throwablefilter.xml");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/ExtendedThrowableTest.java,testException,50-50,[        final List<String> msgs = app.getMessages();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/LevelPatternConverter.java,newInstance,70-70,[            if (pair == null || pair.length != 2) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,527-527,[        } catch (final Exception ex) {],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,48-48,[    private final String mdcMsgPattern1 = "%m : %X%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,49-49,[    private final String mdcMsgPattern2 = "%m : %X{key1}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,50-50,[    private final String mdcMsgPattern3 = "%m : %X{key2}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,51-51,[    private final String mdcMsgPattern4 = "%m : %X{key3}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,52-52,[    private final String mdcMsgPattern5 = "%m : %X{key1},%X{key2},%X{key3}%n";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,45-45,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,42-42,[    static String OUTPUT_FILE   = "output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,43-43,[    static String WITNESS_FILE  = "witness/PatternParser";],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,,43-43,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,setUp,47-47,[        app = context.getListAppender("List").clear();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,setUp,48-48,[        app2 = context.getListAppender("List2").clear();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java,,68-68,[        toAppendTo.append(relative);],,,65-65,[                relative = Long.toString(timestamp - startTime);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/RootThrowableTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RootThrowableTest.java,setUp,42-42,[        app = context.getListAppender("List").clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/StyleConverterTest.java,testReplacement,56-56,[        final List<String> msgs = app.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/StyleConverterTest.java,testReplacement,54-54,[        logger.error(this.getClass().getName());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,formatSubShortOption,101-101,[            if (trace !=null && trace.length > 0) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/ThrowableTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/ThrowableTest.java,setUp,42-42,[        app = context.getListAppender("List").clear();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,99-99,[                    for (int index = 2; clazz != null; ++index) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,115-115,[                } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/ClockFactory.java,createClock,81-81,[        } catch (final Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,60-60,[        final BufferedReader in1 = new BufferedReader(new FileReader(file1));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,62-62,[            open(testClass, file2)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,outputFile,114-114,[        final BufferedReader in1 = new BufferedReader(new InputStreamReader(is));],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/util/CyclicBuffer.java,,92-92,[        return 0 == numElems;],,,62-62,[        if (numElems < ring.length) {],,,63-63,[            numElems++;],,,74-74,[        final T[] array = makeArray(clazz, numElems);],,,76-76,[        while (numElems > 0) {],,,77-77,[            numElems--;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/NameUtil.java,md5,44-44,[            digest.update(string.getBytes());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/NameUtil.java,md5,55-55,[        } catch (final Exception ex) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/util/OptionConverter.java,toFileSize,181-181,[        if (str != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,<clinit>,43-43,[        catch (final Exception ignored) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,start,72-72,[            catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,stop,88-88,[            catch (final Exception e) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/util/Throwables.java,getSuppressed,100-100,[                return null;],,getSuppressed,103-103,[        return null;],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/core/util/Transform.java,escapeJsonControlCharacters,147-149,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,escapeJsonControlCharacters,151-153,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,escapeJsonControlCharacters,155-157,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/util/UuidUtil.java,<clinit>,75-75,[                    if (method != null) {],,<clinit>,86-86,[                            if (method != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/UuidUtil.java,<clinit>,92-92,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,196-196,[                } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,testNotConnected,300-300,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getBody,400-400,[        return new String(baos.toByteArray());],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,235-235,[        if (rpcClient != null) {],,,242-242,[        rpcClient = null;],,,237-237,[                rpcClient.close();],,,165-165,[        if (rpcClient == null) {],,,169-169,[        if (rpcClient != null) {],,,171-171,[                rpcClient.append(event);],,,166-166,[            rpcClient = connect(agents, retries, connectTimeout, requestTimeout);],,,173-173,[                rpcClient.close();],,,174-174,[                rpcClient = null;],,,139-139,[        if (rpcClient == null) {],,,143-143,[        if (rpcClient != null) {],,,140-140,[            rpcClient = connect(agents, retries, connectTimeout, requestTimeout);],,,148-148,[                rpcClient.close();],,,149-149,[                rpcClient = null;],,,146-146,[                rpcClient.appendBatch(events.getEvents());],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,47-47,[    private final int current = 0;],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,223-223,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,getBody,206-206,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,215-215,[            for (final File child : files) {],,deleteFiles,214-214,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,setUp,105-105,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,teardown,114-114,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,testFailover,187-187,[            final Event event = alternate.poll();],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,248-248,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,getBody,231-231,[            return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,240-240,[            for (final File child : files) {],,deleteFiles,239-239,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,setUp,105-105,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,387-387,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,getBody,370-370,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,379-379,[            for (final File child : files) {],,deleteFiles,378-378,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,setUp,107-107,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,,298-311,[        public WriterThread(final int start, final int stop) {,             this.start = start;,             this.stop = stop;,         }, ,         @Override,         public void run() {,             for (int i = start; i < stop; ++i) {,                 final StructuredDataMessage msg = new StructuredDataMessage(,                     "Test", "Test Multiple " + i, "Test");,                 msg.put("counter", Integer.toString(i));,                 EventLogger.logEvent(msg);,             },         }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,send,215-215,[        } catch (final Exception ex) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,<init>,128-128,[        this.worker.start();],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,424-424,[                    database = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,428-428,[                    environment = null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,422-422,[                if (database != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,422-422,[                if (database != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,455-455,[                                } catch (final Exception ex) {],,createManager,469-469,[            } catch (final Exception ex) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,,846-846,[            return isOpen;],,,850-850,[            isOpen = true;],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,waitForOpen,859-859,[            wait(timeout);],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,549-549,[                                        status = cursor.getFirst(key, data, LockMode.RMW);],,run,568-568,[                                        if (cursor != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,627-627,[                    } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,sendBatch,766-766,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,803-803,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,792-792,[                dais.read(bytes, 0, length);],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,164-164,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,147-147,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,156-156,[            for (final File child : files) {],,deleteFiles,155-155,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,setUp,103-103,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,141-147,[        final ByteArrayOutputStream baos = new ByteArrayOutputStream();,         final InputStream is = new GZIPInputStream(new ByteArrayInputStream(event.getBody()));,         int n = 0;,         while (-1 != (n = is.read())) {,             baos.write(n);,         },         return new String(baos.toByteArray());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,112-112,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,111-111,[        primary.stop();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/jcl/LoggerTest.java,setupClass,48-48,[        ctx.getConfiguration();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGui.java,installLookAndFeel,323-323,[        } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/jmx/gui/Client.java,,54-189,[    public Client(final JMXConnector connector) throws MalformedObjectNameException, IOException {,         this.connector = Assert.requireNonNull(connector, "JMXConnector");,         this.connector.connect();,         this.connection = connector.getMBeanServerConnection();,         init();,     }, ,     /**,      * Constructs a new {@code Client} object and creates proxies for all known,      * remote MBeans.,      * ,      * @param mBeanServerConnection the MBean server connection through which to,      *            communicate with the remote mbeans,      * @throws MalformedObjectNameException if a problem occurred identifying,      *             one of the remote mbeans,      * @throws IOException if the connection failed,      */,     public Client(final MBeanServerConnection mBeanServerConnection) throws MalformedObjectNameException, IOException {,         this.connection = mBeanServerConnection;,         init();,     }, ,     private void init() throws MalformedObjectNameException, IOException {,     }, ,     private Set<ObjectName> find(final String pattern) throws JMException, IOException {,         final ObjectName search = new ObjectName(String.format(pattern, "*"));,         final Set<ObjectName> result = connection.queryNames(search, null);,         return result;,     }, ,     /**,      * Returns a list of proxies that allow operations to be performed on the,      * remote {@code LoggerContextAdminMBean}s.,      * ,      * @return a list of proxies to the remote {@code LoggerContextAdminMBean}s,      * @throws IOException If an I/O error occurred,      * @throws JMException If a management error occurred,      */,     public List<LoggerContextAdminMBean> getLoggerContextAdmins() throws JMException, IOException {,         final List<LoggerContextAdminMBean> result = new ArrayList<LoggerContextAdminMBean>();,         final Set<ObjectName> contextNames = find(LoggerContextAdminMBean.PATTERN);,         for (final ObjectName contextName : contextNames) {,             result.add(getLoggerContextAdmin(contextName));,         },         return result;,     }, ,     public LoggerContextAdminMBean getLoggerContextAdmin(final ObjectName name) {,         final LoggerContextAdminMBean ctx = JMX.newMBeanProxy(connection, //,                 name, //,                 LoggerContextAdminMBean.class, false);,         return ctx;,     }, ,     /**,      * Closes the client connection to its server. Any ongoing or new requests,      * to the MBeanServerConnection will fail.,      */,     public void close() {,         try {,             connector.close();,         } catch (final IOException e) {,             e.printStackTrace();,         },     }, ,     /**,      * Returns the MBean server connection through which to communicate with the,      * remote mbeans.,      * ,      * @return the MBean server connection,      */,     public MBeanServerConnection getConnection() {,         return connection;,     }, ,     /**,      * Returns the {@code StatusLoggerAdminMBean} associated with the specified,      * context name, or {@code null}.,      * ,      * @param contextName search key,      * @return StatusLoggerAdminMBean or null,      * @throws MalformedObjectNameException If an object name is malformed,      * @throws IOException If an I/O error occurred,      */,     public StatusLoggerAdminMBean getStatusLoggerAdmin(final String contextName),             throws MalformedObjectNameException, IOException {,         final String pattern = StatusLoggerAdminMBean.PATTERN;,         final String mbean = String.format(pattern, Server.escape(contextName));,         final ObjectName search = new ObjectName(mbean);,         final Set<ObjectName> result = connection.queryNames(search, null);,         if (result.size() == 0) {,             return null;,         },         if (result.size() > 1) {,             System.err.println("WARN: multiple status loggers found for " + contextName + ": " + result);,         },         final StatusLoggerAdminMBean proxy = JMX.newMBeanProxy(connection, //,                 result.iterator().next(), //,                 StatusLoggerAdminMBean.class, true); // notificationBroadcaster,         return proxy;,     }, ,     /**,      * Returns {@code true} if the specified {@code ObjectName} is for a,      * {@code LoggerContextAdminMBean}, {@code false} otherwise.,      * ,      * @param mbeanName the {@code ObjectName} to check.,      * @return {@code true} if the specified {@code ObjectName} is for a,      *         {@code LoggerContextAdminMBean}, {@code false} otherwise,      */,     public boolean isLoggerContext(final ObjectName mbeanName) {,         return Server.DOMAIN.equals(mbeanName.getDomain()) //,                 && mbeanName.getKeyPropertyList().containsKey("type") //,                 && mbeanName.getKeyPropertyList().size() == 1;,     }, ,     /**,      * Returns the {@code ObjectName} of the {@code StatusLoggerAdminMBean},      * associated with the specified {@code LoggerContextAdminMBean}.,      * ,      * @param loggerContextObjName the {@code ObjectName} of a,      *            {@code LoggerContextAdminMBean},      * @return {@code ObjectName} of the {@code StatusLoggerAdminMBean},      */,     public ObjectName getStatusLoggerObjectName(final ObjectName loggerContextObjName) {,         if (!isLoggerContext(loggerContextObjName)) {,             throw new IllegalArgumentException("Not a LoggerContext: " + loggerContextObjName);,         },         final String cxtName = loggerContextObjName.getKeyProperty("type");,         final String name = String.format(StatusLoggerAdminMBean.PATTERN, cxtName);,         try {,             return new ObjectName(name);,         } catch (final MalformedObjectNameException ex) {,             throw new IllegalStateException(name, ex);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/jmx/gui/ClientGui.java,,152-159,[        toggleButton.setAction(new AbstractAction() {,             private static final long serialVersionUID = -4214143754637722322L;, ,             @Override,             public void actionPerformed(final ActionEvent e) {,                 final boolean wrap = toggleButton.isSelected();,                 text.setLineWrap(wrap);,             }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGui.java,run,291-291,[                } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getConfiguration,99-99,[        return context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getLogger,81-81,[        return context.getLogger(testClassName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getLogger,91-91,[        return context.getLogger(name);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,44-44,[        this.isAlive = thread.isAlive();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,41-41,[        this.longName = thread.toString();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/message/ExtendedThreadInformation.java,printStack,63-66,[                        break;,                     case WAITING:,                         sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());],,printStack,68-71,[                        break;,                     case TIMED_WAITING:,                         sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testNoArgs,61-61,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testParamNoArgs,82-82,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testStringNoArgs,39-39,[        msg = new FormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/FormattedMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/message/ParameterizedMessage.java,equals,254-271,[     */,     public static String format(final String messagePattern, final Object[] arguments) {,         if (messagePattern == null || arguments == null || arguments.length == 0) {,             return messagePattern;,         }, ,         final StringBuilder result = new StringBuilder();,         int escapeCounter = 0;,         int currentArgument = 0;,         for (int i = 0; i < messagePattern.length(); i++) {,             final char curChar = messagePattern.charAt(i);,             if (curChar == ESCAPE_CHAR) {,                 escapeCounter++;,             } else {,                 if (curChar == DELIM_START && i < messagePattern.length() - 1,                         && messagePattern.charAt(i + 1) == DELIM_STOP) {,                     // write escaped escape chars,                     final int escapedEscapes = escapeCounter / 2;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/MessageFormatMessageTest.java,testNoArgs,39-39,[        msg = new MessageFormatMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/MessageFormatMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testFormattedParameterizedPerf,118-118,[        formattedTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testMessageFormatPerf,90-90,[        msgFormatTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testParameterizedPerf,104-104,[        paramTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testStringPerf,76-76,[        stringTime = timer.getElapsedNanoTime();],,
STYLE,IM_BAD_CHECK_FOR_ODD,org/apache/logging/log4j/message/ParameterizedMessage.java,format,309-309,[     * Counts the number of unescaped placeholders in the given messagePattern.],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/ParameterizedMessageTest.java,testNoArgs,38-38,[    }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/SimpleMessage.java,getParameters,65-65,[    public Object[] getParameters() {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/StringFormattedMessageTest.java,testNoArgs,39-39,[        msg = new StringFormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/StringFormattedMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,UC_USELESS_CONDITION,org/apache/logging/log4j/message/StructuredDataId.java,<init>,96-96,[        }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/logging/log4j/message/StructuredDataMessage.java,,47-287,[        FULL,     }, ,     /**,      * Constructor based on a String id.,      * @param id The String id.,      * @param msg The message.,      * @param type The message type.,      */,     public StructuredDataMessage(final String id, final String msg, final String type) {,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     },     /**,      * Constructor based on a String id.,      * @param id The String id.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final String id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type) {,         this.id = id;,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = id;,         this.message = msg;,         this.type = type;,     }, , ,     /**,      * Constructor based on a StructuredDataMessage.,      * @param msg The StructuredDataMessage.,      * @param map The StructuredData map.,      */,     private StructuredDataMessage(final StructuredDataMessage msg, final Map<String, String> map) {,         super(map);,         this.id = msg.id;,         this.message = msg.message;,         this.type = msg.type;,     }, , ,     /**,      * Basic constructor.,      */,     protected StructuredDataMessage() {, ,     }, ,     /**,      * Returns the supported formats.,      * @return An array of the supported format names.,      */,     @Override,     public String[] getFormats() {,         final String[] formats = new String[Format.values().length];,         int i = 0;,         for (final Format format : Format.values()) {,             formats[i++] = format.name();,         },         return formats;,     }, ,     /**,      * Returns the id.,      * @return the StructuredDataId.,      */,     public StructuredDataId getId() {,         return id;,     }, ,     /**,      * Sets the id from a String.,      * @param id The String id.,      */,     protected void setId(final String id) {,         this.id = new StructuredDataId(id, null, null);,     }, ,     /**,      * Sets the id.,      * @param id The StructuredDataId.,      */,     protected void setId(final StructuredDataId id) {,         this.id = id;,     }, ,     /**,      * Sets the type.,      * @return the type.,      */,     public String getType() {,         return type;,     }, ,     protected void setType(final String type) {,         if (type.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("structured data type exceeds maximum length of 32 characters: " + type);,         },         this.type = type;,     }, ,     /**,      * Returns the message.,      * @return the message.,      */,     @Override,     public String getFormat() {,         return message;,     }, ,     protected void setMessageFormat(final String msg) {,         this.message = msg;,     }, , ,     @Override,     protected void validate(final String key, final String value) {,         validateKey(key);,     }, ,     private void validateKey(final String key) {,         if (key.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("Structured data keys are limited to 32 characters. key: " + key);,         },         final char[] chars = key.toCharArray();,         for (final char c : chars) {,             if (c < '!' || c > '~' || c == '=' || c == ']' || c == '"') {,                 throw new IllegalArgumentException("Structured data keys must contain printable US ASCII characters" +,                         "and may not contain a space, =, ], or \"");,             },         },     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @return The formatted String.,      */,     @Override,     public String asString() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @param format The format identifier. Ignored in this implementation.,      * @return The formatted String.,      */, ,     @Override,     public String asString(final String format) {,         try {,             return asString(EnglishEnums.valueOf(Format.class, format), null);,         } catch (final IllegalArgumentException ex) {,             return asString();,         },     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @param format           "full" will include the type and message. null will return only the STRUCTURED-DATA as,      *                         described in RFC 5424,      * @param structuredDataId The SD-ID as described in RFC 5424. If null the value in the StructuredData,      *                         will be used.,      * @return The formatted String.,      */,     public final String asString(final Format format, final StructuredDataId structuredDataId) {,         final StringBuilder sb = new StringBuilder();,         final boolean full = Format.FULL.equals(format);,         if (full) {,             final String type = getType();,             if (type == null) {,                 return sb.toString();,             },             sb.append(getType()).append(' ');,         },         StructuredDataId id = getId();,         if (id != null) {,             id = id.makeId(structuredDataId);,         } else {,             id = structuredDataId;,         },         if (id == null || id.getName() == null) {,             return sb.toString();,         },         sb.append('[');,         sb.append(id);,         sb.append(' ');,         appendMap(sb);,         sb.append(']');,         if (full) {,             final String msg = getFormat();,             if (msg != null) {,                 sb.append(' ').append(msg);,             },         },         return sb.toString();,     }, ,     /**,      * Formats the message and return it.,      * @return the formatted message.,      */,     @Override,     public String getFormattedMessage() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Formats the message according the the specified format.],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/ThreadDumpMessage.java,getParameters,113-113,[    /**],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,testMessageWithLocks,53-53,[                Thread.sleep(200);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,72-80,[        final String expected = "ThreadDumpMessage[Title=\"Test\"]";,         assertEquals(expected, msg.toString());,     }, ,     private class Thread1 extends Thread {,         private final ReentrantLock lock;, ,         public Thread1(final ReentrantLock lock) {,             this.lock = lock;],,
MT_CORRECTNESS,ESync_EMPTY_SYNC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,94-94,[            this.obj = obj;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,86-95,[            lock.unlock();,         },     }, ,     private class Thread2 extends Thread {,         private final Object obj;, ,         public Thread2(final Object obj) {,             this.obj = obj;,         }],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,95-95,[        }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,176-179,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,272-275,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,278-281,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,284-287,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,408-411,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,414-417,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,420-423,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,426-429,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,432-435,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/nosql/appender/couchdb/CouchDbProvider.java,createNoSqlProvider,133-133,[                protocol = protocol.toLowerCase();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,createNoSqlProvider,168-168,[            } catch (final Exception e) {],,createNoSqlProvider,197-197,[                } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,createNoSqlProvider,137-137,[                        description += " { " + address.getHost() + ", " + address.getPort() + " } ";],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/osgi/BundleTestInfo.java,<init>,44-44,[            fileReader = new FileReader(fileName);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncLoggersBenchmark.java,down,73-73,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncLoggersBenchmark.java,up,63-63,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/Log4j1AsyncAppenderBenchmark.java,down,70-70,[            new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/Log4j2AsyncAppenderBenchmark.java,down,70-70,[            new File("perftest.log").delete();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/Log4jLogEventBenchmark.java,testNoException,47-47,[        final Log4jLogEvent event = new Log4jLogEvent("a.b.c", null, "a.b.c", Level.INFO, MESSAGE, t);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/Log4jLogEventBenchmark.java,setup,37-37,[        ERROR = new Exception("test");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/Log4jLogEventBenchmark.java,setup,36-36,[        MESSAGE = new SimpleMessage("Test message");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/LogbackAsyncAppenderBenchmark.java,down,72-72,[            new File("perftest.log").delete();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latency.java,latency_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latency.java,latency_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latency.java,latency_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughput.java,throughput_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughput.java,throughput_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughput.java,throughput_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j1AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latency.java,latency_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latency.java,latency_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latency.java,latency_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughput.java,throughput_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughput.java,throughput_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughput.java,throughput_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/Log4j2AsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/Log4jLogEventBenchmark_testException.java,,33-364,[public final class Log4jLogEventBenchmark_testException {, ,     private boolean p0, p0_1, p0_2, p0_3, p0_4, p0_5, p0_6, p0_7, p0_8, p0_9, p0_10, p0_11, p0_12, p0_13, p0_14, p0_15;,     private boolean p1, p1_1, p1_2, p1_3, p1_4, p1_5, p1_6, p1_7, p1_8, p1_9, p1_10, p1_11, p1_12, p1_13, p1_14, p1_15;,     private boolean p2, p2_1, p2_2, p2_3, p2_4, p2_5, p2_6, p2_7, p2_8, p2_9, p2_10, p2_11, p2_12, p2_13, p2_14, p2_15;,     private boolean p3, p3_1, p3_2, p3_3, p3_4, p3_5, p3_6, p3_7, p3_8, p3_9, p3_10, p3_11, p3_12, p3_13, p3_14, p3_15;,     private boolean p4, p4_1, p4_2, p4_3, p4_4, p4_5, p4_6, p4_7, p4_8, p4_9, p4_10, p4_11, p4_12, p4_13, p4_14, p4_15;,     private boolean p5, p5_1, p5_2, p5_3, p5_4, p5_5, p5_6, p5_7, p5_8, p5_9, p5_10, p5_11, p5_12, p5_13, p5_14, p5_15;,     private boolean p6, p6_1, p6_2, p6_3, p6_4, p6_5, p6_6, p6_7, p6_8, p6_9, p6_10, p6_11, p6_12, p6_13, p6_14, p6_15;,     private boolean p7, p7_1, p7_2, p7_3, p7_4, p7_5, p7_6, p7_7, p7_8, p7_9, p7_10, p7_11, p7_12, p7_13, p7_14, p7_15;,     private boolean p8, p8_1, p8_2, p8_3, p8_4, p8_5, p8_6, p8_7, p8_8, p8_9, p8_10, p8_11, p8_12, p8_13, p8_14, p8_15;,     private boolean p9, p9_1, p9_2, p9_3, p9_4, p9_5, p9_6, p9_7, p9_8, p9_9, p9_10, p9_11, p9_12, p9_13, p9_14, p9_15;,     private boolean p10, p10_1, p10_2, p10_3, p10_4, p10_5, p10_6, p10_7, p10_8, p10_9, p10_10, p10_11, p10_12, p10_13, p10_14, p10_15;,     private boolean p11, p11_1, p11_2, p11_3, p11_4, p11_5, p11_6, p11_7, p11_8, p11_9, p11_10, p11_11, p11_12, p11_13, p11_14, p11_15;,     private boolean p12, p12_1, p12_2, p12_3, p12_4, p12_5, p12_6, p12_7, p12_8, p12_9, p12_10, p12_11, p12_12, p12_13, p12_14, p12_15;,     private boolean p13, p13_1, p13_2, p13_3, p13_4, p13_5, p13_6, p13_7, p13_8, p13_9, p13_10, p13_11, p13_12, p13_13, p13_14, p13_15;,     private boolean p14, p14_1, p14_2, p14_3, p14_4, p14_5, p14_6, p14_7, p14_8, p14_9, p14_10, p14_11, p14_12, p14_13, p14_14, p14_15;,     private boolean p15, p15_1, p15_2, p15_3, p15_4, p15_5, p15_6, p15_7, p15_8, p15_9, p15_10, p15_11, p15_12, p15_13, p15_14, p15_15;,     int startRndMask;, ,     public Collection<? extends Result> testException_Throughput(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(1L);,             testException_Throughput_measurementLoop(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testException", res.getOperations(), res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testException_Throughput_measurementLoop(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testException_AverageTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(1L);,             testException_AverageTime_measurementLoop(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testException", res.getOperations(), res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testException_AverageTime_measurementLoop(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testException_SampleTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             SampleBuffer buffer = new SampleBuffer();,             testException_SampleTime_measurementLoop(control, buffer, targetSamples, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testException", buffer, tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testException_SampleTime_measurementLoop(InfraControl control, SampleBuffer buffer, int targetSamples, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,             if (sample) {,                 buffer.add(System.nanoTime() - time);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public Collection<? extends Result> testException_SingleShotTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(1L);,             testException_SingleShotTime_measurementStub(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,                 control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testException", res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testException_SingleShotTime_measurementStub(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         int batchSize = control.batchSize;,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_log4jlogeventbenchmark0_0.testException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     BlackHole_1_jmh f_blackhole1_1;,     ,     BlackHole_1_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control) throws Throwable {,         if (f_blackhole1_1 == null) {,             BlackHole_1_jmh val = new BlackHole_1_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     BlackHole_1_jmh f_blackhole1_2;,     ,     BlackHole_1_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control) throws Throwable {,         if (f_blackhole1_2 == null) {,             BlackHole_1_jmh val = new BlackHole_1_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     Log4jLogEventBenchmark_1_jmh f_log4jlogeventbenchmark0_0;,     ,     Log4jLogEventBenchmark_1_jmh _jmh_tryInit_f_log4jlogeventbenchmark0_0(InfraControl control) throws Throwable {,         if (f_log4jlogeventbenchmark0_0 == null) {,             Log4jLogEventBenchmark_1_jmh val = new Log4jLogEventBenchmark_1_jmh();,             val.setup();,             val.readyTrial = true;,             f_log4jlogeventbenchmark0_0 = val;,         },         return f_log4jlogeventbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/Log4jLogEventBenchmark_testNoException.java,,33-364,[public final class Log4jLogEventBenchmark_testNoException {, ,     private boolean p0, p0_1, p0_2, p0_3, p0_4, p0_5, p0_6, p0_7, p0_8, p0_9, p0_10, p0_11, p0_12, p0_13, p0_14, p0_15;,     private boolean p1, p1_1, p1_2, p1_3, p1_4, p1_5, p1_6, p1_7, p1_8, p1_9, p1_10, p1_11, p1_12, p1_13, p1_14, p1_15;,     private boolean p2, p2_1, p2_2, p2_3, p2_4, p2_5, p2_6, p2_7, p2_8, p2_9, p2_10, p2_11, p2_12, p2_13, p2_14, p2_15;,     private boolean p3, p3_1, p3_2, p3_3, p3_4, p3_5, p3_6, p3_7, p3_8, p3_9, p3_10, p3_11, p3_12, p3_13, p3_14, p3_15;,     private boolean p4, p4_1, p4_2, p4_3, p4_4, p4_5, p4_6, p4_7, p4_8, p4_9, p4_10, p4_11, p4_12, p4_13, p4_14, p4_15;,     private boolean p5, p5_1, p5_2, p5_3, p5_4, p5_5, p5_6, p5_7, p5_8, p5_9, p5_10, p5_11, p5_12, p5_13, p5_14, p5_15;,     private boolean p6, p6_1, p6_2, p6_3, p6_4, p6_5, p6_6, p6_7, p6_8, p6_9, p6_10, p6_11, p6_12, p6_13, p6_14, p6_15;,     private boolean p7, p7_1, p7_2, p7_3, p7_4, p7_5, p7_6, p7_7, p7_8, p7_9, p7_10, p7_11, p7_12, p7_13, p7_14, p7_15;,     private boolean p8, p8_1, p8_2, p8_3, p8_4, p8_5, p8_6, p8_7, p8_8, p8_9, p8_10, p8_11, p8_12, p8_13, p8_14, p8_15;,     private boolean p9, p9_1, p9_2, p9_3, p9_4, p9_5, p9_6, p9_7, p9_8, p9_9, p9_10, p9_11, p9_12, p9_13, p9_14, p9_15;,     private boolean p10, p10_1, p10_2, p10_3, p10_4, p10_5, p10_6, p10_7, p10_8, p10_9, p10_10, p10_11, p10_12, p10_13, p10_14, p10_15;,     private boolean p11, p11_1, p11_2, p11_3, p11_4, p11_5, p11_6, p11_7, p11_8, p11_9, p11_10, p11_11, p11_12, p11_13, p11_14, p11_15;,     private boolean p12, p12_1, p12_2, p12_3, p12_4, p12_5, p12_6, p12_7, p12_8, p12_9, p12_10, p12_11, p12_12, p12_13, p12_14, p12_15;,     private boolean p13, p13_1, p13_2, p13_3, p13_4, p13_5, p13_6, p13_7, p13_8, p13_9, p13_10, p13_11, p13_12, p13_13, p13_14, p13_15;,     private boolean p14, p14_1, p14_2, p14_3, p14_4, p14_5, p14_6, p14_7, p14_8, p14_9, p14_10, p14_11, p14_12, p14_13, p14_14, p14_15;,     private boolean p15, p15_1, p15_2, p15_3, p15_4, p15_5, p15_6, p15_7, p15_8, p15_9, p15_10, p15_11, p15_12, p15_13, p15_14, p15_15;,     int startRndMask;, ,     public Collection<? extends Result> testNoException_Throughput(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(1L);,             testNoException_Throughput_measurementLoop(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testNoException", res.getOperations(), res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testNoException_Throughput_measurementLoop(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testNoException_AverageTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(1L);,             testNoException_AverageTime_measurementLoop(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testNoException", res.getOperations(), res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testNoException_AverageTime_measurementLoop(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testNoException_SampleTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             SampleBuffer buffer = new SampleBuffer();,             testNoException_SampleTime_measurementLoop(control, buffer, targetSamples, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testNoException", buffer, tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testNoException_SampleTime_measurementLoop(InfraControl control, SampleBuffer buffer, int targetSamples, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,             if (sample) {,                 buffer.add(System.nanoTime() - time);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public Collection<? extends Result> testNoException_SingleShotTime(InfraControl control, ThreadControl threadControl) throws Throwable {,         if (threadControl.subgroup == 0) {,             BlackHole_1_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control);,             Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control);,             BlackHole_1_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(1L);,             testNoException_SingleShotTime_measurementStub(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,                 control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             TimeUnit tu = (control.timeUnit != null) ? control.timeUnit : TimeUnit.MILLISECONDS;,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testNoException", res.getTime(), tu));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     @CompilerControl(CompilerControl.Mode.DONT_INLINE),     public void testNoException_SingleShotTime_measurementStub(InfraControl control, RawResults result, BlackHole_1_jmh l_blackhole1_2, Log4jLogEventBenchmark_1_jmh l_log4jlogeventbenchmark0_0, BlackHole_1_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         int batchSize = control.batchSize;,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_log4jlogeventbenchmark0_0.testNoException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     BlackHole_1_jmh f_blackhole1_1;,     ,     BlackHole_1_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control) throws Throwable {,         if (f_blackhole1_1 == null) {,             BlackHole_1_jmh val = new BlackHole_1_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     BlackHole_1_jmh f_blackhole1_2;,     ,     BlackHole_1_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control) throws Throwable {,         if (f_blackhole1_2 == null) {,             BlackHole_1_jmh val = new BlackHole_1_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     Log4jLogEventBenchmark_1_jmh f_log4jlogeventbenchmark0_0;,     ,     Log4jLogEventBenchmark_1_jmh _jmh_tryInit_f_log4jlogeventbenchmark0_0(InfraControl control) throws Throwable {,         if (f_log4jlogeventbenchmark0_0 == null) {,             Log4jLogEventBenchmark_1_jmh val = new Log4jLogEventBenchmark_1_jmh();,             val.setup();,             val.readyTrial = true;,             f_log4jlogeventbenchmark0_0 = val;,         },         return f_log4jlogeventbenchmark0_0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latency.java,latency_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latency.java,latency_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latency.java,latency_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_latencyBaseline.java,latencyBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughput.java,throughput_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughput.java,throughput_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughput.java,throughput_Throughput,109-109,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_AverageTime,193-193,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,362-362,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/LogbackAsyncAppenderBenchmark_throughputBaseline.java,throughputBaseline_Throughput,109-109,[                    f_normalstate2_G = null;],,
CORRECTNESS,UR_UNINIT_READ,org/apache/logging/log4j/samples/app/LoggingApp.java,<init>,65-65,[        if (events == null) {],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/samples/app/LoggingApp.java,run,107-107,[                    Thread.sleep(rand * 1000);],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingApp.java,run,114-114,[                    final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingController.java,run,109-109,[                            final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/samples/app/MockEventsSupplier.java,,33-33,[    static Random random = new Random();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,lowerFirst,40-40,[        return String.valueOf(name.charAt(0)).toLowerCase() + name.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,methodCaseName,75-75,[        return variable.substring(0, 1).toUpperCase() + variable.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,upperFirst,36-36,[        return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,logMessage,166-166,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,logMessage,165-165,[            t.printStackTrace(new PrintStream(baos));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLoggerContext.java,<init>,91-91,[                ps = new PrintStream(os);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/simple/SimpleLoggerContext.java,,45-45,[    private final Properties simpleLogProps = new Properties();],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/logging/log4j/spi/DefaultThreadContextStackTest.java,testEqualsVsMutable,45-45,[        assertEquals(stack2, stack1);],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/logging/log4j/spi/DefaultThreadContextStackTest.java,testEqualsVsMutable,44-44,[        assertEquals(stack1, stack2);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,120-120,[        return sb.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,119-119,[        }],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/logging/log4j/status/StatusLogger.java,add,261-261,[    }],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/status/StatusLogger.java,,255-263,[        return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final Object message, final Throwable t) {,         return isEnabled(level, marker);,     }, ,     @Override],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/status/StatusLogger.java,,255-263,[        return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final Object message, final Throwable t) {,         return isEnabled(level, marker);,     }, ,     @Override],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/CatchingTagTest.java,setUpClass,51-51,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/EntryTagTest.java,setUpClass,49-49,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,testException,39-39,[        assertNull("The exception should be null (1).", this.tag.getException());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,,32-32,[        this.tag = new ExceptionAwareTagSupport() {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/ExitTagTest.java,setUpClass,49-49,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/IfEnabledTagTest.java,setUpClass,46-46,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/LogTagTest.java,testLevel,39-39,[        assertNull("The level should be null (1).", this.tag.getLevel());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,35-38,[        this.context = new MockPageContext() {,             @Override,             public Object getPage() {,                 return page == null ? this : page;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,41-41,[        this.tag = new LoggerAwareTagSupport() {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,111-111,[        final Object page = new Object() {};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,132-132,[        final Object page = new Object() {};],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,setUpClass,53-53,[        context.getConfiguration();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,,68-73,[        this.tag = new LoggingMessageTagSupport() {,             private static final long serialVersionUID = 1L;, ,             @Override,             protected Level getLevel() {,                 return level;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/test/appender/ListAppender.java,write,97-97,[        final String str = new String(bytes);],,
BAD_PRACTICE,SI_INSTANCE_BEFORE_FINALS_ASSIGNED,org/apache/logging/log4j/util/PropertiesUtil.java,<init>,36-36,[    private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,,210-210,[        if (this.loggerContext != null) {],,,211-211,[            ContextAnchor.THREAD_CONTEXT.set(this.loggerContext);],,,194-194,[            if (this.loggerContext != null) {],,,200-200,[                this.loggerContext.stop();],,,201-201,[                this.loggerContext.setExternalContext(null);],,,202-202,[                this.loggerContext = null;],,,126-126,[        this.loggerContext = context;],,,93-93,[            this.servletContext.setAttribute(CONTEXT_ATTRIBUTE, this.loggerContext);],,,142-142,[        this.loggerContext = Configurator.initialize(this.name, this.getClassLoader(), uri, this.servletContext);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,getConfigURI,172-172,[        } catch (final Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/web/Log4jWebInitializerImplTest.java,,460-466,[        expectLastCall().andAnswer(new IAnswer<Void>() {,             @Override,             public Void answer() {,                 final LoggerContext context = ContextAnchor.THREAD_CONTEXT.get();,                 assertNotNull("The context should not be null.", context);,                 assertSame("The context is not correct.", loggerContext, context);,                 return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/slf4j/EventDataConverter.java,convertEvent,46-46,[        } catch (final Exception ex) {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/slf4j/OptionalTest.java,setupClass,54-54,[        ctx.getConfiguration();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/slf4j/SLF4JLogger.java,logMessage,176-177,[                    logger.error(fqcn, getMarker(marker), message.getFormattedMessage(), message.getParameters(), t);,                     break;],,logMessage,179-179,[                    logger.error(fqcn, getMarker(marker), message.getFormattedMessage(), message.getParameters(), t);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/slf4j/SerializeTest.java,setupClass,52-52,[        ctx.getConfiguration();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/slf4j/SerializeTest.java,,63-63,[    XLogger xlogger = XLoggerFactory.getXLogger("LoggerTest");],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/slf4j/impl/StaticLoggerBinder.java,,34-34,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/slf4j/impl/StaticLoggerBinder.java,,34-34,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
