MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/log4j/QpidCompositeRollingAppender.java,compress,629-629,[            synchronized (_compress)],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/log4j/QpidCompositeRollingAppender.java,countFileIndex,940-940,[                for (File file : new File(fileName).getParentFile().listFiles())],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/QpidCompositeRollingAppender.java,computeCheckPeriod,293-293,[                if ((r0 != null) && (r1 != null) && !r0.equals(r1))],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/QpidCompositeRollingAppender.java,computeCheckPeriod,293-293,[                if ((r0 != null) && (r1 != null) && !r0.equals(r1))],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/QpidCompositeRollingAppender.java,countFileIndex,922-922,[        if (new File(testFileName) == null],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/log4j/QpidCompositeRollingAppender.java,deleteFile,682-682,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/log4j/QpidCompositeRollingAppender.java,doCompress,1003-1003,[            target.delete();],,doCompress,1037-1037,[            from.delete();],,doCompress,1043-1043,[                target.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/log4j/QpidCompositeRollingAppender.java,rollFile,611-611,[            file.renameTo(target);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/log4j/QpidCompositeRollingAppender.java,setbackupFilesToPath,469-469,[            td.mkdirs();],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/log4j/QpidCompositeRollingAppender.java,run,1194-1194,[                synchronized (_compress)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/AMQException.java,cloneForCurrentThread,128-128,[        catch (Exception creationException)],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/protocol/AMQConstant.java,,43-225,[    private static Map<Integer, AMQConstant> _codeMap = new HashMap<Integer, AMQConstant>();, ,     /** Indicates that the method completed successfully. */,     public static final AMQConstant REPLY_SUCCESS = new AMQConstant(200, "reply success", true);, ,     public static final AMQConstant FRAME_END = new AMQConstant(206, "frame end", true);, ,     /**,      * The client asked for a specific message that is no longer available. The message was delivered to another,      * client, or was purged from the queue for some other reason.,      */,     public static final AMQConstant NOT_DELIVERED = new AMQConstant(310, "not delivered", true);, ,     /**,      * The client attempted to transfer content larger than the server could accept at the present time.  The client,      * may retry at a later time.,      */,     public static final AMQConstant MESSAGE_TOO_LARGE = new AMQConstant(311, "message too large", true);, ,     /**,      * When the exchange cannot route the result of a .Publish, most likely due to an invalid routing key. Only when,      * the mandatory flag is set.,      */,     public static final AMQConstant NO_ROUTE = new AMQConstant(312, "no route", true);, ,     /**,      * When the exchange cannot deliver to a consumer when the immediate flag is set. As a result of pending data on,      * the queue or the absence of any consumers of the queue.,      */,     public static final AMQConstant NO_CONSUMERS = new AMQConstant(313, "no consumers", true);, ,     /**,      * An operator intervened to close the connection for some reason. The client may retry at some later date.,      */,     public static final AMQConstant CONNECTION_FORCED = new AMQConstant(320, "connection forced", true);, ,     /** The client tried to work with an unknown virtual host or cluster. */,     public static final AMQConstant INVALID_PATH = new AMQConstant(402, "invalid path", true);, ,     /** The client attempted to work with a server entity to which it has no access due to security settings. */,     public static final AMQConstant ACCESS_REFUSED = new AMQConstant(403, "access refused", true);, ,     /** The client attempted to work with a server entity that does not exist. */,     public static final AMQConstant NOT_FOUND = new AMQConstant(404, "not found", true);, ,     /**,      * The client attempted to work with a server entity to which it has no access because another client is,      * working with it.,      */,     public static final AMQConstant ALREADY_EXISTS = new AMQConstant(405, "Already exists", true);, ,     /** The client requested a method that was not allowed because some precondition failed. */,     public static final AMQConstant IN_USE = new AMQConstant(406, "In use", true);, ,     public static final AMQConstant INVALID_ROUTING_KEY = new AMQConstant(407, "routing key invalid", true);, ,     public static final AMQConstant REQUEST_TIMEOUT = new AMQConstant(408, "Request Timeout", true);, ,     public static final AMQConstant ARGUMENT_INVALID = new AMQConstant(409, "argument invalid", true);, ,     /**,      * The client sent a malformed frame that the server could not decode. This strongly implies a programming error,      * in the client.,      */,     public static final AMQConstant FRAME_ERROR = new AMQConstant(501, "frame error", true);, ,     /**,      * The client sent a frame that contained illegal values for one or more fields. This strongly implies a,      * programming error in the client.,      */,     public static final AMQConstant SYNTAX_ERROR = new AMQConstant(502, "syntax error", true);, ,     /**,      * The client sent an invalid sequence of frames, attempting to perform an operation that was considered invalid,      * by the server. This usually implies a programming error in the client.,      */,     public static final AMQConstant COMMAND_INVALID = new AMQConstant(503, "command invalid", true);, ,     /**,      * The client attempted to work with a channel that had not been correctly opened. This most likely indicates a,      * fault in the client layer.,      */,     public static final AMQConstant CHANNEL_ERROR = new AMQConstant(504, "channel error", true);, ,     /**,      * The server could not complete the method because it lacked sufficient resources. This may be due to the client,      * creating too many of some type of entity.,      */,     public static final AMQConstant RESOURCE_ERROR = new AMQConstant(506, "resource error", true);, ,     /**,      * The client tried to work with some entity in a manner that is prohibited by the server, due to security settings,      * or by some other criteria.,      */,     public static final AMQConstant NOT_ALLOWED = new AMQConstant(530, "not allowed", true);, ,     /** The client tried to use functionality that is not implemented in the server. */,     public static final AMQConstant NOT_IMPLEMENTED = new AMQConstant(540, "not implemented", true);, ,     /**,      * The server could not complete the method because of an internal error. The server may require intervention by,      * an operator in order to resume normal operations.,      */,     public static final AMQConstant INTERNAL_ERROR = new AMQConstant(541, "internal error", true);, ,     public static final AMQConstant FRAME_MIN_SIZE = new AMQConstant(4096, "frame min size", true);, ,     public static final AMQConstant INVALID_ARGUMENT = new AMQConstant(542, "invalid argument", true);,     /**,      * The client imp does not support the protocol version,      */,     public static final AMQConstant UNSUPPORTED_CLIENT_PROTOCOL_ERROR = new AMQConstant(543, "client unsupported protocol", true);, ,     /** The AMQP status code. */,     private int _code;, ,     /** A short description of the status code. */,     private AMQShortString _name;, ,     /**,      * Creates a new AMQP status code.,      *,      * @param code The code.,      * @param name A short description of the code.,      * @param map  <tt>true</tt> to register the code as a known code, <tt>false</tt> otherwise.,      */,     private AMQConstant(int code, String name, boolean map),     {,         _code = code;,         _name = new AMQShortString(name);,         if (map),         {,             _codeMap.put(Integer.valueOf(code), this);,         },     }, ,     /**,      * Creates a constant for a status code by looking up the code in the map of known codes. If the code is not known,      * a constant is still created for it, but it is marked as unknown.,      *,      * @param code The AMQP status code.,      *,      * @return The AMQP status code encapsulated as a constant.,      */,     public static AMQConstant getConstant(int code),     {,         AMQConstant c = _codeMap.get(Integer.valueOf(code));,         if (c == null),         {,             c = new AMQConstant(code, "unknown code", false);,         }, ,         return c;,     }, ,     /**,      * Gets the underlying AMQP status code.,      *,      * @return The AMQP status code.,      */,     public int getCode(),     {,         return _code;,     }, ,     /**,      * Gets a short description of the status code.,      *,      * @return A short description of the status code.,      */,     public AMQShortString getName(),     {,         return _name;,     }, ,     /**,      * Renders the constant as a string, mainly for debugging purposes.,      *,      * @return The status code and its description.,      */,     public String toString(),     {,         return _code + ": " + _name;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/AMQExceptionTest.java,,115-117,[        {,             super(null, msg, null);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/client/Connection.java,,197-201,[        {, ,             public String getName(),             {,                 return username;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/amqp_1_0/type/transport/Error.java,,43-116,[    {,     }, ,     public Error(final ErrorCondition condition, final String description),     {,         _condition = condition;,         _description = description;,     }, ,     public ErrorCondition getCondition(),     {,         return _condition;,     }, ,     public void setCondition(ErrorCondition condition),     {,         _condition = condition;,     }, ,     public String getDescription(),     {,         return _description;,     }, ,     public void setDescription(String description),     {,         _description = description;,     }, ,     public Map getInfo(),     {,         return _info;,     }, ,     public void setInfo(Map info),     {,         _info = info;,     }, ,     @Override,     public String toString(),     {,         StringBuilder builder = new StringBuilder("Error{");,         final int origLength = builder.length();, ,         if(_condition != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("condition=").append(_condition);,         }, ,         if(_description != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("description=").append(_description);,         }, ,         if(_info != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("info=").append(_info);,         }, ,         builder.append('}');,         return builder.toString();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/amqp_1_0/type/transport/Error.java,,43-116,[    {,     }, ,     public Error(final ErrorCondition condition, final String description),     {,         _condition = condition;,         _description = description;,     }, ,     public ErrorCondition getCondition(),     {,         return _condition;,     }, ,     public void setCondition(ErrorCondition condition),     {,         _condition = condition;,     }, ,     public String getDescription(),     {,         return _description;,     }, ,     public void setDescription(String description),     {,         _description = description;,     }, ,     public Map getInfo(),     {,         return _info;,     }, ,     public void setInfo(Map info),     {,         _info = info;,     }, ,     @Override,     public String toString(),     {,         StringBuilder builder = new StringBuilder("Error{");,         final int origLength = builder.length();, ,         if(_condition != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("condition=").append(_condition);,         }, ,         if(_description != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("description=").append(_description);,         }, ,         if(_info != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("info=").append(_info);,         }, ,         builder.append('}');,         return builder.toString();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/amqp_1_0/client/Receiver.java,receive,302-302,[                if(!Boolean.TRUE.equals(xfr.getAborted()))],,receive,293-293,[                        if(xfr== null)],,receive,296-296,[                            System.out.println("eeek");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/amqp_1_0/client/Receiver.java,receiveFromPrefetch,381-381,[                _prefetchQueue.poll();],,
STYLE,UC_USELESS_CONDITION,org/apache/qpid/amqp_1_0/client/Receiver.java,receiveFromPrefetch,360-360,[                    else if(wait<0L)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/client/Sender.java,send,289-289,[            message.setDeliveryTag(new Binary(String.valueOf(_id++).getBytes()));],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/client/Sender.java,handle,458-458,[                action.onOutcome(deliveryTag, (outcome == null && settled) ? _defaultOutcome : outcome);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/client/Sender.java,send,271-271,[        if(sections != null && !sections.isEmpty())],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/client/Sender.java,,533-545,[        {,             super(message, cause);,         }, ,         public SenderClosingException(Throwable e),         {,             super(e);,         }, ,         public SenderClosingException(final String message),         {,             super(message);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/client/Sender.java,,519-527,[        {,             super(e);,         }, ,         public SenderCreationException(String e),         {,             super(e);, ,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/client/Session.java,,90-95,[        {,             @Override,             protected void configureSource(final Source source),             {,                 configurator.configureSource(source);,             }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/client/TransactionController.java,,132-132,[            throw new LinkDetachedException(_error);],,,187-187,[                throw new LinkDetachedException(_error);],,,140-140,[            _error = detach.getError();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/client/TransactionController.java,,130-130,[        if(!_received && _endpoint.isDetached())],,,190-190,[            _received = false;],,,206-206,[            _received = true;],,,102-102,[            _received = false;],,,118-118,[            while(!_received && !_endpoint.isDetached())],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/client/websocket/WebSocketProvider.java,,279-334,[        {,             _connection = connection;,             _frameSource = src;,             _exceptionHandler = exceptionHandler;,             _frameWriter = new FrameWriter(conn.getDescribedTypeRegistry());,             _buffer = new byte[conn.getMaxFrameSize()];,             _factory = factory;,         }, ,         @Override,         public void run(),         {, ,             final FrameWriter frameWriter = _frameWriter;,             final ByteBuffer buffer = ByteBuffer.wrap(_buffer);,             try,             {, ,                 while(_connection.isOpen() && !_frameSource.closed()),                 {,                     AMQFrame frame = _frameSource.getNextFrame(true);,                     if(frame instanceof HeaderFrame),                     {,                         _connection.sendMessage(frame.getPayload().array(),,                                                 frame.getPayload().arrayOffset(),,                                                 frame.getPayload().remaining());,                     },                     else if(frame != null),                     {,                         frameWriter.setValue(frame);,                         buffer.clear();,                         int length = frameWriter.writeToBuffer(buffer);,                         _connection.sendMessage(_buffer,0,length);,                     },                 },                 if(_frameSource.closed() && _connection.isOpen()),                 {,                     _connection.close();,                 },             },             catch (Exception e),             {,                 e.printStackTrace();,             },             finally,             {,                 try,                 {,                     removeClient(_factory);,                 },                 catch (Exception e),                 {,                     e.printStackTrace();,                 },             },         }],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/AbstractDescribedTypeWriter.java,writeToBuffer,68-76,[                        _delegate = createDescriptorWriter();,                     },                     else,                     {,                         break;,                     }, ,                 case DESCRIPTOR:,                     if(buffer.hasRemaining())],,writeToBuffer,82-90,[                            _delegate = createDescribedWriter();,                         },                         else,                         {,                             break;,                         },                     },                 case DESCRIBED:,                     if(buffer.hasRemaining())],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/AbstractDescribedTypeWriter.java,writeToBuffer,61-96,[            switch(state),             {,                 case FORMAT_CODE:,                     if(buffer.hasRemaining()),                     {,                         buffer.put(DESCRIBED_TYPE);,                         state = State.DESCRIPTOR;,                         _delegate = createDescriptorWriter();,                     },                     else,                     {,                         break;,                     }, ,                 case DESCRIPTOR:,                     if(buffer.hasRemaining()),                     {,                         _delegate.writeToBuffer(buffer);,                         if(_delegate.isComplete()),                         {,                             state = State.DESCRIBED;,                             _delegate = createDescribedWriter();,                         },                         else,                         {,                             break;,                         },                     },                 case DESCRIBED:,                     if(buffer.hasRemaining()),                     {,                         _delegate.writeToBuffer(buffer);,                         if(_delegate.isComplete()),                         {,                             state = State.DONE;,                             _delegate = null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/amqp_1_0/codec/ArrayTypeConstructor.java,construct,61-61,[            return null;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/codec/ArrayWriter.java,,49-49,[    private static Factory<Object[]> FACTORY = new Factory<Object[]>()],,
STYLE,NS_NON_SHORT_CIRCUIT,org/apache/qpid/amqp_1_0/codec/BooleanWriter.java,writeToBuffer,33-33,[        if(!_complete & buffer.hasRemaining())],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/ByteWriter.java,writeToBuffer,39-46,[                    buffer.put((byte)0x51);,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining())],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/ByteWriter.java,writeToBuffer,34-53,[        switch(_written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put((byte)0x51);,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(_value);,                     _written = 2;,                 },                 else,                 {,                     _written = 1;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/amqp_1_0/codec/CompoundWriter.java,writeFirstPass,313-313,[            length += writer.writeToBuffer(buffer);],,writeFirstPass,308-308,[            if(writer == null)],,writeFirstPass,311-311,[                System.out.println("no writer for " + val);],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/CompoundWriter.java,writeToBuffer,89-97,[                        state = State.SIZE_0;,                     },                     else,                     {,                         break;,                     }, ,                 case SIZE_0:,                     if(size == 4)],,writeToBuffer,110-120,[                            state = State.COUNT_0;,                         },                         else,                         {,                             break;,                         }, ,                     },                 case SIZE_1:,                 case SIZE_2:,                     if(state != State.COUNT_0 && buffer.remaining() >= 2)],,writeToBuffer,123-130,[                        state = (state == State.SIZE_0),                                  ? State.SIZE_2,                                  : (state == State.SIZE_1),                                     ? State.SIZE_3,                                     : State.COUNT_0;,                     },                 case SIZE_3:,                     if(state != State.COUNT_0 && buffer.hasRemaining())],,writeToBuffer,133-142,[                        state = (state == State.SIZE_0),                                  ? State.SIZE_1,                                  : (state == State.SIZE_1),                                     ? State.SIZE_2,                                     : (state == State.SIZE_2),                                       ? State.SIZE_3,                                       : State.COUNT_0;,                     },                 case COUNT_0:,                     if(size == 4)],,writeToBuffer,155-166,[                            state = State.DELEGATING;,                         },                         else,                         {,                             break;,                         }, ,                     }, ,                 case COUNT_1:,                 case COUNT_2:,                     if(state != State.DELEGATING && buffer.remaining() >= 2)],,writeToBuffer,169-176,[                        state = state == State.COUNT_0,                                  ? State.COUNT_2,                                  : state == State.COUNT_1,                                     ? State.COUNT_3,                                     : State.DELEGATING;,                     },                 case COUNT_3:,                     if(state != State.DELEGATING && buffer.hasRemaining())],,writeToBuffer,179-188,[                        state = state == State.COUNT_0,                                  ? State.COUNT_1,                                  : state == State.COUNT_1,                                     ? State.COUNT_2,                                     : state == State.COUNT_2,                                        ? State.COUNT_3,                                        : State.DELEGATING;,                     },                 case DELEGATING:,                     while(state == State.DELEGATING && buffer.hasRemaining())],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/codec/DefaultDescribedTypeConstructor.java,main,48-48,[        LineNumberReader reader = new LineNumberReader(new InputStreamReader(System.in));],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FixedEightWriter.java,writeToBuffer,42-49,[                    written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=8)],,writeToBuffer,63-67,[                    written+=4;,                 },             case 6:,             case 7:,                 if(remaining >= 2 && written <= 7)],,writeToBuffer,71-74,[                    written += 2;,                 },             case 8:,                 if(remaining >=1 && written != 9)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FixedEightWriter.java,writeToBuffer,35-77,[        switch(written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(getFormatCode());,                     remaining--;,                     written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=8),                 {,                     buffer.putLong(_value);,                     written = 9;,                     break;,                 },             case 2:,             case 3:,             case 4:,             case 5:,                 if(remaining >= 4),                 {,                     buffer.putInt((int)((_value >> ((5-written)<<3)) & 0xFFFFFFFF ));,                     remaining-=4;,                     written+=4;,                 },             case 6:,             case 7:,                 if(remaining >= 2 && written <= 7),                 {,                     buffer.putShort((short)((_value >> ((7-written)<<3)) & 0xFFFF ));,                     remaining -= 2;,                     written += 2;,                 },             case 8:,                 if(remaining >=1 && written != 9),                 {,                     buffer.put((byte)((_value >> ((8-written)<<3)) & 0xFF ));,                     written++;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FixedFourWriter.java,writeToBuffer,41-48,[                    written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=4)],,writeToBuffer,57-64,[                    written = 2;,                 },                 else,                 {,                     break;,                 },             case 2:,                 if(remaining-- != 0)],,writeToBuffer,67-74,[                    written = 3;,                 },                 else,                 {,                     break;,                 },             case 3:,                 if(remaining-- != 0)],,writeToBuffer,77-84,[                    written = 4;,                 },                 else,                 {,                     break;,                 },             case 4:,                 if(remaining-- != 0)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FixedFourWriter.java,writeToBuffer,35-87,[        switch(written),         {,             case 0:,                 if(remaining-- != 0),                 {,                     buffer.put(getFormatCode());,                     written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=4),                 {,                     buffer.putInt(_value);,                     written = 5;,                     break;,                 },                 else if(remaining-- != 0),                 {,                     buffer.put((byte)((_value >> 24)&0xFF));,                     written = 2;,                 },                 else,                 {,                     break;,                 },             case 2:,                 if(remaining-- != 0),                 {,                     buffer.put((byte)((_value >> 16)&0xFF));,                     written = 3;,                 },                 else,                 {,                     break;,                 },             case 3:,                 if(remaining-- != 0),                 {,                     buffer.put((byte)((_value >> 8)&0xFF));,                     written = 4;,                 },                 else,                 {,                     break;,                 },             case 4:,                 if(remaining-- != 0),                 {,                     buffer.put((byte)(_value&0xFF));,                     written = 5;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FixedOneWriter.java,writeToBuffer,38-45,[                    buffer.put(getFormatCode());,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining())],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FixedOneWriter.java,writeToBuffer,33-52,[        switch(_written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(getFormatCode());,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(_value);,                     _written = 2;,                 },                 else,                 {,                     _written = 1;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FixedSixteenWriter.java,writeToBuffer,43-50,[                    written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=8)],,writeToBuffer,64-68,[                    written+=4;,                 },             case 6:,             case 7:,                 if(remaining >= 2 && written <= 7)],,writeToBuffer,72-75,[                    written += 2;,                 },             case 8:,                 if(remaining >=1 && written != 9)],,writeToBuffer,102-106,[                        written+=4;,                     },                 case 14:,                 case 15:,                     if(remaining >= 2 && written <= 15)],,writeToBuffer,110-113,[                        written += 2;,                     },                 case 16:,                     if(remaining >=1 && written != 17)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FixedSixteenWriter.java,writeToBuffer,36-78,[        switch(written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(getFormatCode());,                     remaining--;,                     written = 1;,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(remaining>=8),                 {,                     buffer.putLong(_msb);,                     written = 9;,                     break;,                 },             case 2:,             case 3:,             case 4:,             case 5:,                 if(remaining >= 4),                 {,                     buffer.putInt((int)((_msb >> ((5-written)<<3)) & 0xFFFFFFFF ));,                     remaining-=4;,                     written+=4;,                 },             case 6:,             case 7:,                 if(remaining >= 2 && written <= 7),                 {,                     buffer.putShort((short)((_msb >> ((7-written)<<3)) & 0xFFFF ));,                     remaining -= 2;,                     written += 2;,                 },             case 8:,                 if(remaining >=1 && written != 9),                 {,                     buffer.put((byte)((_msb >> ((8-written)<<3)) & 0xFF ));,                     written++;],,writeToBuffer,85-116,[            switch(written),             {,                 case 9:,                     if(remaining>=8),                     {,                         buffer.putLong(_lsb);,                         written = 17;,                         break;,                     },                 case 10:,                 case 11:,                 case 12:,                 case 13:,                     if(remaining >= 4),                     {,                         buffer.putInt((int)((_lsb >> ((13-written)<<3)) & 0xFFFFFFFF ));,                         remaining-=4;,                         written+=4;,                     },                 case 14:,                 case 15:,                     if(remaining >= 2 && written <= 15),                     {,                         buffer.putShort((short)((_lsb >> ((15-written)<<3)) & 0xFFFF ));,                         remaining -= 2;,                         written += 2;,                     },                 case 16:,                     if(remaining >=1 && written != 17),                     {,                         buffer.put((byte)((_msb >> ((16-written)<<3)) & 0xFF ));,                         written++;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FixedTwoWriter.java,writeToBuffer,39-47,[                    buffer.put(getFormatCode());,                 },                 else,                 {,                     break;,                 },             case 1:, ,                 if(buffer.remaining()>1)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FixedTwoWriter.java,writeToBuffer,34-65,[        switch(_written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(getFormatCode());,                 },                 else,                 {,                     break;,                 },             case 1:, ,                 if(buffer.remaining()>1),                 {,                     buffer.putShort(_value);,                     _written = 3;,                 },                 else if(buffer.hasRemaining()),                 {,                     buffer.put((byte) (0xFF & (_value >> 8)));,                     _written = 2;,                 },                 else,                 {,                     _written = 1;,                 },                 break;,             case 2:,                 if(buffer.hasRemaining()),                 {,                     buffer.put((byte)(0xFF & _value));],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/FrameWriter.java,writeToBuffer,207-214,[                        _typeWriter = null;,                     },                     else,                     {,                         break;,                     },                 case PAYLOAD:,                     if(_payload == null || _payload.remaining() == 0)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/FrameWriter.java,writeToBuffer,76-230,[            switch(_state),             {,                 case SIZE_0:, ,                     int payloadLength = _payload == null ? 0 : _payload.remaining();, ,                     if(_typeWriter!=null),                     {,                         _typeWriter.setValue(_frame.getFrameBody());, , ,                         _size = _typeWriter.writeToBuffer(remaining > 8,                                                           ? (ByteBuffer)buffer.duplicate().position(buffer.position()+8),                                                           : ByteBuffer.wrap(EMPTY_BYTE_ARRAY)) + 8 + payloadLength;,                     },                     else,                     {,                         _size = 8 + payloadLength;,                     },                     if(remaining >= 4),                     {,                         buffer.putInt(_size);, ,                         if(remaining >= 8),                         {,                             buffer.put((byte)2); // DOFF,                             buffer.put(_frame.getFrameType()); // AMQP Frame Type,                             buffer.putShort(_frame.getChannel());, ,                             if(_size - payloadLength > remaining),                             {,                                 buffer.position(buffer.limit());,                                 _state = State.DELEGATE;,                             },                             else if(_size > remaining ),                             {,                                 buffer.position(buffer.position()+_size-8-payloadLength);,                                 if(payloadLength > 0),                                 {, ,                                     ByteBuffer dup = _payload.slice();,                                     int payloadUsed = buffer.remaining();,                                     dup.limit(payloadUsed);,                                     buffer.put(dup);,                                     _payload.position(_payload.position()+payloadUsed);,                                 },                                 _state = State.PAYLOAD;,                             },                             else,                             {, ,                                 buffer.position(buffer.position()+_size-8-payloadLength);,                                 if(payloadLength > 0),                                 {,                                     buffer.put(_payload);,                                 },                                 _state = State.DONE;,                             }, ,                         },                         else,                         {,                             _state = State.DOFF;,                         },                         break;,                     },                     else,                     {,                         buffer.put((byte)((_size >> 24) & 0xFF));,                         if(!buffer.hasRemaining()),                         {,                             _state = State.SIZE_1;,                             break;,                         },                     }, ,                 case SIZE_1:,                     buffer.put((byte)((_size >> 16) & 0xFF));,                     if(!buffer.hasRemaining()),                     {,                         _state = State.SIZE_2;,                         break;,                     },                 case SIZE_2:,                     buffer.put((byte)((_size >> 8) & 0xFF));,                     if(!buffer.hasRemaining()),                     {,                         _state = State.SIZE_3;,                         break;,                     },                 case SIZE_3:,                     buffer.put((byte)(_size & 0xFF));,                     if(!buffer.hasRemaining()),                     {,                         _state = State.DOFF;,                         break;,                     },                 case DOFF:,                     buffer.put((byte)2); // Always 2 (8 bytes),                     if(!buffer.hasRemaining()),                     {,                         _state = State.TYPE;,                         break;,                     },                 case TYPE:,                     buffer.put((byte)0);,                     if(!buffer.hasRemaining()),                     {,                         _state = State.CHANNEL_0;,                         break;,                     },                 case CHANNEL_0:,                     buffer.put((byte)((_frame.getChannel() >> 8) & 0xFF));,                     if(!buffer.hasRemaining()),                     {,                         _state = State.CHANNEL_1;,                         break;,                     },                 case CHANNEL_1:,                     buffer.put((byte)(_frame.getChannel() & 0xFF));,                     if(!buffer.hasRemaining()),                     {,                         _state = State.DELEGATE;,                         break;,                     },                 case DELEGATE:,                     _typeWriter.writeToBuffer(buffer);,                     if(_typeWriter.isComplete()),                     {,                         _state = State.PAYLOAD;,                         _frame = null;,                         _typeWriter = null;,                     },                     else,                     {,                         break;,                     },                 case PAYLOAD:,                     if(_payload == null || _payload.remaining() == 0),                     {,                         _state = State.DONE;,                         _frame = null;,                         _typeWriter = null;,                         _payload = null;, ,                     },                     else if(buffer.hasRemaining()),                     {,                         buffer.put(_payload);,                         if(_payload.remaining() == 0),                         {,                             _state = State.DONE;,                             _frame = null;,                             _typeWriter = null;,                             _payload = null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/IntegerWriter.java,,34-45,[    {, ,         @Override,         byte getFormatCode(),         {,             return EIGHT_BYTE_FORMAT_CODE;,         }, ,         @Override,         int convertValueToInt(Integer value),         {,             return value.intValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/IntegerWriter.java,,50-59,[    {, ,         @Override protected byte getFormatCode(),         {,             return ONE_BYTE_FORMAT_CODE;,         }, ,         @Override protected byte convertToByte(final Integer value),         {,             return value.byteValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/LongWriter.java,,36-47,[    {, ,         @Override,         byte getFormatCode(),         {,             return EIGHT_BYTE_FORMAT_CODE;,         }, ,         @Override,         long convertValueToLong(Long value),         {,             return value;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/LongWriter.java,,53-62,[    {, ,         @Override protected byte getFormatCode(),         {,             return ONE_BYTE_FORMAT_CODE;,         }, ,         @Override protected byte convertToByte(final Long value),         {,             return value.byteValue();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/amqp_1_0/codec/StringWriter.java,,56-68,[        {,             _cacheSize = cacheSize;,         }, ,         @Override,         protected boolean removeEldestEntry(Map.Entry<K, V> eldest),         {,             return size() > _cacheSize;,         }, ,         public boolean isFull(),         {,             return size() == _cacheSize;],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/qpid/amqp_1_0/codec/SymbolTypeConstructor.java,construct,82-82,[            SYMBOL_MAP.putIfAbsent(binaryStr, symbolVal);],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/UnsignedByteWriter.java,writeToBuffer,41-48,[                    buffer.put((byte)0x50);,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining())],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/UnsignedByteWriter.java,writeToBuffer,36-55,[        switch(_written),         {,             case 0:,                 if(buffer.hasRemaining()),                 {,                     buffer.put((byte)0x50);,                 },                 else,                 {,                     break;,                 },             case 1:,                 if(buffer.hasRemaining()),                 {,                     buffer.put(_value);,                     _written = 2;,                 },                 else,                 {,                     _written = 1;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedIntegerWriter.java,,37-48,[    {, ,         @Override,         byte getFormatCode(),         {,             return EIGHT_BYTE_FORMAT_CODE;,         }, ,         @Override,         int convertValueToInt(UnsignedInteger value),         {,             return value.intValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedIntegerWriter.java,,53-62,[    {, ,         @Override protected byte getFormatCode(),         {,             return ONE_BYTE_FORMAT_CODE;,         }, ,         @Override protected byte convertToByte(final UnsignedInteger value),         {,             return value.byteValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedIntegerWriter.java,,67-95,[        {,             private boolean _complete;, , ,             public int writeToBuffer(ByteBuffer buffer),             {, ,                 if(!_complete && buffer.hasRemaining()),                 {,                     buffer.put(ZERO_BYTE_FORMAT_CODE);,                     _complete = true;,                 }, ,                 return 1;,             }, ,             public void setValue(UnsignedInteger uint),             {,                 _complete = false;,             }, ,             public boolean isCacheable(),             {,                 return true;,             }, ,             public boolean isComplete(),             {,                 return _complete;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedLongWriter.java,,39-50,[    {, ,         @Override,         byte getFormatCode(),         {,             return EIGHT_BYTE_FORMAT_CODE;,         }, ,         @Override,         long convertValueToLong(UnsignedLong value),         {,             return value.longValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedLongWriter.java,,56-65,[    {, ,         @Override protected byte getFormatCode(),         {,             return ONE_BYTE_FORMAT_CODE;,         }, ,         @Override protected byte convertToByte(final UnsignedLong value),         {,             return value.byteValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/codec/UnsignedLongWriter.java,,70-98,[    {,         private boolean _complete;, , ,         public int writeToBuffer(ByteBuffer buffer),         {, ,             if(!_complete && buffer.hasRemaining()),             {,                 buffer.put(ZERO_BYTE_FORMAT_CODE);,                 _complete = true;,             }, ,             return 1;,         }, ,         public void setValue(UnsignedLong ulong),         {,             _complete = false;,         }, ,         public boolean isCacheable(),         {,             return true;,         }, ,         public boolean isComplete(),         {,             return _complete;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/codec/VariableWidthWriter.java,writeToBuffer,44-51,[                        buffer.put(getSingleOctetEncodingCode());,                     },                     else,                     {,                         break;,                     },                 case 1:,                     if(buffer.hasRemaining())],,writeToBuffer,93-100,[                        written = 1;,                     },                     else,                     {,                         break;,                     },                 case 1:,                     if(remaining >= 4)],,writeToBuffer,104-108,[                        written+=4;,                     },                 case 2:,                 case 3:,                     if(remaining >= 2 && written <= 3)],,writeToBuffer,112-115,[                        written += 2;,                     },                 case 4:,                     if(remaining >=1 && written <=4)],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/codec/VariableWidthWriter.java,writeToBuffer,85-118,[            switch(written),             {, ,                 case 0:,                     if(buffer.hasRemaining()),                     {,                         buffer.put(getFourOctetEncodingCode());,                         remaining--;,                         written = 1;,                     },                     else,                     {,                         break;,                     },                 case 1:,                     if(remaining >= 4),                     {,                         buffer.putInt(length);,                         remaining-=4;,                         written+=4;,                     },                 case 2:,                 case 3:,                     if(remaining >= 2 && written <= 3),                     {,                         buffer.putShort((short)((length >> ((3-written)<<3)) & 0xFFFF ));,                         remaining -= 2;,                         written += 2;,                     },                 case 4:,                     if(remaining >=1 && written <=4),                     {,                         buffer.put((byte)((length>> ((4-written)<<3)) & 0xFF ));,                         written++;],,
BAD_PRACTICE,CNT_ROUGH_CONSTANT_VALUE,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,main,645-645,[        Double myDouble = Double.valueOf(3.14159265359);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,getNextFrame,219-219,[                            if(frame == null && time > _nextHeartbeat)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,getNextFrame,219-219,[                            if(frame == null && time > _nextHeartbeat)],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,close,422-422,[                _sources.poll();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,getBytes,400-400,[                _sources.poll();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,close,476-476,[                _sources.poll();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/amqp_1_0/framing/ConnectionHandler.java,getNextFrame,450-450,[                _sources.poll();],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/framing/FrameHandler.java,parse,119-123,[                    state = State.PRE_PARSE;, ,                 case PRE_PARSE:, ,                     if(size < 8)],,parse,163-169,[                            state = State.PARSING;,                         },                     }, ,                 case PARSING:, ,                     int dataOffset = (in.get() << 2) & 0x3FF;],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/amqp_1_0/framing/FrameHandler.java,toHex,294-294,[                formatter.format("\n");],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/framing/SASLFrameHandler.java,parse,116-120,[                    state = State.PRE_PARSE;, ,                 case PRE_PARSE:, ,                     if(size < 8)],,parse,160-166,[                            state = State.PARSING;,                         },                     }, ,                 case PARSING:, ,                     int dataOffset = (in.get() << 2) & 0x3FF;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/framing/SASLFrameHandler.java,parse,82-254,[            switch(state),             {,                 case SIZE_0:,                     if(remaining >= 4),                     {,                         size = in.getInt();,                         state = State.PRE_PARSE;,                         break;,                     },                     else,                     {,                         size = (in.get() << 24) & 0xFF000000;,                         if(!in.hasRemaining()),                         {,                             state = State.SIZE_1;,                             break;,                         },                     },                 case SIZE_1:,                     size |= (in.get() << 16) & 0xFF0000;,                     if(!in.hasRemaining()),                     {,                         state = State.SIZE_2;,                         break;,                     },                 case SIZE_2:,                     size |= (in.get() << 8) & 0xFF00;,                     if(!in.hasRemaining()),                     {,                         state = State.SIZE_3;,                         break;,                     },                 case SIZE_3:,                     size |= in.get() & 0xFF;,                     state = State.PRE_PARSE;, ,                 case PRE_PARSE:, ,                     if(size < 8),                     {,                         frameParsingError = createFramingError("specified frame size %d smaller than minimum frame header size %d", _size, 8);,                         state = State.ERROR;,                         break;,                     }, ,                     else if(size > _connection.getMaxFrameSize()),                     {,                         frameParsingError = createFramingError("specified frame size %d larger than maximum frame header size %d", size, _connection.getMaxFrameSize());,                         state = State.ERROR;,                         break;,                     }, ,                     if(in.remaining() < size-4),                     {,                         _buffer = ByteBuffer.allocate(size-4);,                         _buffer.put(in);,                         state = State.BUFFERING;,                         break;,                     },                 case BUFFERING:,                     if(_buffer != null),                     {,                         if(in.remaining() < _buffer.remaining()),                         {,                             _buffer.put(in);,                             break;,                         },                         else,                         {,                             ByteBuffer dup = in.duplicate();,                             dup.limit(dup.position()+_buffer.remaining());,                             int i = _buffer.remaining();,                             int d = dup.remaining();,                             in.position(in.position()+_buffer.remaining());,                             _buffer.put(dup);,                             oldIn = in;,                             _buffer.flip();,                             in = _buffer;,                             state = State.PARSING;,                         },                     }, ,                 case PARSING:, ,                     int dataOffset = (in.get() << 2) & 0x3FF;, ,                     if(dataOffset < 8),                     {,                         frameParsingError = createFramingError("specified frame data offset %d smaller than minimum frame header size %d", dataOffset, 8);,                         state = State.ERROR;,                         break;,                     },                     else if(dataOffset > size),                     {,                         frameParsingError = createFramingError("specified frame data offset %d larger than the frame size %d", dataOffset, _size);,                         state = State.ERROR;,                         break;,                     }, ,                     // type, ,                     int type = in.get() & 0xFF;,                     int channel = in.getShort() & 0xFF;, ,                     if(type != 0 && type != 1),                     {,                         frameParsingError = createFramingError("unknown frame type: %d", type);,                         state = State.ERROR;,                         break;,                     }, ,                     if(type != 1),                     {,                         System.err.println("Wrong frame type for SASL Frame");,                     }, ,                     // channel, ,                     /*if(channel > _connection.getChannelMax()),                     {,                         frameParsingError = createError(AmqpError.DECODE_ERROR,,                                                         "frame received on invalid channel %d above channel-max %d",,                                                         channel, _connection.getChannelMax());, ,                         state = State.ERROR;,                     }, */,                     // ext header,                     if(dataOffset!=8),                     {,                         in.position(in.position()+dataOffset-8);,                     }, ,                     // oldIn null iff not working on duplicated buffer,                     if(oldIn == null),                     {,                         oldIn = in;,                         in = in.duplicate();,                         final int endPos = in.position() + size - dataOffset;,                         in.limit(endPos);,                         oldIn.position(endPos);, ,                     }, , ,                     // PARSE HERE,                     try,                     {,                         Object val = _typeHandler.parse(in);, ,                         if(in.hasRemaining()),                         {,                             state = State.ERROR;,                             frameParsingError = createFramingError("Frame length %d larger than contained frame body %s.", size, val);, ,                         },                         else,                         {,                             _connection.receive((short)channel,val);,                             reset();,                             in = oldIn;,                             oldIn = null;,                             _buffer = null;,                             state = State.SIZE_0;,                             break;,                         }, , ,                     },                     catch (AmqpErrorException ex),                     {,                         state = State.ERROR;,                         frameParsingError = ex.getError();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/amqp_1_0/jms/example/Hello.java,runExample,115-115,[        catch (Exception exp)],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/amqp_1_0/jms/example/Hello.java,runExample,55-55,[        try(InputStream propertiesStream = getClass().getResourceAsStream("hello.properties"))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/jms/example/Hello.java,,76-96,[            {,                 public void onMessage(final Message message),                 {,                     try,                     {,                         if(message instanceof TextMessage),                         {,                             System.out.println(((TextMessage) message).getText());,                         },                         else,                         {,                             System.out.println("Received enexpected message type: " + message.getClass().getName());,                         }, ,                         latch.countDown();,                     },                     catch (JMSException e),                     {,                         System.out.println("Caught exception in onMessage(): " + e.getMessage());,                     },                 }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,225-225,[        _keyStoreCertAlias = keyStoreCertAlias;],,,160-160,[                    _sslContext = SSLUtil.buildSslContext(_keyStoreCertAlias,_keyStorePath,],,,167-167,[                    if(username == null && _keyStoreCertAlias != null)],,,169-169,[                        X509Certificate[] certs = SSLUtil.getClientCertificates(_keyStoreCertAlias,],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,220-220,[        _keyStorePassword = keyStorePassword;],,,161-161,[                                                          KeyStore.getDefaultType(),],,,169-169,[                        X509Certificate[] certs = SSLUtil.getClientCertificates(_keyStoreCertAlias,],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,215-215,[        _keyStorePath = keyStorePath;],,,160-160,[                    _sslContext = SSLUtil.buildSslContext(_keyStoreCertAlias,_keyStorePath,],,,169-169,[                        X509Certificate[] certs = SSLUtil.getClientCertificates(_keyStoreCertAlias,],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,196-196,[        ConnectionImpl connection = new ConnectionImpl(_protocol,_host, _port, username, password, _clientId, _remoteHost, _sslContext, _maxSessions);],,,156-156,[            if(_ssl && _sslContext == null)],,,160-160,[                    _sslContext = SSLUtil.buildSslContext(_keyStoreCertAlias,_keyStorePath,],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,235-235,[        _trustStorePassword = trustStorePassword;],,,163-163,[                                                          KeyManagerFactory.getDefaultAlgorithm(),],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,,230-230,[        _trustStorePath = trustStorePath;],,,163-163,[                                                          KeyManagerFactory.getDefaultAlgorithm(),],,
I18N,DM_CONVERT_CASE,org/apache/qpid/amqp_1_0/jms/impl/ConnectionFactoryImpl.java,<init>,268-268,[            OPTION_SETTER_MAP.put(name.toLowerCase(), this);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/amqp_1_0/jms/impl/ConnectionImpl.java,getClientID,318-319,[        checkClosed();,         return _clientId;],,getClientId,55-59,[      if (_log.isTraceEnabled()),       {,          _log.trace("getClientID()");,       },       return _clientId;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/amqp_1_0/jms/impl/ConnectionImpl.java,setClientID,324-332,[        checkNotConnected("Cannot set client-id to \"",                           + value,                           + "\"; client-id must be set before the connection is used");,         if( _clientId !=null ),         {,             throw new IllegalStateException("client-id has already been set");,         },         _clientId = value;,     }],,setClientId,64-70,[      if (_log.isTraceEnabled()),       {,          _log.trace("setClientID(" + clientID + ")");,       },       _hasBeenUpdated = true;,       this._clientId = clientID;,    }],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/jms/impl/ConnectionImpl.java,stop,387-389,[                    startedSessions = new ArrayList<SessionImpl>(_sessions);,                 case UNCONNECTED:,                     _state = State.STOPPED;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getInt,170-170,[            return Integer.valueOf((String) value).intValue();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getLong,203-203,[            return Long.valueOf((String) value).longValue();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,setBytes,389-389,[        put(name, new Binary(val));],,setBytes,381-381,[            val = null;],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getByte,99-99,[            return Byte.valueOf((String) value).byteValue();],,getByte,97-97,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getDouble,245-245,[            return Double.valueOf((String) value).doubleValue();],,getDouble,243-243,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getFloat,222-222,[            return Float.valueOf((String) value).floatValue();],,getFloat,220-220,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getInt,170-170,[            return Integer.valueOf((String) value).intValue();],,getInt,168-168,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MapMessageImpl.java,getShort,121-121,[            return Short.valueOf((String) value).shortValue();],,getShort,119-119,[        else if ((value instanceof String) || (value == null))],,
I18N,DM_CONVERT_CASE,org/apache/qpid/amqp_1_0/jms/impl/MessageFactory.java,createMessage,178-178,[                            charset = Charset.forName(contentTypeObj.getParameter("charset").toUpperCase());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/amqp_1_0/jms/impl/MessageFactory.java,parseContentType,253-253,[        final String type = contentType.substring(0, subTypeSeparator).toLowerCase().trim();],,parseContentType,254-254,[        String subTypePart = contentType.substring(subTypeSeparator +1).toLowerCase().trim();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getIntProperty,561-561,[            return Integer.valueOf((String) value).intValue();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getLongProperty,594-594,[            return Long.valueOf((String) value).longValue();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getJMSCorrelationID,200-200,[            return new String(id.getArray(), id.getArrayOffset(), id.getLength());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getJMSCorrelationIDAsBytes,170-170,[            return o == null ? null : o.toString().getBytes();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getByteProperty,459-459,[            return Byte.valueOf((String) value).byteValue();],,getByteProperty,457-457,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getDoubleProperty,636-636,[            return Double.valueOf((String) value).doubleValue();],,getDoubleProperty,634-634,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getFloatProperty,613-613,[            return Float.valueOf((String) value).floatValue();],,getFloatProperty,611-611,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getIntProperty,561-561,[            return Integer.valueOf((String) value).intValue();],,getIntProperty,559-559,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getShortProperty,482-482,[            return Short.valueOf((String) value).shortValue();],,getShortProperty,480-480,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getUnsignedByteProperty,706-706,[            return UnsignedByte.valueOf((String) value);],,getUnsignedByteProperty,704-704,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getUnsignedLongProperty,787-787,[            return UnsignedLong.valueOf((String) value);],,getUnsignedLongProperty,785-785,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,getUnsignedShortProperty,729-729,[            return UnsignedShort.valueOf((String) value);],,getUnsignedShortProperty,727-727,[        else if ((value instanceof String) || (value == null))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,,1305-1307,[        {,             super("The provided priority: " + priority + " is not valid in AMQP, valid values are from 0 to 255");,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/jms/impl/MessageImpl.java,,1294-1299,[        {,             super("Destinations not a valid AMQP Destination, class of type: '",                     + destination.getClass().getName(),                     + "', require '",                     + org.apache.qpid.amqp_1_0.jms.Destination.class.getName() + "'.");,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/jms/impl/MessageProducerImpl.java,generateMessageId,377-377,[        return _session.getConnection().useBinaryMessageId() ? new Binary(messageIdString.getBytes()) : messageIdString;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/jms/impl/MessageProducerImpl.java,,87-92,[                {,                     public void configureSource(final Source source),                     {,                         source.setDefaultOutcome(new Accepted());,                         source.setOutcomes(AcceptedConstructor.SYMBOL_CONSTRUCTOR, RejectedConstructor.SYMBOL_CONSTRUCTOR);,                     }],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readInt,200-200,[                return Integer.valueOf((String)obj);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readLong,238-238,[                return Long.valueOf((String)obj);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readByte,110-110,[                return Byte.valueOf((String)obj);],,readByte,106-106,[        else if(obj instanceof String || obj == null)],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readDouble,294-294,[                return Double.valueOf((String)obj);],,readDouble,290-290,[        else if(obj instanceof String || obj == null)],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readFloat,264-264,[                return Float.valueOf((String)obj);],,readFloat,260-260,[        else if(obj instanceof String || obj == null)],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/amqp_1_0/jms/impl/StreamMessageImpl.java,readShort,145-145,[                return Short.valueOf((String)obj);],,readShort,141-141,[        else if(obj instanceof String || obj == null)],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/amqp_1_0/jms/impl/DestinationImpl.java,equals,62-64,[        return obj != null,                && obj.getClass() == getClass(),                && _address.equals(((DestinationImpl)obj)._address);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/jms/impl/TemporaryQueueImpl.java,,105-105,[        return _deleted;],,,61-61,[            _deleted = true;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/amqp_1_0/jms/impl/DestinationImpl.java,equals,62-64,[        return obj != null,                && obj.getClass() == getClass(),                && _address.equals(((DestinationImpl)obj)._address);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,273-273,[    private static Converter ARRAY_CONVERTER = new Converter("array")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,262-262,[    private static Converter BINARY_CONVERTER = new Converter("binary")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,127-127,[    private static Converter BYTE_CONVERTER = new Converter("byte")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,205-205,[    private static Converter CHAR_CONVERTER = new Converter("char")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,246-246,[    private static Converter DESCRIBED_CONVERTER = new Converter("described")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,185-185,[    private static Converter DOUBLE_CONVERTER = new Converter("double")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,176-176,[    private static Converter FLOAT_CONVERTER = new Converter("float")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,109-109,[    private static Converter LONG_CONVERTER = new Converter("long")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,230-230,[    private static Converter MAP_CONVERTER = new Converter("map")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,118-118,[    private static Converter SHORT_CONVERTER = new Converter("short")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,195-195,[    private static Converter SYMBOL_CONVERTER = new Converter("symbol")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,220-220,[    private static Converter TIMESTAMP_CONVERTER = new Converter("timestamp")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,165-165,[    private static Converter UBYTE_CONVERTER = new Converter("ubyte")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,146-146,[    private static Converter UINT_CONVERTER = new Converter("uint")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,136-136,[    private static Converter ULONG_CONVERTER = new Converter("ulong")],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/amqp_1_0/jms/impl/util/AnnotationDecoder.java,,155-155,[    private static Converter USHORT_CONVERTER = new Converter("ushort")],,
I18N,DM_CONVERT_CASE,org/apache/qpid/amqp_1_0/jms/impl/util/JsonDecoder.java,readNumber,246-246,[        BigDecimal number = new BigDecimal(numberString.toUpperCase());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/amqp_1_0/jms/impl/util/JsonDecoder.java,readString,311-311,[                    char codePoint = (char)(Integer.parseInt((new String(point)).toUpperCase(), 16) & 0xffff);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/jms/jndi/PropertiesFileInitialContextFactory.java,createFactory,155-155,[                if (cf != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/jms/jndi/PropertiesFileInitialContextFactory.java,createDestination,173-173,[                if (dest != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/jms/jndi/PropertiesFileInitialContextFactory.java,createQueue,191-191,[                if (q != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/jms/jndi/PropertiesFileInitialContextFactory.java,createTopic,209-209,[                if (t != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/amqp_1_0/transport/AMQPTransport.java,getNextBytes,142-142,[            if(_currentOutputFrame == null)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/transport/AMQPTransport.java,,106-110,[                {,                     public void processBytes(final ByteBuffer buf),                     {,                         buf.get(incomingHeader);,                     }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1181-1181,[        _channelMax = channelMax;],,,264-264,[        return _channelMax;],,,323-323,[        for (int i = 0; i <= _channelMax; i++)],,,210-210,[            sendOpen(_channelMax, DEFAULT_MAX_FRAME);],,,520-520,[                                     + begin.getRemoteChannel() + " which is outside the valid range of 0 to "],,,286-286,[        if (channelMax < _channelMax)],,,288-288,[            _channelMax = channelMax;],,,351-351,[        _channelMax = open.getChannelMax() == null ? _channelMax],,,353-353,[                        ? open.getChannelMax().shortValue()],,,358-358,[            _receivingSessions = new SessionEndpoint[_channelMax + 1];],,,352-352,[                : open.getChannelMax().shortValue() < _channelMax],,,359-359,[            _sendingSessions = new SessionEndpoint[_channelMax + 1];],,,382-382,[                sendOpen(_channelMax, _maxFrameSize);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,860-860,[        return _connectionEventListener;],,,855-855,[        _connectionEventListener = connectionEventListener;],,,481-481,[            if(_connectionEventListener != null)],,,483-483,[                _connectionEventListener.closeReceived();],,,586-586,[                _connectionEventListener.remoteSessionCreation(endpoint);],,,377-377,[        _connectionEventListener.openReceived();],,,400-400,[        _connectionEventListener.closeReceived();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,217-217,[        _frameOutputHandler = frameOutputHandler;],,,714-714,[            _frameOutputHandler.send(AMQFrame.createAMQFrame(channel, body, payloadDup));],,,317-317,[        _frameOutputHandler.close();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,791-791,[        _logger = logger;],,,796-796,[        if (_logger.isEnabled())],,,798-798,[            _logger.received(_remoteAddress, channel, frame);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1170-1170,[        return _state == ConnectionState.CLOSED],,,1165-1165,[        return _state == ConnectionState.OPEN;],,,208-208,[        if (_state == ConnectionState.UNOPENED)],,,211-211,[            _state = ConnectionState.AWAITING_OPEN;],,,454-454,[            switch (_state)],,,459-459,[                    _state = ConnectionState.CLOSED;],,,462-462,[                    _state = ConnectionState.CLOSE_RECEIVED;],,,379-379,[        switch (_state)],,,384-384,[                _state = ConnectionState.OPEN;],,,401-401,[        switch (_state)],,,411-411,[                _state = ConnectionState.CLOSE_RECEIVED;],,,416-416,[                _state = ConnectionState.CLOSED;],,,413-413,[                _state = ConnectionState.CLOSED;],,,735-735,[        if (_requiresSASLServer && _state != ConnectionState.UNOPENED)],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1117-1117,[        return _authenticated;],,,992-992,[            _authenticated = false;],,,203-203,[            if (!_authenticated)],,,1066-1066,[                _authenticated = false;],,,1039-1039,[                    _authenticated = true;],,,1085-1085,[                _authenticated = true;],,,929-929,[                _authenticated = false;],,,901-901,[                    _authenticated = true;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1159-1159,[        return _localHostname;],,,370-370,[        _localHostname = open.getHostname();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,875-875,[        return _majorVersion;],,,740-740,[        _majorVersion = major;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,269-269,[        return _maxFrameSize;],,,367-367,[                : _desiredMaxFrameSize).intValue();],,,382-382,[                sendOpen(_channelMax, _maxFrameSize);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,865-865,[        return _minorVersion;],,,741-741,[        _minorVersion = minorVersion;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,274-274,[        return _remoteContainerId;],,,369-369,[        _remoteContainerId = open.getContainerId();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1176-1176,[        return _remoteError;],,,420-420,[        _remoteError = close.getError();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,870-870,[        return _revision;],,,742-742,[        _revision = revision;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,close,439-443,[                _state = ConnectionState.CLOSE_SENT;,             case CLOSE_SENT:,             case CLOSED:,                 // already sent our close - too late to do anything more,                 break;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,inputClosed,462-465,[                    _state = ConnectionState.CLOSE_RECEIVED;,                 case CLOSED:,                     // already sent our close - too late to do anything more,                     break;],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,receiveOpen,382-384,[                sendOpen(_channelMax, _maxFrameSize);,             case AWAITING_OPEN:,                 _state = ConnectionState.OPEN;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,receiveClose,401-416,[        switch (_state),         {,             case UNOPENED:,             case AWAITING_OPEN:,                 Error error = new Error();,                 error.setCondition(ConnectionError.CONNECTION_FORCED);,                 error.setDescription("Connection close sent before connection was opened");,                 close(error);,                 break;,             case OPEN:,                 _state = ConnectionState.CLOSE_RECEIVED;,                 sendClose(new Close());,                 _state = ConnectionState.CLOSED;,                 break;,             case CLOSE_SENT:,                 _state = ConnectionState.CLOSED;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,receiveOpen,379-384,[        switch (_state),         {,             case UNOPENED:,                 sendOpen(_channelMax, _maxFrameSize);,             case AWAITING_OPEN:,                 _state = ConnectionState.OPEN;],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,protocolHeaderReceived,735-735,[        if (_requiresSASLServer && _state != ConnectionState.UNOPENED)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,772-785,[            {,                 Logger _underlying = Logger.getLogger("FRM");, ,                 @Override,                 public boolean isEnabled(),                 {,                     return _underlying.isLoggable(Level.FINE);,                 }, ,                 @Override,                 public void received(final SocketAddress remoteAddress, final short channel, final Object frame),                 {,                     _underlying.fine("RECV[" + remoteAddress + "|" + channel + "] : " + frame);,                 }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,calculateClientProof,1515-1515,[                return finalMessageWithProof.getBytes();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/amqp_1_0/transport/ConnectionEndpoint.java,,1233-1257,[    private class AnonymousSaslClient implements AmqpSaslClient,     {, ,         @Override,         public boolean canSupportMechanism(),         {,             return true;,         }, ,         @Override,         public Symbol getMechanismName(),         {,             return Symbol.valueOf("ANONYMOUS");,         }, ,         @Override,         public boolean hasInitialResponse(),         {,             return false;,         }, ,         @Override,         public byte[] getResponse(final byte[] challenge),         {,             return new byte[0];],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/transport/LinkEndpoint.java,receiveAttach,256-280,[            switch(_state),             {,                 case ATTACH_SENT:,                 {, ,                     _state = State.ATTACHED;,                     getLock().notifyAll();, ,                     _initialUnsettledMap = attach.getUnsettled();,                     /*  TODO - don't yet handle:, ,                         attach.getUnsettled();,                         attach.getProperties();,                         attach.getDurable();,                         attach.getExpiryPolicy();,                         attach.getTimeout();,                      */, ,                     break;,                 }, ,                 case DETACHED:,                 {,                     _state = State.ATTACHED;,                     getLock().notifyAll();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/amqp_1_0/transport/LinkEndpoint.java,remoteDetached,170-177,[            switch(_state),             {,                 case DETACH_SENT:,                     _state = State.DETACHED;,                     break;,                 case ATTACHED:,                     _state = State.DETACH_RECVD;,                     _linkEventListener.remoteDetached(this, detach);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java,sendFlow,335-336,[        sendFlow();,     }],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/amqp_1_0/transport/ReceivingLinkEndpoint.java,updateDispositions,391-391,[                        deliveryId = _unsettledIds.get(tag).getDeliveryId();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,150-150,[        _closedForInput = true;],,,155-155,[        return _closedForInput;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,225-225,[        _mechanism = saslInit.getMechanism();],,,228-228,[            _saslServer = Sasl.createSaslServer(_mechanism.toString(), "AMQP", "localhost", null,  createServerCallbackHandler(_mechanism));],,,255-255,[            _saslClient = Sasl.createSaslClient(new String[] { _mechanism.toString() }, null, "AMQP", "localhost", null,],,,248-248,[                _mechanism = mechanism;],,,258-258,[            init.setMechanism(_mechanism);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,104-104,[        if(_state == State.BEGIN_SERVER)],,,116-116,[        _state = State.SENT_MECHANISMS;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,208-208,[        return _majorVersion;],,,160-160,[        _majorVersion = major;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,214-214,[        return _minorVersion;],,,161-161,[        _minorVersion = minorVersion;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/amqp_1_0/transport/SASLEndpointImpl.java,,219-219,[        return _revision;],,,162-162,[        _revision = revision;],,
STYLE,DB_DUPLICATE_BRANCHES,org/apache/qpid/amqp_1_0/transport/SendingLinkEndpoint.java,transfer,84-84,[        transferCount = _lastDeliveryTag == null ? 1 : 1;],,
BAD_PRACTICE,CN_IDIOM_NO_SUPER_CALL,org/apache/qpid/amqp_1_0/transport/SequenceNumber.java,clone,97-97,[        return new SequenceNumber(_seqNo);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java,receiveTransfer,395-395,[                if(delivery.isSettled() || Boolean.TRUE.equals(transfer.getAborted()))],,receiveTransfer,418-418,[                    else if(Boolean.TRUE.equals(transfer.getAborted()))],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/qpid/amqp_1_0/transport/SessionEndpoint.java,settle,750-750,[            if(d != null)],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/amqp_1_0/type/transport/Error.java,,43-116,[    {,     }, ,     public Error(final ErrorCondition condition, final String description),     {,         _condition = condition;,         _description = description;,     }, ,     public ErrorCondition getCondition(),     {,         return _condition;,     }, ,     public void setCondition(ErrorCondition condition),     {,         _condition = condition;,     }, ,     public String getDescription(),     {,         return _description;,     }, ,     public void setDescription(String description),     {,         _description = description;,     }, ,     public Map getInfo(),     {,         return _info;,     }, ,     public void setInfo(Map info),     {,         _info = info;,     }, ,     @Override,     public String toString(),     {,         StringBuilder builder = new StringBuilder("Error{");,         final int origLength = builder.length();, ,         if(_condition != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("condition=").append(_condition);,         }, ,         if(_description != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("description=").append(_description);,         }, ,         if(_info != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("info=").append(_info);,         }, ,         builder.append('}');,         return builder.toString();],,
CORRECTNESS,INT_BAD_COMPARISON_WITH_SIGNED_BYTE,org/apache/qpid/amqp_1_0/type/Binary.java,toString,118-118,[            if (c > 31 && c < 127 && c != '\\')],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/amqp_1_0/type/Symbol.java,compareTo,44-44,[        return _underlying.compareTo(o._underlying);],,
BAD_PRACTICE,HE_HASHCODE_USE_OBJECT_EQUALS,org/apache/qpid/amqp_1_0/type/Symbol.java,hashCode,66-66,[        return _underlying.hashCode();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/amqp_1_0/type/UnsignedByte.java,,24-131,[public final class UnsignedByte extends Number implements Comparable<UnsignedByte>, {,     private final byte _underlying;,     private static final UnsignedByte[] cachedValues = new UnsignedByte[256];, ,     static,     {,         for(int i = 0; i<256; i++),         {,             cachedValues[i] = new UnsignedByte((byte)i);,         },     }, ,     public UnsignedByte(byte underlying),     {,         _underlying = underlying;,     }, ,     @Override,     public byte byteValue(),     {,         return _underlying;,     }, ,     @Override,     public short shortValue(),     {,         return (short) intValue();,     }, ,     @Override,     public int intValue(),     {,         return ((int)_underlying) & 0xFF;,     }, ,     @Override,     public long longValue(),     {,         return ((long) _underlying) & 0xFFl;,     }, ,     @Override,     public float floatValue(),     {,         return (float) longValue();,     }, ,     @Override,     public double doubleValue(),     {,         return (double) longValue();,     }, ,     @Override,     public boolean equals(Object o),     {,         if (this == o),         {,             return true;,         },         if (o == null || getClass() != o.getClass()),         {,             return false;,         }, ,         UnsignedByte that = (UnsignedByte) o;, ,         if (_underlying != that._underlying),         {,             return false;,         }, ,         return true;,     }, ,     public int compareTo(UnsignedByte o),     {,         return Integer.signum(intValue() - o.intValue());,     }, ,     @Override,     public int hashCode(),     {,         return _underlying;,     }, ,     @Override,     public String toString(),     {,         return String.valueOf(intValue());,     }, ,     public static UnsignedByte valueOf(byte underlying),     {,         final int index = ((int) underlying) & 0xFF;,         return cachedValues[index];,     }, ,     public static UnsignedByte valueOf(final String value),             throws NumberFormatException,     {,         int intVal = Integer.parseInt(value);,         if(intVal < 0 || intVal >= (1<<8)),         {,             throw new NumberFormatException("Value \""+value+"\" lies outside the range [" + 0 + "-" + (1<<8) +").");,         },         return valueOf((byte)intVal);],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/amqp_1_0/type/UnsignedInteger.java,,24-146,[public final class UnsignedInteger extends Number implements Comparable<UnsignedInteger>, {,     private final int _underlying;,     private static final UnsignedInteger[] cachedValues = new UnsignedInteger[256];, ,     static,     {,         for(int i = 0; i < 256; i++),         {,             cachedValues[i] = new UnsignedInteger(i);,         },     }, ,     public static final UnsignedInteger ZERO = cachedValues[0];,     public static final UnsignedInteger ONE = cachedValues[1];,     public static final UnsignedInteger MAX_VALUE = new UnsignedInteger(0xffffffff);, , ,     public UnsignedInteger(int underlying),     {,         _underlying = underlying;,     }, ,     @Override,     public int intValue(),     {,         return _underlying;,     }, ,     @Override,     public long longValue(),     {,         return ((long) _underlying) & 0xFFFFFFFFl;,     }, ,     @Override,     public float floatValue(),     {,         return (float) longValue();,     }, ,     @Override,     public double doubleValue(),     {,         return (double) longValue();,     }, ,     @Override,     public boolean equals(Object o),     {,         if (this == o),         {,             return true;,         },         if (o == null || getClass() != o.getClass()),         {,             return false;,         }, ,         UnsignedInteger that = (UnsignedInteger) o;, ,         if (_underlying != that._underlying),         {,             return false;,         }, ,         return true;,     }, ,     public int compareTo(UnsignedInteger o),     {,         return Long.signum(longValue() - o.longValue());,     }, ,     @Override,     public int hashCode(),     {,         return _underlying;,     }, ,     @Override,     public String toString(),     {,         return String.valueOf(longValue());,     }, ,     public static UnsignedInteger valueOf(int underlying),     {,         if((underlying & 0xFFFFFF00) == 0),         {,             return cachedValues[underlying];,         },         else,         {,             return new UnsignedInteger(underlying);,         },     }, ,     public UnsignedInteger add(final UnsignedInteger i),     {,         int val = _underlying + i._underlying;,         return UnsignedInteger.valueOf(val);,     }, ,     public UnsignedInteger subtract(final UnsignedInteger i),     {,         int val = _underlying - i._underlying;,         return UnsignedInteger.valueOf(val);,     }, ,     public static UnsignedInteger valueOf(final String value),     {,         long longVal = Long.parseLong(value);,         return valueOf(longVal);,     }, ,     public static UnsignedInteger valueOf(final long longVal),     {,         if(longVal < 0L || longVal >= (1L<<32)),         {,             throw new NumberFormatException("Value \""+longVal+"\" lies outside the range [" + 0L + "-" + (1L<<32) +").");,         },         return valueOf((int)longVal);],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/amqp_1_0/type/UnsignedLong.java,,26-160,[public final class UnsignedLong extends Number implements Comparable<UnsignedLong>, {,     private static final BigInteger TWO_TO_THE_SIXTY_FOUR = new BigInteger( new byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 });,     private static final BigInteger LONG_MAX_VALUE = BigInteger.valueOf(Long.MAX_VALUE);, ,     private static final UnsignedLong[] cachedValues = new UnsignedLong[256];, ,     static,     {,         for(int i = 0; i<256; i++),         {,             cachedValues[i] = new UnsignedLong(i);,         },     }, ,     public static final UnsignedLong ZERO = cachedValues[0];,     public static final UnsignedLong ONE = cachedValues[1];, ,     private final long _underlying;, , , ,     public UnsignedLong(long underlying),     {,         _underlying = underlying;,     }, ,     @Override,     public int intValue(),     {,         return (int) _underlying;,     }, ,     @Override,     public long longValue(),     {,         return _underlying;,     }, ,     public BigInteger bigIntegerValue(),     {,         if(_underlying >= 0L),         {,             return BigInteger.valueOf(_underlying);,         },         else,         {,             return TWO_TO_THE_SIXTY_FOUR.add(BigInteger.valueOf(_underlying));,         },     }, ,     @Override,     public float floatValue(),     {,         return (float) longValue();,     }, ,     @Override,     public double doubleValue(),     {,         return (double) longValue();,     }, ,     @Override,     public boolean equals(Object o),     {,         if (this == o),         {,             return true;,         },         if (o == null || getClass() != o.getClass()),         {,             return false;,         }, ,         UnsignedLong that = (UnsignedLong) o;, ,         if (_underlying != that._underlying),         {,             return false;,         }, ,         return true;,     }, ,     public int compareTo(UnsignedLong o),     {,         return bigIntegerValue().compareTo(o.bigIntegerValue());,     }, ,     @Override,     public int hashCode(),     {,         return (int)(_underlying ^ (_underlying >>> 32));,     }, ,     @Override,     public String toString(),     {,         return String.valueOf(bigIntegerValue());,     }, ,     public static UnsignedLong valueOf(long underlying),     {,         if((underlying & 0xFFL) == underlying),         {,             return cachedValues[(int)underlying];,         },         else,         {,             return new UnsignedLong(underlying);,         },     }, ,     public static UnsignedLong valueOf(final String value),     {,         BigInteger bigInt = new BigInteger(value);,         if(bigInt.signum() == -1 || bigInt.bitCount()>64),         {,             throw new NumberFormatException("Value \""+value+"\" lies outside the range [" + 0L + "- 2^64).");,         },         else if(bigInt.compareTo(LONG_MAX_VALUE)>=0),         {,             return UnsignedLong.valueOf(bigInt.longValue());,         },         else,         {,             return UnsignedLong.valueOf(TWO_TO_THE_SIXTY_FOUR.subtract(bigInt).negate().longValue());,         }, ,     }, ,     public UnsignedLong add(UnsignedLong unsignedLong),     {,         return UnsignedLong.valueOf(_underlying + unsignedLong._underlying);],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/amqp_1_0/type/UnsignedShort.java,,24-129,[public final class UnsignedShort extends Number implements Comparable<UnsignedShort>, {,     private final short _underlying;,     private static final UnsignedShort[] cachedValues = new UnsignedShort[256];, ,     static,     {,         for(short i = 0; i < 256; i++),         {,             cachedValues[i] = new UnsignedShort(i);,         },     }, ,     public UnsignedShort(short underlying),     {,         _underlying = underlying;,     }, ,     public short shortValue(),     {,         return _underlying;,     }, ,     @Override,     public int intValue(),     {,         return _underlying & 0xFFFF;,     }, ,     @Override,     public long longValue(),     {,         return ((long) _underlying) & 0xFFFFl;,     }, ,     @Override,     public float floatValue(),     {,         return (float) intValue();,     }, ,     @Override,     public double doubleValue(),     {,         return (double) intValue();,     }, ,     @Override,     public boolean equals(Object o),     {,         if (this == o),         {,             return true;,         },         if (o == null || getClass() != o.getClass()),         {,             return false;,         }, ,         UnsignedShort that = (UnsignedShort) o;, ,         if (_underlying != that._underlying),         {,             return false;,         }, ,         return true;,     }, ,     public int compareTo(UnsignedShort o),     {,         return Integer.signum(intValue() - o.intValue());,     }, ,     @Override,     public int hashCode(),     {,         return _underlying;,     }, ,     @Override,     public String toString(),     {,         return String.valueOf(longValue());,     }, ,     public static UnsignedShort valueOf(short underlying),     {,         if((underlying & 0xFF00) == 0),         {,             return cachedValues[underlying];,         },         else,         {,             return new UnsignedShort(underlying);,         },     }, ,     public static UnsignedShort valueOf(final String value),     {,         int intVal = Integer.parseInt(value);,         if(intVal < 0 || intVal >= (1<<16)),         {,             throw new NumberFormatException("Value \""+value+"\" lies outside the range [" + 0 + "-" + (1<<16) +").");,         },         return valueOf((short)intVal);],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/qpid/amqp_1_0/type/messaging/Source.java,,34-277,[public class Source,   implements org.apache.qpid.amqp_1_0.type.Source,   {, , ,     private String _address;, ,     private TerminusDurability _durable;, ,     private TerminusExpiryPolicy _expiryPolicy;, ,     private UnsignedInteger _timeout;, ,     private Boolean _dynamic;, ,     private Map _dynamicNodeProperties;, ,     private DistributionMode _distributionMode;, ,     private Map _filter;, ,     private Outcome _defaultOutcome;, ,     private Symbol[] _outcomes;, ,     private Symbol[] _capabilities;, ,     public String getAddress(),     {,         return _address;,     }, ,     public void setAddress(String address),     {,         _address = address;,     }, ,     public TerminusDurability getDurable(),     {,         return _durable;,     }, ,     public void setDurable(TerminusDurability durable),     {,         _durable = durable;,     }, ,     public TerminusExpiryPolicy getExpiryPolicy(),     {,         return _expiryPolicy;,     }, ,     public void setExpiryPolicy(TerminusExpiryPolicy expiryPolicy),     {,         _expiryPolicy = expiryPolicy;,     }, ,     public UnsignedInteger getTimeout(),     {,         return _timeout;,     }, ,     public void setTimeout(UnsignedInteger timeout),     {,         _timeout = timeout;,     }, ,     public Boolean getDynamic(),     {,         return _dynamic;,     }, ,     public void setDynamic(Boolean dynamic),     {,         _dynamic = dynamic;,     }, ,     public Map getDynamicNodeProperties(),     {,         return _dynamicNodeProperties;,     }, ,     public void setDynamicNodeProperties(Map dynamicNodeProperties),     {,         _dynamicNodeProperties = dynamicNodeProperties;,     }, ,     public DistributionMode getDistributionMode(),     {,         return _distributionMode;,     }, ,     public void setDistributionMode(DistributionMode distributionMode),     {,         _distributionMode = distributionMode;,     }, ,     public Map getFilter(),     {,         return _filter;,     }, ,     public void setFilter(Map filter),     {,         _filter = filter;,     }, ,     public Outcome getDefaultOutcome(),     {,         return _defaultOutcome;,     }, ,     public void setDefaultOutcome(Outcome defaultOutcome),     {,         _defaultOutcome = defaultOutcome;,     }, ,     public Symbol[] getOutcomes(),     {,         return _outcomes;,     }, ,     public void setOutcomes(Symbol... outcomes),     {,         _outcomes = outcomes;,     }, ,     public Symbol[] getCapabilities(),     {,         return _capabilities;,     }, ,     public void setCapabilities(Symbol[] capabilities),     {,         _capabilities = capabilities;,     }, ,     @Override,     public String toString(),     {,         StringBuilder builder = new StringBuilder("Source{");,         final int origLength = builder.length();, ,         if(_address != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("address=").append(_address);,         }, ,         if(_durable != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("durable=").append(_durable);,         }, ,         if(_expiryPolicy != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("expiryPolicy=").append(_expiryPolicy);,         }, ,         if(_timeout != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("timeout=").append(_timeout);,         }, ,         if(_dynamic != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("dynamic=").append(_dynamic);,         }, ,         if(_dynamicNodeProperties != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("dynamicNodeProperties=").append(_dynamicNodeProperties);,         }, ,         if(_distributionMode != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("distributionMode=").append(_distributionMode);,         }, ,         if(_filter != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("filter=").append(_filter);,         }, ,         if(_defaultOutcome != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("defaultOutcome=").append(_defaultOutcome);,         }, ,         if(_outcomes != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("outcomes=").append(Arrays.toString(_outcomes));,         }, ,         if(_capabilities != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("capabilities=").append(Arrays.toString(_capabilities));,         }, ,         builder.append('}');,         return builder.toString();],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/qpid/amqp_1_0/type/messaging/Target.java,,34-193,[public class Target,   implements org.apache.qpid.amqp_1_0.type.Target,   {, , ,     private String _address;, ,     private TerminusDurability _durable;, ,     private TerminusExpiryPolicy _expiryPolicy;, ,     private UnsignedInteger _timeout;, ,     private Boolean _dynamic;, ,     private Map _dynamicNodeProperties;, ,     private Symbol[] _capabilities;, ,     public String getAddress(),     {,         return _address;,     }, ,     public void setAddress(String address),     {,         _address = address;,     }, ,     public TerminusDurability getDurable(),     {,         return _durable;,     }, ,     public void setDurable(TerminusDurability durable),     {,         _durable = durable;,     }, ,     public TerminusExpiryPolicy getExpiryPolicy(),     {,         return _expiryPolicy;,     }, ,     public void setExpiryPolicy(TerminusExpiryPolicy expiryPolicy),     {,         _expiryPolicy = expiryPolicy;,     }, ,     public UnsignedInteger getTimeout(),     {,         return _timeout;,     }, ,     public void setTimeout(UnsignedInteger timeout),     {,         _timeout = timeout;,     }, ,     public Boolean getDynamic(),     {,         return _dynamic;,     }, ,     public void setDynamic(Boolean dynamic),     {,         _dynamic = dynamic;,     }, ,     public Map getDynamicNodeProperties(),     {,         return _dynamicNodeProperties;,     }, ,     public void setDynamicNodeProperties(Map dynamicNodeProperties),     {,         _dynamicNodeProperties = dynamicNodeProperties;,     }, ,     public Symbol[] getCapabilities(),     {,         return _capabilities;,     }, ,     public void setCapabilities(Symbol[] capabilities),     {,         _capabilities = capabilities;,     }, ,     @Override,     public String toString(),     {,         StringBuilder builder = new StringBuilder("Target{");,         final int origLength = builder.length();, ,         if(_address != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("address=").append(_address);,         }, ,         if(_durable != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("durable=").append(_durable);,         }, ,         if(_expiryPolicy != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("expiryPolicy=").append(_expiryPolicy);,         }, ,         if(_timeout != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("timeout=").append(_timeout);,         }, ,         if(_dynamic != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("dynamic=").append(_dynamic);,         }, ,         if(_dynamicNodeProperties != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("dynamicNodeProperties=").append(_dynamicNodeProperties);,         }, ,         if(_capabilities != null),         {,             if(builder.length() != origLength),             {,                 builder.append(',');,             },             builder.append("capabilities=").append(Arrays.toString(_capabilities));,         }, ,         builder.append('}');,         return builder.toString();],,
CORRECTNESS,SIO_SUPERFLUOUS_INSTANCEOF,org/apache/qpid/amqp_1_0/type/messaging/codec/AmqpValueConstructor.java,construct,53-53,[        if(underlying instanceof Object)],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/amqp_1_0/type/security/SaslInit.java,getHostname,65-65,[        return _hostname;],,getHostName,1739-1739,[            return _host;],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/qpid/amqp_1_0/type/transaction/TxnCapability.java,,30-126,[public class TxnCapability,   implements org.apache.qpid.amqp_1_0.type.TxnCapability, RestrictedType<Symbol>,   ,   {, , , ,     private final Symbol _val;, ,     ,     public static final TxnCapability LOCAL_TXN = new TxnCapability(Symbol.valueOf("amqp:local-transactions"));,     ,     public static final TxnCapability DISTRIBUTED_TXN = new TxnCapability(Symbol.valueOf("amqp:distributed-transactions"));,     ,     public static final TxnCapability PROMOTABLE_TXN = new TxnCapability(Symbol.valueOf("amqp:promotable-transactions"));,     ,     public static final TxnCapability MULTI_TXNS_PER_SSN = new TxnCapability(Symbol.valueOf("amqp:multi-txns-per-ssn"));,     ,     public static final TxnCapability MULTI_SSNS_PER_TXN = new TxnCapability(Symbol.valueOf("amqp:multi-ssns-per-txn"));,     , , ,     private TxnCapability(Symbol val),     {,         _val = val;,     }, ,     public Symbol getValue(),     {,         return _val;,     }, ,     public String toString(),     {,         ,         if(this == LOCAL_TXN),         {,             return "local-txn";,         },         ,         if(this == DISTRIBUTED_TXN),         {,             return "distributed-txn";,         },         ,         if(this == PROMOTABLE_TXN),         {,             return "promotable-txn";,         },         ,         if(this == MULTI_TXNS_PER_SSN),         {,             return "multi-txns-per-ssn";,         },         ,         if(this == MULTI_SSNS_PER_TXN),         {,             return "multi-ssns-per-txn";,         },         ,         else,         {,             return String.valueOf(_val);,         },     }, ,     public static TxnCapability valueOf(Object obj),     {,         Symbol val = (Symbol) obj;, ,         if(LOCAL_TXN._val.equals(val)),         {,             return LOCAL_TXN;,         },     ,         if(DISTRIBUTED_TXN._val.equals(val)),         {,             return DISTRIBUTED_TXN;,         },     ,         if(PROMOTABLE_TXN._val.equals(val)),         {,             return PROMOTABLE_TXN;,         },     ,         if(MULTI_TXNS_PER_SSN._val.equals(val)),         {,             return MULTI_TXNS_PER_SSN;,         },     ,         if(MULTI_SSNS_PER_TXN._val.equals(val)),         {,             return MULTI_SSNS_PER_TXN;,         },     ,         // TODO ERROR,         return null;],,
I18N,DM_CONVERT_CASE,org/apache/qpid/client/AMQBrokerDetails.java,equals,334-334,[        return _host.toLowerCase().equals(bd.getHost() == null ? null : bd.getHost().toLowerCase()) &&],,equals,336-336,[               _transport.toLowerCase().equals(bd.getTransport() == null ? null : bd.getTransport().toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/client/AMQBrokerDetails.java,hashCode,343-343,[        int result = _host != null ? _host.toLowerCase().hashCode() : 0;],,hashCode,345-345,[        result = 31 * result + (_transport != null ? _transport.toLowerCase().hashCode() : 0);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/client/AMQBrokerDetails.java,printOptionsURL,370-370,[                    optionsURL.append(_options.get(key));],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/AMQConnection.java,<init>,341-341,[            _messageCompressionThresholdSize = Integer.valueOf(connectionURL.getOption(ConnectionURL.OPTIONS_MESSAGES_COMPRESSION_THRESHOLD_SIZE));],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQConnection.java,getNextChannelID,1544-1544,[        return _sessions.getNextChannelId();],,getNextChannelId,133-154,[        int id = _minChannelID;, ,         boolean done = false;,         while (!done),         {,             id = _idFactory.getAndIncrement();,             if (id == _maxChannelID),             {,                 //go back to the start,                 _idFactory.set(_minChannelID);,             },             if ((id & FAST_CHANNEL_ACCESS_MASK) == 0),             {,                 done = (_fastAccessSessions[id] == null);,             },             else,             {,                 done = (!_slowAccessSessions.keySet().contains(id));,             },         }, ,         return id;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQConnection.java,getUsername,1090-1090,[        return _username;],,getUserName,118-122,[      if (_log.isTraceEnabled()),       {,          _log.trace("getDefaultUsername()");,       },       return _userName;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQConnection.java,setUsername,1095-1096,[        _username = id;,     }],,setUserName,127-133,[      if (_log.isTraceEnabled()),       {,          _log.trace("setDefaultUsername(" + defaultUsername + ")");,       },       _hasBeenUpdated = true;,       this._userName = defaultUsername;,    }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQConnection.java,attemptReconnection,591-591,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQConnectionDelegate_0_10.java,closed,321-321,[                catch (Exception e)],,
I18N,DM_CONVERT_CASE,org/apache/qpid/client/AMQConnectionDelegate_8_0.java,supportsIsBound,404-404,[                String product = String.valueOf(serverProperties.getString(ConnectionStartProperties.PRODUCT)).toLowerCase();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQConnectionFactory.java,createConnection,160-160,[            catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQConnectionFactory.java,createXAConnection,340-340,[            catch (Exception e)],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/client/AMQConnectionFactory.java,,67-452,[    {,     }, ,     public AMQConnectionFactory(final String url) throws URLSyntaxException,     {,         if (url == null),         {,             throw new IllegalArgumentException("url cannot be null");,         }, ,         _connectionDetails = new AMQConnectionURL(url);,     }, ,     public AMQConnectionFactory(ConnectionURL url),     {,         if (url == null),         {,             throw new IllegalArgumentException("url cannot be null");,         }, ,         _connectionDetails = url;,     }, ,     /**,      * @return the virtualPath of the connection details.,      */,     public final String getVirtualPath(),     {,         return _connectionDetails.getVirtualHost();,     }, ,     public static String getUniqueClientID(),     {,         try,         {,             InetAddress addr = InetAddress.getLocalHost();,             return addr.getHostName() + System.currentTimeMillis();,         },         catch (UnknownHostException e),         {,             return "UnknownHost" + UUID.randomUUID();,         },     }, ,     public Connection createConnection() throws JMSException,     {,         if(_connectionDetails == null),         {,             throw new JMSException(NO_URL_CONFIGURED);,         }, ,         try,         {,             if (_connectionDetails.getClientName() == null || _connectionDetails.getClientName().equals("")),             {,                 _connectionDetails.setClientName(getUniqueClientID());,             },             return new AMQConnection(_connectionDetails);,         },         catch (Exception e),         {,             JMSException jmse = new JMSException("Error creating connection: " + e.getMessage());,             jmse.setLinkedException(e);,             jmse.initCause(e);,             throw jmse;,         },     }, ,     public Connection createConnection(String userName, String password) throws JMSException,     {,         return createConnection(userName, password, null);,     },     ,     public Connection createConnection(String userName, String password, String id) throws JMSException,     {,         if (_connectionDetails != null),         {,             try,             {,                 ConnectionURL connectionDetails = new AMQConnectionURL(_connectionDetails.getURL());,                 connectionDetails.setUsername(userName);,                 connectionDetails.setPassword(password);,                 ,                 if (id != null && !id.equals("")),                 {,                     connectionDetails.setClientName(id);,                 } ,                 else if (connectionDetails.getClientName() == null || connectionDetails.getClientName().equals("")),                 {,                     connectionDetails.setClientName(getUniqueClientID());,                 },                 return new AMQConnection(connectionDetails);,             },             catch (Exception e),             {,                 JMSException jmse = new JMSException("Error creating connection: " + e.getMessage());,                 jmse.setLinkedException(e);,                 jmse.initCause(e);,                 throw jmse;,             },         },         else,         {,             throw new JMSException(NO_URL_CONFIGURED);,         },     }, ,     public QueueConnection createQueueConnection() throws JMSException,     {,         return (QueueConnection) createConnection();,     }, ,     public QueueConnection createQueueConnection(String username, String password) throws JMSException,     {,         return (QueueConnection) createConnection(username, password);,     }, ,     public TopicConnection createTopicConnection() throws JMSException,     {,         return (TopicConnection) createConnection();,     }, ,     public TopicConnection createTopicConnection(String username, String password) throws JMSException,     {,         return (TopicConnection) createConnection(username, password);,     }, , ,     public ConnectionURL getConnectionURL(),     {,         return _connectionDetails;,     }, ,     public String getConnectionURLString(),     {,         return _connectionDetails.toString();,     }, ,     //setter necessary to use instances created with the default constructor (which we can't remove),     public final void setConnectionURLString(String url) throws URLSyntaxException,     {,         _connectionDetails = new AMQConnectionURL(url);,     }, ,     /**,      * JNDI interface to create objects from References.,      *,      * @param obj  The Reference from JNDI,      * @param name,      * @param ctx,      * @param env,      *,      * @return AMQConnection,AMQTopic,AMQQueue, or AMQConnectionFactory.,      *,      * @throws Exception,      */,     public Object getObjectInstance(Object obj, Name name, Context ctx, Hashtable env) throws Exception,     {,         if (obj instanceof Reference),         {,             Reference ref = (Reference) obj;, ,             if (ref.getClassName().equals(AMQConnection.class.getName())),             {,                 RefAddr addr = ref.get(AMQConnection.class.getName());, ,                 if (addr != null),                 {,                     return new AMQConnection((String) addr.getContent());,                 },             }, ,             if (ref.getClassName().equals(AMQQueue.class.getName())),             {,                 RefAddr addr = ref.get(AMQQueue.class.getName());, ,                 if (addr != null),                 {,                     return new AMQQueue(new AMQBindingURL((String) addr.getContent()));,                 },             }, ,             if (ref.getClassName().equals(AMQTopic.class.getName())),             {,                 RefAddr addr = ref.get(AMQTopic.class.getName());, ,                 if (addr != null),                 {,                     return new AMQTopic(new AMQBindingURL((String) addr.getContent()));,                 },             }, ,             if (ref.getClassName().equals(AMQConnectionFactory.class.getName())),             {,                 RefAddr addr = ref.get(AMQConnectionFactory.class.getName());, ,                 if (addr != null),                 {,                     return new AMQConnectionFactory((String) addr.getContent());,                 },             }, ,         },         return null;,     }, , ,     public Reference getReference() throws NamingException,     {,         return new Reference(,                 AMQConnectionFactory.class.getName(),,                 new StringRefAddr(AMQConnectionFactory.class.getName(), _connectionDetails.getURL()),,                              AMQConnectionFactory.class.getName(), null);          // factory location,     }, ,     // ---------------------------------------------------------------------------------------------------,     // the following methods are provided for XA compatibility,     // Those methods are only supported by 0_10 and above ,     // ---------------------------------------------------------------------------------------------------, ,     /**,      * Creates a XAConnection with the default user identity.,      * <p> The XAConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @return A newly created XAConnection,      * @throws JMSException         If creating the XAConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XAConnection createXAConnection() throws JMSException,     {,         try,         {,             return new XAConnectionImpl(_connectionDetails);,         },         catch (Exception e),         {,             JMSException jmse = new JMSException("Error creating connection: " + e.getMessage());,             jmse.setLinkedException(e);,             jmse.initCause(e);,             throw jmse;,         },     }, ,     /**,      * Creates a XAConnection with the specified user identity.,      * <p> The XAConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @param username the caller's user name,      * @param password the caller's password,      * @return A newly created XAConnection.,      * @throws JMSException         If creating the XAConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XAConnection createXAConnection(String username, String password) throws JMSException,     {,         if (_connectionDetails != null),         {,             try,             {,                 ConnectionURL connectionDetails = new AMQConnectionURL(_connectionDetails.toString());,                 connectionDetails.setUsername(username);,                 connectionDetails.setPassword(password);,     ,                 if (connectionDetails.getClientName() == null || connectionDetails.getClientName().equals("")),                 {,                     connectionDetails.setClientName(getUniqueClientID());,                 },                 return new XAConnectionImpl(connectionDetails);,             },             catch (Exception e),             {,                 JMSException jmse = new JMSException("Error creating XA Connection: " + e.getMessage());,                 jmse.setLinkedException(e);,                 jmse.initCause(e);,                 throw jmse;,             },         },         else,         {,             throw new JMSException(NO_URL_CONFIGURED);,         }        ,     }, , ,     /**,      * Creates a XATopicConnection with the default user identity.,      * <p> The XATopicConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @return A newly created XATopicConnection,      * @throws JMSException         If creating the XATopicConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XATopicConnection createXATopicConnection() throws JMSException,     {,         return (XATopicConnection) createXAConnection();,     }, ,     /**,      * Creates a XATopicConnection with the specified user identity.,      * <p> The XATopicConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @param username the caller's user name,      * @param password the caller's password,      * @return A newly created XATopicConnection.,      * @throws JMSException         If creating the XATopicConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XATopicConnection createXATopicConnection(String username, String password) throws JMSException,     {,          return (XATopicConnection) createXAConnection(username, password);,     }, ,     /**,      * Creates a XAQueueConnection with the default user identity.,      * <p> The XAQueueConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @return A newly created XAQueueConnection,      * @throws JMSException         If creating the XAQueueConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XAQueueConnection createXAQueueConnection() throws JMSException,     {,        return (XAQueueConnection) createXAConnection();,     }, ,     /**,      * Creates a XAQueueConnection with the specified user identity.,      * <p> The XAQueueConnection is created in stopped mode. No messages,      * will be delivered until the <code>Connection.start</code> method,      * is explicitly called.,      *,      * @param username the caller's user name,      * @param password the caller's password,      * @return A newly created XAQueueConnection.,      * @throws JMSException         If creating the XAQueueConnection fails due to some internal error.,      * @throws javax.jms.JMSSecurityException If client authentication fails due to an invalid user name or password.,      */,     public XAQueueConnection createXAQueueConnection(String username, String password) throws JMSException,     {,         return (XAQueueConnection) createXAConnection(username, password);,     }, ,     @Override,     public boolean equals(final Object o),     {,         if (this == o),         {,             return true;,         },         if (o == null || getClass() != o.getClass()),         {,             return false;,         }, ,         final AMQConnectionFactory that = (AMQConnectionFactory) o;, ,         if (_connectionDetails != null,                 ? !_connectionDetails.equals(that._connectionDetails),                 : that._connectionDetails != null),         {,             return false;,         }, ,         return true;,     }, ,     @Override,     public int hashCode(),     {,         return _connectionDetails != null ? _connectionDetails.hashCode() : 0;,     }, ,     @Override,     public String toString(),     {,         return "AMQConnectionFactory{" +],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQConnectionURL.java,getURL,69-69,[        return _url;],,getUrl,154-154,[		return url;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQConnectionUnitTest.java,testExceptionReceived,88-88,[        catch (Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/client/AMQConnectionUnitTest.java,,78-84,[            {, ,                 @Override,                 public void onException(JMSException jmsException),                 {,                     receivedException.set(jmsException);,                 }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/client/AMQDestination.java,getInfoFromBindingURL,301-301,[        _rejectBehaviour = rejectBehaviourValue == null ? null : RejectBehaviour.valueOf(rejectBehaviourValue.toUpperCase());],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQDestination.java,setQueueName,466-470,[        _queueName = queueName;,         // calculated URL now out of date,         _url = null;,         _urlAsShortString = null;,     }],,setQueuename,1011-1012,[        this._queuename = queuename;,     }],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/AMQHeadersExchange.java,,36-54,[        super(binding);,     }, ,     public AMQHeadersExchange(String name),     {,         this(new AMQShortString(name));,     }, ,     public AMQHeadersExchange(AMQShortString queueName),     {,         super(queueName, AMQShortString.valueOf(ExchangeDefaults.HEADERS_EXCHANGE_CLASS), queueName, true, true, null);,     }, ,     public boolean isNameRequired(),     {,         //Not sure what the best approach is here, probably to treat this like a topic,         //and allow server to generate names. As it is AMQ specific it doesn't need to,         //fit the JMS API expectations so this is not as yet critical.,         return getAMQQueueName() == null;],,
BAD_PRACTICE,HE_EQUALS_NO_HASHCODE,org/apache/qpid/client/AMQQueue.java,equals,186-186,[        return super.equals(o) && o instanceof Queue;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AMQQueueBrowser.java,,163-221,[        {,             if (consumer != null),             {,                 _consumer = consumer;,                 prefetchMessage();,             },             _logger.debug("QB:created with first element:" + _nextMessage);,         }, ,         public boolean hasMoreElements(),         {,             _logger.debug("QB:hasMoreElements:" + (_nextMessage != null));,             return (_nextMessage != null);,         }, ,         public Object nextElement(),         {,             Message msg = _nextMessage;,             if (msg == null),             {,                 throw new NoSuchElementException("No messages") ;,             },             try,             {,                 _logger.debug("QB:nextElement about to receive");,                 prefetchMessage();,                 _logger.debug("QB:nextElement received:" + _nextMessage);,             },             catch (JMSException e),             {,                 _logger.warn("Exception caught while queue browsing", e);,                 _nextMessage = null;,                 try,                 {,                     closeConsumer() ;,                 },                 catch (final JMSException jmse) {} // ignore,             },             return msg;,         }, ,         private void prefetchMessage() throws JMSException,         {,             _nextMessage = _consumer.receiveBrowse();,             if (_nextMessage == null),             {,                 closeConsumer() ;,             },         }, ,         private void closeConsumer() throws JMSException,         {,             if (_consumer != null),             {,                 BasicMessageConsumer consumer = _consumer ;,                 _consumer = null ;,                 consumer.close() ;,             },         }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQQueueDeferredOrderingTest.java,setUp,87-102,[        super.setUp();, ,         numMessages = isBrokerStorePersistent() ? 300 : 1000;, ,         _logger.info("Create Connection");,         con = getConnection();,         _logger.info("Create Session");,         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);,         _logger.info("Create Q");,         queue = new AMQQueue(new AMQShortString("amq.direct"), new AMQShortString("Q"), new AMQShortString("Q"),,                 false, true);,         _logger.info("Create Consumer of Q");,         consumer = session.createConsumer(queue);,         _logger.info("Start Connection");,         con.start();,     }],,setup,631-632,[      _defaultAMQConnectionFactory = createAMQConnectionFactory(_raProperties);,    }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/AMQQueueDeferredOrderingTest.java,tearDown,132-138,[        _logger.info("Interuptting producer thread");,         producerThread.interrupt();,         _logger.info("Closing connection");,         con.close();, ,         super.tearDown();,     }],,teardown,159-169,[      _log.debug("Tearing down " + _spec);,       ,       super.teardown();, ,       for (QpidMessageHandler handler : _handlers),       {,          handler.stop();,       }, ,       _log.debug("Tearing down complete " + this);,    }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/client/AMQQueueTest.java,,33-33,[    private AMQShortString[] bindings = new AMQShortString[]{new AMQShortString("bindingB"),],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/client/AMQQueueTest.java,,32-32,[    private AMQShortString[] oneBinding = new AMQShortString[]{new AMQShortString("bindingA")};],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/client/AMQSession.java,drainDispatchQueue,2358-2358,[                if (disp == null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/client/AMQSession.java,syncDispatchQueue,2306-2306,[                if (disp == null)],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/client/AMQSession.java,setConnectionStopped,3502-3502,[                _lock.notify();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/client/AMQSession.java,run,3472-3472,[                while (((disp = (Dispatchable) _queue.take()) != null) && !_closed.get())],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/client/AMQSession_0_10.java,sendExchangeDeclare,734-734,[                name.toString().startsWith("amq.") ? Option.PASSIVE : Option.NONE,],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/client/AMQSession_0_10.java,send0_10QueueDeclare,797-797,[            if (arguments == null || arguments.get(AddressHelper.NO_LOCAL) == null)],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/client/AMQSession_0_10.java,matchProps,1199-1199,[                    (target.get(key).equals(source.get(key))],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/qpid/client/AMQSession_0_10.java,execute,976-976,[                               binddingKey = binddingKey + "_" + key.toString();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQSession_0_10Test.java,testExceptionOnMessageConsumerReceive,335-335,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQSession_0_10Test.java,testExceptionOnMessageConsumerReceiveNoWait,371-371,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQSession_0_10Test.java,testSendConsume,284-284,[        catch (Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AMQSession_0_10Test.java,,574-578,[    private final class MockMessageListener implements MessageListener,     {,         public void onMessage(Message arg0),         {,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AMQSession_0_10Test.java,,669-692,[    class MockSender implements Sender<ProtocolEvent>,     {,         private List<ProtocolEvent> _sendEvents = new ArrayList<ProtocolEvent>();, ,         public void setIdleTimeout(int i),         {,         }, ,         public void send(ProtocolEvent msg),         {,             _sendEvents.add(msg);,         }, ,         public void flush(),         {,         }, ,         public void close(),         {,         }, ,         public List<ProtocolEvent> getSendEvents(),         {,             return _sendEvents;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AMQSession_0_10Test.java,,589-657,[        {,             super(connection, delegate, name, expiry);,             _throwException = throwException;,             setState(State.OPEN);,             _connection = connection;,             _delegate = delegate;,         }, ,         public void invoke(Method m, Runnable postIdSettingAction),         {,             if (_throwException),             {,                 if (m instanceof SessionAttach || m instanceof SessionRequestTimeout || m instanceof TxSelect),                 {,                     // do not throw exception for SessionAttach,,                     // SessionRequestTimeout and TxSelect,                     // session needs to be instantiated,                     return;,                 },                 ExecutionException e = new ExecutionException();,                 e.setErrorCode(ExecutionErrorCode.INTERNAL_ERROR);,                 throw new SessionException(e);,             },             else,             {,                 super.invoke(m, postIdSettingAction);,                 if (m instanceof SessionDetach),                 {,                     setState(State.CLOSED);,                 },             },         }, ,         public void sync(),         {,             // to avoid recursive calls,             setAutoSync(false);,             // simply send sync command,             super.executionSync(Option.SYNC);,         }, ,         protected <T> Future<T> invoke(Method m, Class<T> klass),         {,             int commandId = getCommandsOut();,             Future<T> future = super.invoke(m, klass);,             ExecutionResult result = new ExecutionResult();,             result.setCommandId(commandId);,             if (m instanceof ExchangeBound),             {,                 ExchangeBoundResult struc = new ExchangeBoundResult();,                 result.setValue(struc);,             },             else if (m instanceof ExchangeQuery),             {,                 ExchangeQueryResult struc = new ExchangeQueryResult();,                 result.setValue(struc);,             },             else if (m instanceof QueueQuery),             {,                 QueueQueryResult struc = new QueueQueryResult();,                 result.setValue(struc);,             },             _delegate.executionResult(this, result);,             return future;,         }, ,         public MockSender getSender(),         {,             return (MockSender) _connection.getSender();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AMQSession_0_10Test.java,,661-666,[    class MockTransportConnection extends Connection,     {,         public void setState(State state),         {,             super.setState(state);,         }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/client/AMQSession_0_8.java,sendQueueDeclare,671-671,[        sendQueueDeclare(queueName, durable, exclusive, autoDelete, arguments, passive);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/client/AMQSession_0_8.java,isQueueExist,1225-1225,[                        }, getAMQConnection());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/AMQSession_0_8.java,run,812-812,[                } catch (Exception e)],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/client/AMQSession_0_8.java,setFlowControl,1533-1533,[            notify();],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/qpid/client/AMQSession_0_8.java,getFlowControl,1538-1538,[            return _flowControl;],,setFlowControl,1532-1534,[            _flowControl = flowControl;,             notify();,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/qpid/client/AMQSession_0_8.java,,920-943,[        {,             super(getChannelId(), QueueDeclareOkBody.class);,         }, ,         public boolean processMethod(int channelId, AMQMethodBody frame) //throws AMQException,         {,             boolean matches = super.processMethod(channelId, frame);,             if (matches),             {,                 QueueDeclareOkBody declareOk = (QueueDeclareOkBody) frame;,                 _messageCount = declareOk.getMessageCount();,                 _consumerCount = declareOk.getConsumerCount();,             },             return matches;,         }, ,         public long getMessageCount(),         {,             return _messageCount;,         }, ,         public long getConsumerCount(),         {,             return _consumerCount;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/client/AMQSession_0_8Test.java,setUp,37-37,[        _connection = new MockAMQConnection("amqp://guest:guest@/test?brokerlist='tcp://localhost:5672'");],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/client/AMQQueue.java,equals,186-186,[        return super.equals(o) && o instanceof Queue;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/AMQTemporaryQueue.java,,68-68,[        return _deleted;],,,57-57,[            _deleted = true;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/AMQTemporaryQueue.java,,39-68,[        super(session.getTemporaryQueueExchangeName(), new AMQShortString("TempQueue" + UUID.randomUUID()), true);,         _session = session;,     }, ,     /** @see javax.jms.TemporaryQueue#delete() */,     public synchronized void delete() throws JMSException,     {,         if (_session.hasConsumer(this)),         {,             throw new JMSException("Temporary Queue has consumers so cannot be deleted");,         }, ,         try,         {,             _session.deleteTemporaryDestination(this);,         },         finally,         {,             _deleted = true;,         },     }, ,     public AMQSession getSession(),     {,         return _session;,     }, ,     public boolean isDeleted(),     {,         return _deleted;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/client/AMQTopic.java,equals,232-240,[        if (getDestSyntax() == DestSyntax.ADDR),         {,             return super.equals(o);,         },         else,         {,             return (o instanceof AMQTopic),                && ((AMQTopic)o).getExchangeName().equals(getExchangeName()),                && ((AMQTopic)o).getRoutingKey().equals(getRoutingKey());],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/AMQTemporaryTopic.java,,43-74,[        super(session.getTemporaryTopicExchangeName(),new AMQShortString("tmp_" + UUID.randomUUID()));,         _session = session;,     }, ,     /**,      * @see javax.jms.TemporaryTopic#delete(),      */,     public void delete() throws JMSException,     {,         if(_session.hasConsumer(this)),         {,             throw new JMSException("Temporary Topic has consumers so cannot be deleted");,         }, ,         try,         {,             _session.deleteTemporaryDestination(this);,         },         finally,         {,             _deleted = true;,         },     }, ,     public AMQSession getSession(),     {,         return _session;,     }, ,     public boolean isDeleted(),     {,         return _deleted;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/AMQUndefinedDestination.java,,28-45,[    private static final AMQShortString UNKNOWN_EXCHANGE_CLASS = new AMQShortString("unknown");,     private static final long serialVersionUID = -1487224209485888847L;, , ,     public AMQUndefinedDestination(AMQShortString exchange, AMQShortString routingKey, AMQShortString queueName),     {,         super(exchange, UNKNOWN_EXCHANGE_CLASS, routingKey, queueName);,     }, ,     public boolean isNameRequired(),     {,         return getAMQQueueName() == null;,     }, ,     @Override,     public boolean neverDeclare(),     {,         return true;],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/qpid/client/AsynchMessageListenerTest.java,testMessageListenerThrowsError,243-243,[        _consumerConnection.setExceptionListener(countingExceptionListener);],,testMessageListenerThrowsError,273-273,[        if (_consumerConnection != null)],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/client/AsynchMessageListenerTest.java,testMessageListenerThrowsError,262-262,[        awaitMessages.await(AWAIT_MESSAGE_TIMEOUT, TimeUnit.MILLISECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/client/AsynchMessageListenerTest.java,,246-257,[        {,             @Override,             public void onMessage(Message message),             {,                 try,                 {,                     throw new Error(javaLangErrorMessageText);,                 },                 finally,                 {,                     receivedCount.incrementAndGet();,                     awaitMessages.countDown();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AsynchMessageListenerTest.java,,290-302,[    private final class CountingExceptionListener implements ExceptionListener,     {,         private final AtomicInteger _errorCount = new AtomicInteger();, ,         @Override,         public void onException(JMSException arg0),         {,             _errorCount.incrementAndGet();,         }, ,         public int getErrorCount(),         {,             return _errorCount.intValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/AsynchMessageListenerTest.java,,314-357,[            this(totalExpectedMessageCount, totalExpectedMessageCount);,         }, , ,         public CountingMessageListener(int totalExpectedMessageCount, int numberOfMessagesToAwait),         {,             _receivedCount = new AtomicInteger(0);,             _outstandingMessageCount = new AtomicInteger(totalExpectedMessageCount);,             _awaitMessages = new CountDownLatch(numberOfMessagesToAwait);,         }, ,         public int getOutstandingCount(),         {,             return _outstandingMessageCount.get();,         }, ,         public int getReceivedCount(),         {,             return _receivedCount.get();,         }, ,         public void resetLatch(),         {,             _awaitMessages = new CountDownLatch(_outstandingMessageCount.get());,         }, ,         @Override,         public void onMessage(Message message),         {,             _receivedCount.incrementAndGet();,             _outstandingMessageCount.decrementAndGet();,             _awaitMessages.countDown();,         }, ,         public boolean awaitMessages(long timeout),         {,             try,             {,                 return _awaitMessages.await(timeout, TimeUnit.MILLISECONDS);,             },             catch (InterruptedException e),             {,                 Thread.currentThread().interrupt();,                 return false;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/BasicMessageConsumer.java,getQueuename,1006-1006,[        return _queuename;],,getQueueName,856-856,[            return _queueName;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/client/BasicMessageConsumer.java,postDeliver,820-827,[        switch (_acknowledgeMode),         {,             case Session.DUPS_OK_ACKNOWLEDGE:,             case Session.AUTO_ACKNOWLEDGE:,                 // we do not auto ack a message if the application code called recover(),                 if (!_session.isInRecovery()),                 {,                     _session.acknowledgeMessage(msg.getDeliveryTag(), false);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/client/BasicMessageConsumer_0_10.java,postDeliver,429-443,[        switch (getAcknowledgeMode()),         {,             case Session.SESSION_TRANSACTED:,                 _0_10session.sendTxCompletionsIfNecessary();,                 break;,             case Session.NO_ACKNOWLEDGE:,                 if (!getSession().isInRecovery()),                 {,                   getSession().acknowledgeMessage(msg.getDeliveryTag(), false);,                 },                 break;,             case Session.AUTO_ACKNOWLEDGE:,                 if (!getSession().isInRecovery() && getSession().getAMQConnection().getSyncAck()),                 {,                     ((AMQSession_0_10) getSession()).getQpidSession().sync();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/client/BasicMessageConsumer_0_8.java,<init>,98-98,[                _rejectBehaviour = RejectBehaviour.valueOf(rejectBehaviour.toUpperCase());],,<init>,104-104,[                _rejectBehaviour = RejectBehaviour.valueOf( rejectBehaviour.toUpperCase());],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/BasicMessageProducer.java,getUserID,713-713,[        return _userID;],,getUserId,68-68,[            return null;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/BasicMessageProducer.java,setUserID,718-719,[        _userID = userID;,     }],,setUserId,686-687,[        setUserId((userId == null) ? null : AMQShortString.valueOf(userId));,     }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/ChannelToSessionMap.java,,159-159,[        _maxChannelID = maxChannelID;],,,139-139,[            if (id == _maxChannelID)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/HeartbeatTest.java,,192-221,[        private final AtomicInteger _heartbeatsReceived = new AtomicInteger(0);,         private final AtomicInteger _heartbeatsSent = new AtomicInteger(0);, ,         public TestListener(String name),         {,             _name = name;,         }, ,         @Override,         public void heartbeatReceived(),         {,             LOGGER.debug(_name + " heartbeat received");,             _heartbeatsReceived.incrementAndGet();,         }, ,         public int getHeartbeatsReceived(),         {,             return _heartbeatsReceived.get();,         }, ,         @Override,         public void heartbeatSent(),         {,             LOGGER.debug(_name + " heartbeat sent");,             _heartbeatsSent.incrementAndGet();,         }, ,         public int getHeartbeatsSent(),         {,             return _heartbeatsSent.get();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/client/SynchReceiveTest.java,testTwoConsumersInterleaved,83-83,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/client/SynchReceiveTest.java,testTwoConsumersInterleaved,83-83,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/client/failover/FailoverBehaviourTest.java,browserCloseWhileFailoverImpl,1396-1396,[        _failoverStarted.await(5, TimeUnit.SECONDS);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/client/failover/FailoverBehaviourTest.java,sessionCloseWhileFailoverImpl,1340-1340,[        _failoverStarted.await(5, TimeUnit.SECONDS);],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/qpid/client/failover/FailoverBehaviourTest.java,publishWithFailoverMutex,762-762,[                Thread.sleep(25l);],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/qpid/client/failover/FailoverBehaviourTest.java,testFailoverHandlerTimeoutExpires,799-799,[                Thread.sleep(11000l);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/failover/FailoverBehaviourTest.java,run,886-886,[                    catch(Exception e)],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/client/failover/FailoverBehaviourTest.java,attainedConnection,1262-1262,[                _suspendLatch.await(_delay, TimeUnit.SECONDS);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/failover/FailoverHandler.java,run,226-226,[                catch (Exception e)],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/client/failover/FailoverNoopSupport.java,,54-54,[        this.connection = con;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/client/failover/MultipleBrokersFailoverTest.java,testFailoverOnBrokerKill,172-172,[        awaitForFailoverCompletion(FAILOVER_CONNECTDELAY * _brokerPorts.length * FAILOVER_FACTOR);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/client/failover/MultipleBrokersFailoverTest.java,testFailoverOnBrokerStop,188-188,[        awaitForFailoverCompletion(FAILOVER_CONNECTDELAY * _brokerPorts.length * FAILOVER_FACTOR);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/client/filter/JMSSelectorFilter.java,getTimestamp,175-179,[                    return message.getJMSTimestamp();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);],,getTimeStamp,320-320,[            return _timestamp;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/client/filter/JMSSelectorFilter.java,,93-203,[        {,             public boolean isPersistent(),             {,                 try,                 {,                     return message.getJMSDeliveryMode() == DeliveryMode.PERSISTENT;,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public boolean isRedelivered(),             {,                 try,                 {,                     return message.getJMSRedelivered();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public Object getHeader(String name),             {,                 try,                 {,                     return message.getObjectProperty(name);,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public String getReplyTo(),             {,                 return message.getReplyToString();,             }, ,             public String getType(),             {,                 try,                 {,                     return message.getJMSType();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public byte getPriority(),             {,                 try,                 {,                     return (byte) message.getJMSPriority();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public String getMessageId(),             {,                 try,                 {,                     return message.getJMSMessageID();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public long getTimestamp(),             {,                 try,                 {,                     return message.getJMSTimestamp();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public String getCorrelationId(),             {,                 try,                 {,                     return message.getJMSCorrelationID();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);,                 },             }, ,             public long getExpiration(),             {,                 try,                 {,                     return message.getJMSExpiration();,                 },                 catch (JMSException e),                 {,                     throw new SelectorParsingException(e);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/handler/ConnectionStartMethodHandler.java,methodReceived,113-113,[                    throw new AMQException(null, "No supported security mechanism found, passed: " + new String(body.getMechanisms()), null);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,getIntProperty,587-587,[            return Integer.valueOf((String) o);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,getLongProperty,617-617,[            return Long.valueOf((String) o);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,getJMSCorrelationID,257-257,[        return correlationIDAsBytes == null ? null : new String(correlationIDAsBytes);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,getStringProperty,694-694,[            return userIdBytes == null ? null : new String(userIdBytes);],,getStringProperty,699-699,[            return new String(_messageProps.getAppId());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,setJMSCorrelationID,250-250,[        setJMSCorrelationIDAsBytes(correlationId == null ? null : correlationId.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,setStringProperty,818-818,[            _messageProps.setAppId(value.getBytes());],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,checkAndUpdateExchange,177-177,[                    session.exchangeQuery(exchange.toString());],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/qpid/client/message/AMQMessageDelegate_0_10.java,getByteProperty,538-538,[            return Byte.valueOf(null);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_8.java,getJMSCorrelationIDAsBytes,246-246,[        return getContentHeaderProperties().getCorrelationIdAsString().getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQMessageDelegate_0_8.java,setJMSCorrelationIDAsBytes,251-251,[        getContentHeaderProperties().setCorrelationId(new String(bytes));],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/message/AMQMessageDelegate_0_8.java,,640-655,[            super(AMQShortString.EMPTY_STRING,,                   AMQShortString.valueOf("direct"),,                   AMQShortString.valueOf(replyToEncoding),,                   AMQShortString.valueOf(replyToEncoding));,         }, ,         @Override,         public boolean isNameRequired(),         {,             return false;,         }, ,         @Override,         public boolean neverDeclare(),         {,             return true;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/client/message/AMQMessageDelegate_0_8.java,,665-680,[            super(AMQShortString.valueOf(exchange),,                   null,,                   AMQShortString.valueOf(routingKey),,                   AMQShortString.valueOf(routingKey));,         }, ,         @Override,         public boolean isNameRequired(),         {,             return false;,         }, ,         @Override,         public boolean neverDeclare(),         {,             return true;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getIntImpl,751-751,[                return Integer.valueOf((String) value).intValue();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getLongImpl,787-787,[                return Long.valueOf((String) value).longValue();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getByteImpl,690-690,[                return Byte.valueOf((String) value).byteValue();],,getByteImpl,686-686,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getDoubleImpl,858-858,[                return Double.valueOf((String) value).doubleValue();],,getDoubleImpl,854-854,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getFloatImpl,830-830,[                return Float.valueOf((String) value).floatValue();],,getFloatImpl,826-826,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/AMQPEncodedListMessage.java,getShortImpl,717-717,[                return Short.valueOf((String) value).shortValue();],,getShortImpl,713-713,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/qpid/client/message/AMQPEncodedListMessage.java,<init>,63-63,[        super(delegate, data);],,<init>,64-64,[        if (data != null)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/message/AMQPEncodedListMessageUnitTest.java,testAddObject,67-67,[        m.add("Msg".getBytes());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/message/AbstractAMQMessageDelegate.java,convertToAddressBasedDestination,290-290,[        catch(Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/client/message/AbstractJMSMessageFactory.java,,200-245,[        {,             _bodiesIter = bodies.iterator();,             _currentBuffer = _bodiesIter.next().getPayload();,             _currentPos = 0;,         }, ,         @Override,         public int read() throws IOException,         {,             byte[] buf = new byte[1];,             int size = read(buf);,             if(size == -1),             {,                 throw new EOFException();,             },             else,             {,                 return ((int)buf[0])&0xff;,             },         }, ,         @Override,         public int read(final byte[] dst, final int off, final int len),         {,             while(_currentPos == _currentBuffer.length),             {,                 if(!_bodiesIter.hasNext()),                 {,                     return -1;,                 },                 else,                 {,                     _currentBuffer = _bodiesIter.next().getPayload();,                     _currentPos = 0;,                 },             },             int size = Math.min(len, _currentBuffer.length - _currentPos);,             System.arraycopy(_currentBuffer,_currentPos, dst,off,size);,             _currentPos+=size;,             return size;,         }, ,         @Override,         public void close(),         {,         }],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/client/message/FieldTableSupport.java,convertToFieldTable,42-42,[                ft.setObject(key, props.get(key));],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/qpid/client/message/JMSHeaderAdapter.java,getByte,147-147,[                b = Byte.valueOf(null);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/JMSMapMessage.java,getInt,178-178,[            return Integer.valueOf((String) value).intValue();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/client/message/JMSMapMessage.java,getLong,212-212,[            return Long.valueOf((String) value).longValue();],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/JMSMapMessage.java,getByte,127-127,[            return Byte.valueOf((String) value).byteValue();],,getByte,125-125,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/JMSMapMessage.java,getDouble,280-280,[            return Double.valueOf((String) value).doubleValue();],,getDouble,278-278,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/JMSMapMessage.java,getFloat,257-257,[            return Float.valueOf((String) value).floatValue();],,getFloat,255-255,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/JMSMapMessage.java,getInt,178-178,[            return Integer.valueOf((String) value).intValue();],,getInt,176-176,[        else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/client/message/JMSMapMessage.java,getShort,150-150,[            return Short.valueOf((String) value).shortValue();],,getShort,148-148,[        else if ((value instanceof String) || (value == null))],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/client/messaging/address/QpidExchangeOptions.java,,25-44,[public class QpidExchangeOptions extends HashMap<String,Object> , {	,     public static final String QPID_MSG_SEQUENCE = "qpid.msg_sequence";,     public static final String QPID_INITIAL_VALUE_EXCHANGE = "qpid.ive";,     public static final String QPID_EXCLUSIVE_BINDING = "qpid.exclusive-binding";,    ,     public void setMessageSequencing(),     {,         this.put(QPID_MSG_SEQUENCE, 1);,     },     ,     public void setInitialValueExchange(),     {,         this.put(QPID_INITIAL_VALUE_EXCHANGE, 1);,     },     ,     public void setExclusiveBinding(),     {,         this.put(QPID_EXCLUSIVE_BINDING, 1);,     }],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/client/messaging/address/QpidQueueOptions.java,,25-97,[public class QpidQueueOptions extends HashMap<String,Object> , {	, 	public static final String QPID_MAX_COUNT = "qpid.max_count";,     public static final String QPID_MAX_SIZE = "qpid.max_size";,     public static final String QPID_POLICY_TYPE = "qpid.policy_type";    ,     public static final String QPID_LVQ_KEY = "qpid.LVQ_key";,     public static final String QPID_LAST_VALUE_QUEUE = "qpid.last_value_queue";,     public static final String QPID_LAST_VALUE_QUEUE_NO_BROWSE = "qpid.last_value_queue_no_browse";,     public static final String QPID_QUEUE_EVENT_GENERATION = "qpid.queue_event_generation";, ,     public void validatePolicyType(String type),     {,         if (type == null || ,            !("reject".equals(type) || "flow_to_disk".equals(type) || ,             "ring".equals(type) || "ring_strict".equals(type))),         {,             throw new IllegalArgumentException("Invalid Queue Policy Type" +,                     " should be one of {reject|flow_to_disk|ring|ring_strict}");,         },     },     , 	public void setPolicyType(String s), 	{, 	    validatePolicyType(s);, 	    this.put(QPID_POLICY_TYPE, s);, 	}, ,     public void setMaxCount(Integer i),     {,         this.put(QPID_MAX_COUNT, i);,     },     ,     public void setMaxSize(Integer i),     {,         this.put(QPID_MAX_SIZE, i);,     },     , ,     public void setOrderingPolicy(String s),     {,         if (QpidQueueOptions.QPID_LAST_VALUE_QUEUE.equals(s)),         {,             this.put(QPID_LAST_VALUE_QUEUE, 1);,         },         else if (QpidQueueOptions.QPID_LAST_VALUE_QUEUE_NO_BROWSE.equals(s)),         {,             this.put(QPID_LAST_VALUE_QUEUE_NO_BROWSE,1);,         },         else,         {,             throw new IllegalArgumentException("Invalid Ordering Policy" +,             " should be one of {" + QpidQueueOptions.QPID_LAST_VALUE_QUEUE + "|" + ,             QPID_LAST_VALUE_QUEUE_NO_BROWSE + "}");,         },     },     ,     public void setLvqKey(String key),     {,         this.put(QPID_LVQ_KEY, key);,     },     ,     public void setQueueEvents(String value),     {,         if (value != null &&  (value.equals("1") || value.equals("2"))),         {,             this.put(QPID_QUEUE_EVENT_GENERATION, value);,         },         else,         {,             throw new IllegalArgumentException("Invalid value for " + ,                     QPID_QUEUE_EVENT_GENERATION + " should be one of {1|2}");,         },     }],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testMessagesAreDistributedBetweenConsumersWithLowPrefetch,148-148,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(2).toString());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testPrefetchOneWithAsynchronousTransactedConsumer,71-71,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testPrefetchWindowExpandsOnReceiveTransaction,243-243,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testMessagesAreDistributedBetweenConsumersWithLowPrefetch,148-148,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(2).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testPrefetchOneWithAsynchronousTransactedConsumer,71-71,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,testPrefetchWindowExpandsOnReceiveTransaction,243-243,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/prefetch/PrefetchBehaviourTest.java,onMessage,98-98,[                catch(Exception e)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/client/protocol/AMQProtocolHandler.java,exception,350-350,[            catch (Exception e)],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/protocol/AMQProtocolHandler.java,,361-361,[                _initialConnectionException = cause;],,,262-262,[                        initialConnectionException = _initialConnectionException;],,,265-265,[                    _initialConnectionException = null;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/protocol/AMQProtocolHandler.java,,913-913,[        return _sender;],,,896-896,[        _sender = sender;],,,238-238,[                        _sender.close();],,,578-578,[        _sender.send(buf);],,,581-581,[            _sender.flush();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/protocol/AMQProtocolHandler.java,,908-908,[        return _lastWriteTime;],,,576-576,[        _lastWriteTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/client/protocol/AMQProtocolHandler.java,,784-784,[        return _writtenBytes;],,,577-577,[        _writtenBytes += buf.remaining();],,,598-598,[        _connection.bytesSent(_writtenBytes);],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/client/protocol/AMQProtocolHandler.java,methodBodyReceived,534-534,[            synchronized (_frameListeners)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/client/protocol/AMQProtocolHandler.java,notifyFailoverStarting,443-443,[        synchronized (_frameListeners)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/client/protocol/AMQProtocolHandler.java,propagateExceptionToFrameListeners,424-424,[        synchronized (_frameListeners)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/client/protocol/AMQProtocolHandler.java,writeCommandFrameAndWaitForReply,676-676,[            synchronized (_frameListeners)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/protocol/AMQProtocolHandler.java,received,508-508,[        catch (Exception e)],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/qpid/client/protocol/AMQProtocolHandler.java,blockUntilNotFailingOver,801-801,[                if(!_failoverLatch.await(MAXIMUM_STATE_WAIT_TIME, TimeUnit.MILLISECONDS))],,
CORRECTNESS,IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD,org/apache/qpid/client/protocol/AMQProtocolHandlerTest.java,run,183-183,[                    fail(e.getMessage());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/protocol/AMQProtocolHandlerTest.java,run,180-180,[                catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/protocol/AMQProtocolHandlerTest.java,run,272-272,[                    catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/client/security/DynamicSaslRegistrar.java,parseProperties,202-202,[            catch (Exception ex)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/client/security/DynamicSaslRegistrarTest.java,,94-94,[                                             JCAProvider.QPID_CLIENT_SASL_PROVIDER_INFO){};],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/client/security/JCAProvider.java,,47-72,[    private static final Logger log = LoggerFactory.getLogger(JCAProvider.class);, ,     /**,      * Creates the security provider with a map from SASL mechanisms to implementing factories.,      *,      * @param providerMap The map from SASL mechanims to implementing factory classes.,      */,     public JCAProvider(Map<String, Class<? extends SaslClientFactory>> providerMap),     {,         super(QPID_CLIENT_SASL_PROVIDER_NAME, QPID_CLIENT_SASL_PROVIDER_VERSION, QPID_CLIENT_SASL_PROVIDER_INFO);,         register(providerMap);,     }, ,     /**,      * Registers client factory classes for a map of mechanism names to client factory classes.,      *,      * @param providerMap The map from SASL mechanims to implementing factory classes.,      */,     private void register(Map<String, Class<? extends SaslClientFactory>> providerMap),     {,         for (Map.Entry<String, Class<? extends SaslClientFactory>> me : providerMap.entrySet()),         {,             put( "SaslClientFactory."+me.getKey(), me.getValue().getName());,             log.debug("Recording SASL Client factory for " + me.getKey() + " as " + me.getValue().getName());,         },     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/security/scram/AbstractScramSaslClient.java,calculateClientProof,207-207,[            return finalMessageWithProof.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/ssl/SSLTest.java,verifyExceptionCausesContains,262-262,[        String strace = bout.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/client/ssl/SSLTest.java,verifyExceptionCausesContains,261-261,[        e.printStackTrace(new PrintStream(bout));],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/client/ssl/SSLTest.java,setUp,59-59,[        setSystemProperty("javax.net.debug", "ssl");],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/client/util/ClassLoadingAwareObjectInputStreamTest.java,setUp,40-40,[        ByteArrayOutputStream baos = new ByteArrayOutputStream();],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/qpid/codec/AMQDecoder.java,decodeBuffer,293-293,[                        msg.read(remaining);],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/qpid/configuration/Accessor.java,getBoolean,90-90,[                return null;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/configuration/QpidPropertyTest.java,testIntegerValueReadFromSystemProperty,113-113,[        setTestSystemProperty(_systemPropertyName, Integer.valueOf(expectedValue).toString());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/configuration/QpidPropertyTest.java,testValueIsNullWhenNoDefaultAndNoSystemPropertiesAreSet,89-89,[        String propertyValue = QpidProperty.stringProperty(nullString, _systemPropertyName).get();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/disttest/AbstractRunner.java,getContext,51-51,[        catch (Exception e)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/Benchmark.java,buildTestConfigFrom,254-254,[                testConfig = configReader.readConfig(new InputStreamReader(configStream), testConfigFile.endsWith(".js"));],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/disttest/Benchmark.java,loadProperties,157-157,[            if (inStream != null)],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/disttest/Benchmark.java,runTests,204-204,[            List<ResultsForAllTests> results = new ArrayList<ResultsForAllTests>();],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/disttest/Benchmark.java,loadProperties,141-141,[        InputStream inStream = getClass().getResourceAsStream(jndiConfig);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/Benchmark.java,,74-78,[    {{,         put(JNDI_CONFIG_PROP, JNDI_CONFIG_DEFAULT);,         put(TEST_CONFIG_PROP, "/Benchmark.js");,         put(REPORT_MESSAGE_TOTALS, "false");,     }};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/ClientRunner.java,,81-89,[            {,                 @Override,                 public void run(),                 {,                     LOGGER.info("Starting client " + client.getClientName());,                     client.start();,                     client.waitUntilStopped();,                     LOGGER.info("Stopped client " + client.getClientName());,                 }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/disttest/ConfigFileHelper.java,getTestConfigFiles,51-51,[            for (String configFile : configFiles)],,getTestConfigFiles,41-41,[            final String[] configFiles = configFileOrDirectory.list(new FilenameFilter()],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/ConfigFileHelper.java,,42-47,[            {,                 @Override,                 public boolean accept(File dir, String name),                 {,                     boolean suffixOk = name.endsWith(".json") || name.endsWith(".js");,                     return new File(dir, name).isFile() && suffixOk;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/disttest/ConfigFileHelperTest.java,setUp,39-39,[        _testDir = TestFileUtils.createTestDirectory();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/disttest/ConfigFileHelperTest.java,createDir,62-62,[        dir.mkdir();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/disttest/ConfigFileHelperTest.java,createFile,68-68,[        file.createNewFile();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/ConfigFileTestHelper.java,getConfigFileReader,38-38,[        Reader reader = new InputStreamReader(inputStream);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/disttest/message/Command.java,,37-54,[    {,         this.type = type;,     }, ,     public CommandType getType(),     {,         return type;,     }, ,     public void accept(Visitor visitor),     {,         visitor.visit(this);,     }, ,     @Override,     public String toString(),     {,         return ReflectionToStringBuilder.toString(this, ToStringStyle.SHORT_PREFIX_STYLE);],,
PERFORMANCE,DM_STRING_VOID_CTOR,org/apache/qpid/disttest/VisitorTest.java,testStringVisited,31-31,[        Object argument = new String();],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/qpid/disttest/VisitorTest.java,testStringVisited,36-36,[        assertSame(argument, visitor._string);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/disttest/VisitorTest.java,,87-89,[        {,             super(null);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/disttest/VisitorTest.java,,67-80,[    class TestVisitor extends Visitor,     {,         String _string = null;,         TestCommand _testCommand = null;, ,         public void visit(String string),         {,             _string = string;,         }, ,         public void visit(TestCommand command),         {,             _testCommand = command;,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/charting/chartbuilder/CategoryDataSetBasedChartBuilder.java,,44-76,[        {,             final private DefaultCategoryDataset _dataset = new DefaultCategoryDataset();, ,             @Override,             public void addDataPointToSeries(SeriesDefinition seriesDefinition, SeriesRow row),             {,                 String x = row.dimensionAsString(0);,                 double y = row.dimensionAsDouble(1);,                 _dataset.addValue(y, seriesDefinition.getSeriesLegend(), x);,             }, ,             @Override,             public void beginSeries(SeriesDefinition seriesDefinition),             {,                 // unused,             }, ,             @Override,             public void endSeries(SeriesDefinition seriesDefinition),             {,                 // unused,             }, ,             @Override,             public int getNumberOfDimensions(),             {,                 return 2;,             }, ,             @Override,             public Dataset getPopulatedDataset(),             {,                 return _dataset;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/disttest/charting/chartbuilder/ChartProductionTest.java,,203-234,[        private SeriesRow[] _sampleSeriesRows = SIMPLE_SERIES_ROWS;, ,         public SampleSeriesBuilder(),         {,         }, ,         public SampleSeriesBuilder(SeriesRow[] sampleSeriesRows),         {,             _sampleSeriesRows = sampleSeriesRows;,         }, ,         @Override,         public Dataset build(List<SeriesDefinition> seriesDefinitions),         {,             for (Iterator<SeriesDefinition> iterator = seriesDefinitions.iterator(); iterator.hasNext();),             {,                 SeriesDefinition seriesDefinition = iterator.next();,                 _datasetHolder.beginSeries(seriesDefinition);,                 for(SeriesRow seriesRow : _sampleSeriesRows),                 {,                     _datasetHolder.addDataPointToSeries(seriesDefinition, seriesRow);,                 },                 _datasetHolder.endSeries(seriesDefinition);,             },             return _datasetHolder.getPopulatedDataset();,         }, ,         @Override,         public void setDatasetHolder(DatasetHolder dataPointCallback),         {,             _datasetHolder = dataPointCallback;,         }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/disttest/charting/chartbuilder/ColorFactory.java,getColourFromStaticField,58-58,[            return (Color) Color.class.getField(colourName.toLowerCase()).get(null);],,
I18N,DM_CONVERT_CASE,org/apache/qpid/disttest/charting/chartbuilder/ColorFactory.java,toColour,37-37,[        if (colourName.toLowerCase().startsWith("dark_"))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/charting/chartbuilder/StatisticalBarChartBuilder.java,,53-86,[        {,             private final DefaultStatisticalCategoryDataset _dataset = new DefaultStatisticalCategoryDataset();, ,             @Override,             public void addDataPointToSeries(SeriesDefinition seriesDefinition, SeriesRow row),             {,                 String x = row.dimensionAsString(0);,                 double mean = row.dimensionAsDouble(1);,                 double stdDev = row.dimensionAsDouble(2);,                 _dataset.add(mean, stdDev, seriesDefinition.getSeriesLegend(), x);,             }, ,             @Override,             public void beginSeries(SeriesDefinition seriesDefinition),             {,                 // unused,             }, ,             @Override,             public void endSeries(SeriesDefinition seriesDefinition),             {,                 // unused,             }, ,             @Override,             public int getNumberOfDimensions(),             {,                 return 3;,             }, ,             @Override,             public Dataset getPopulatedDataset(),             {,                 return _dataset;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/charting/chartbuilder/XYDataSetBasedChartBuilder.java,,48-96,[        {,             private final DefaultXYDataset _dataset = new DefaultXYDataset();,             private List<Double[]> _xyPairs = null;, ,             @Override,             public void beginSeries(SeriesDefinition seriesDefinition),             {,                 _xyPairs = new ArrayList<Double[]>();,             }, ,             @Override,             public void addDataPointToSeries(SeriesDefinition seriesDefinition, SeriesRow row),             {,                 double x = row.dimensionAsDouble(0);,                 double y = row.dimensionAsDouble(1);,                 _xyPairs.add(new Double[] {x, y});,             }, ,             @Override,             public void endSeries(SeriesDefinition seriesDefinition),             {,                 double[][] seriesData = listToSeriesDataArray();,                 _dataset.addSeries(seriesDefinition.getSeriesLegend(), seriesData);,             }, ,             @Override,             public int getNumberOfDimensions(),             {,                 return 2;,             }, ,             private double[][] listToSeriesDataArray(),             {,                 double[][] seriesData = new double[2][_xyPairs.size()];,                 int i = 0;,                 for (Iterator<Double[]> iterator = _xyPairs.iterator(); iterator.hasNext();),                 {,                     Double[] xyPair = iterator.next();,                     seriesData[0][i] = xyPair[0];,                     seriesData[1][i] = xyPair[1];,                     i++;,                 },                 return seriesData;,             }, ,             @Override,             public Dataset getPopulatedDataset(),             {,                 return _dataset;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/charting/chartbuilder/XYDataSetBasedChartBuilder.java,,105-116,[        {,             @Override,             public void setSeriesStroke(int seriesIndex, Stroke stroke, JFreeChart targetChart),             {,                 targetChart.getXYPlot().getRenderer().setSeriesStroke(seriesIndex, stroke);,             }, ,             @Override,             public void setSeriesPaint(int seriesIndex, Color colour, JFreeChart targetChart),             {,                 targetChart.getXYPlot().getRenderer().setSeriesPaint(seriesIndex, colour);,             }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreator.java,createChartDefinition,79-79,[            reader = new BufferedReader(new FileReader(file));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreator.java,createFromFileOrDirectory,59-59,[            for (File file : matchingFiles)],,createFromFileOrDirectory,57-57,[            File[] matchingFiles = fileOrDirectory.listFiles(new CHARTDEF_FILE_FILTER());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreator.java,,135-140,[    private final class CHARTDEF_FILE_FILTER implements FileFilter,     {,         @Override,         public boolean accept(File pathname),         {,             return pathname.isFile() && pathname.getName().endsWith(CHARTDEF_FILE_EXTENSION);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreatorTest.java,createTestDefinitionWithin,139-139,[        final FileWriter writer = new FileWriter(chartDef);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreatorTest.java,createTestDefinitionWithin,127-127,[        chartDef.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/disttest/charting/definition/ChartingDefinitionCreatorTest.java,createTestTemporaryDirectory,155-155,[        tmpDir.mkdirs();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/disttest/charting/seriesbuilder/JdbcSeriesBuilder.java,buildDataSetForSingleSeries,90-90,[            ResultSet results = stmt.executeQuery(seriesStatement);],,buildDataSetForSingleSeries,91-91,[            int columnCount = results.getMetaData().getColumnCount();],,buildDataSetForSingleSeries,92-92,[            _datasetHolder.beginSeries(seriesDefinition);],,buildDataSetForSingleSeries,93-93,[            while (results.next())],,buildDataSetForSingleSeries,104-104,[            _datasetHolder.endSeries(seriesDefinition);],,buildDataSetForSingleSeries,112-112,[            if (stmt != null)],,buildDataSetForSingleSeries,123-123,[            if (conn != null)],,buildDataSetForSingleSeries,135-135,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/qpid/disttest/charting/seriesbuilder/JdbcSeriesBuilder.java,buildDataSetForSingleSeries,85-85,[            conn = DriverManager.getConnection(jdbcUrl);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/disttest/charting/seriesbuilder/JdbcSeriesBuilder.java,buildDataSetForSingleSeries,90-90,[            ResultSet results = stmt.executeQuery(seriesStatement);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/seriesbuilder/JdbcSeriesBuilderTest.java,createTestCsvIn,76-76,[        PrintWriter csvWriter = new PrintWriter(new BufferedWriter(new FileWriter(csv)));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/disttest/charting/seriesbuilder/JdbcSeriesBuilderTest.java,createTestTemporaryDirectory,98-98,[        tmpDir.mkdirs();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/writer/ChartWriter.java,writeHtmlSummaryToFileSystem,108-108,[            writer = new BufferedWriter(new FileWriter(summaryFile));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/disttest/charting/writer/ChartWriter.java,writeHtmlSummaryToFileSystem,133-133,[        catch (Exception e)],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/disttest/charting/writer/ChartWriter.java,writeHtmlSummaryToFileSystem,90-90,[        String htmlHeader = String.format(],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/disttest/charting/writer/ChartWriter.java,writeHtmlSummaryToFileSystem,120-120,[                ChartingDefinition def = _chartFilesToChartDef.get(chartFile);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/writer/ChartWriterTest.java,testWriteHtmlSummaryToFileSystemOverwritingExistingFile,95-95,[        String expectedSummaryContent = new Scanner(expectedSummaryFileInputStream).useDelimiter("\\A").next();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/charting/writer/ChartWriterTest.java,writeDummyContentToSummaryFileToEnsureItGetsOverwritten,122-122,[            writer = new FileWriter(summaryFile);],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/disttest/charting/writer/ChartWriterTest.java,setUp,50-50,[        DefaultPieDataset dataset = new DefaultPieDataset();],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/disttest/charting/writer/ChartWriterTest.java,testWriteHtmlSummaryToFileSystemOverwritingExistingFile,94-94,[        InputStream expectedSummaryFileInputStream = getClass().getResourceAsStream("expected-chart-summary.html");],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/disttest/client/Client.java,waitUntilStopped,93-93,[                _latch.await(timeout, TimeUnit.MILLISECONDS);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ConsumerParticipantTest.java,testReceiveMessagesBatchedSynch,138-138,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ConsumerParticipantTest.java,testLatency,185-185,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ConsumerParticipantTest.java,testReceiveOneMessageSynch,106-106,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/disttest/client/MessageProvider.java,,49-49,[    public static final String[] STANDARD_JMS_PROPERTIES = { "correlationID", DELIVERY_MODE,],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/client/MessageProvider.java,,186-190,[        {,             @Override,             public String call() throws Exception,             {,                 return StringUtils.repeat("a", command.getMessageSize());],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/MessageProviderTest.java,testNextMessageWithProperties,91-91,[        listItems.add(new SimplePropertyValue(new Double(2.0)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/client/MessageProviderTest.java,testNextMessageWithProperties,88-88,[        properties.put("test2", new SimplePropertyValue(new Integer(1)));],,testNextMessageWithProperties,89-89,[        properties.put("priority", new SimplePropertyValue(new Integer(2)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/client/MessageProviderTest.java,,60-64,[        {,             @Override,             public String getMessagePayload(CreateProducerCommand command),             {,                 return super.getMessagePayload(command);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/disttest/client/ParticipantExecutorTest.java,,179-185,[    private final class SynchronousExecutor implements Executor,     {,         @Override,         public void execute(Runnable command),         {,             command.run();,         }],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ProducerParticipantTest.java,testSendMessageWithPublishInterval,188-188,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ProducerParticipantTest.java,testOneMessageToSend,116-116,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/disttest/client/ProducerParticipantTest.java,testStartDelay,83-83,[        long totalPayloadSize = PAYLOAD_SIZE_PER_MESSAGE * numberOfMessages;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/disttest/client/property/ListPropertyValue.java,,93-93,[        result = prime * result + _currentIndex;],,,66-66,[        if (_currentIndex >= _items.size())],,,77-77,[        Object nextValue = _items.get(_currentIndex);],,,70-70,[                _currentIndex = 0;],,,78-78,[        _currentIndex++;],,,74-74,[                _currentIndex = _items.size() -1;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/disttest/client/property/ListPropertyValue.java,,111-111,[        if (_cyclic != other._cyclic)],,,94-94,[        result = prime * result + (_cyclic ? 1231 : 1237);],,,55-55,[        _cyclic = cyclic;],,,68-68,[            if (_cyclic)],,,60-60,[        return _cyclic;],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/disttest/client/property/ListPropertyValue.java,equals,119-119,[        return _items.equals(other._items);],,equals,115-115,[        if (_items == null && other._items != null)],,
PERFORMANCE,DM_BOOLEAN_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,setUp,39-39,[        _items.add(new SimplePropertyValue(new Boolean(true)));],,
PERFORMANCE,DM_BOOLEAN_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testGetValue,61-61,[            assertEquals("Unexpected third item", new Boolean(true), _generator.getValue());],,
PERFORMANCE,DM_BOOLEAN_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testNonCyclicGetValue,79-79,[        assertEquals("Unexpected third item", new Boolean(true), _generator.getValue());],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,setUp,38-38,[        _items.add(new SimplePropertyValue(new Double(2.1)));],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testGetValue,60-60,[            assertEquals("Unexpected second item", new Double(2.1), _generator.getValue());],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testNonCyclicGetValue,78-78,[        assertEquals("Unexpected second item", new Double(2.1), _generator.getValue());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,setUp,37-37,[        _items.add(new SimplePropertyValue(new Integer(1)));],,setUp,43-43,[        innerListItems.add(new SimplePropertyValue(new Integer(2)));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testGetValue,59-59,[            assertEquals("Unexpected first item", new Integer(1), _generator.getValue());],,testGetValue,68-68,[                assertEquals("Unexpected forth item", new Integer(2), _generator.getValue());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/client/property/ListPropertyValueTest.java,testNonCyclicGetValue,77-77,[        assertEquals("Unexpected first item", new Integer(1), _generator.getValue());],,testNonCyclicGetValue,81-81,[        assertEquals("Unexpected fifth item", new Integer(2), _generator.getValue());],,testNonCyclicGetValue,83-83,[        assertEquals("Unexpected sevens item", new Integer(2), _generator.getValue());],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/disttest/client/property/NumericGeneratedPropertySupport.java,,28-28,[    public static final Class<?>[] SUPPORTED_TYPES = { double.class, float.class, int.class, long.class, short.class,],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/disttest/client/property/NumericGeneratedPropertySupport.java,equals,172-172,[        else if (!_type.equals(other._type))],,equals,168-168,[        if (_type == null && other._type != null)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/disttest/client/property/PropertyValueFactoryTest.java,testCreateNonExistingPropertyValue,69-69,[        catch (Exception e)],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/property/RandomPropertyValueTest.java,testGetters,39-39,[        assertEquals("Unexpected upper boundary", new Double(20.0), _generator.getUpper());],,testGetters,40-40,[        assertEquals("Unexpected lower boundary", new Double(10.0), _generator.getLower());],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/disttest/client/property/RangePropertyValue.java,,121-121,[        if (Double.doubleToLongBits(_currentValue) != Double.doubleToLongBits(other._currentValue)],,,97-97,[        temp = Double.doubleToLongBits(_currentValue);],,,65-65,[        if (_currentValue < lower)],,,69-69,[        else if (_currentValue > upper)],,,67-67,[            _currentValue = lower;],,,80-80,[        result = _currentValue;],,,81-81,[        _currentValue += _step;],,,77-77,[                _currentValue = upper;],,,73-73,[                _currentValue = lower;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/disttest/client/property/RangePropertyValue.java,,122-122,[                || Double.doubleToLongBits(_step) != Double.doubleToLongBits(other._step) || _cyclic != other._cyclic)],,,99-99,[        result = prime * result + (_cyclic ? 1231 : 1237);],,,51-51,[        _cyclic = cyclic;],,,71-71,[            if (_cyclic)],,,46-46,[        return _cyclic;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/disttest/client/property/RangePropertyValue.java,,121-121,[        if (Double.doubleToLongBits(_currentValue) != Double.doubleToLongBits(other._currentValue)],,,122-122,[                || Double.doubleToLongBits(_step) != Double.doubleToLongBits(other._step) || _cyclic != other._cyclic)],,,100-100,[        temp = Double.doubleToLongBits(_step);],,,41-41,[        return _step;],,,56-56,[        _step = step;],,,81-81,[        _currentValue += _step;],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/disttest/client/property/RangePropertyValueTest.java,testGetters,40-40,[        assertEquals("Unexpected upper boundary", new Double(10.0), _generator.getUpper());],,testGetters,41-41,[        assertEquals("Unexpected lower boundary", new Double(0.0), _generator.getLower());],,testGetters,42-42,[        assertEquals("Unexpected step", new Double(2.0), _generator.getStep());],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/disttest/client/property/SimplePropertyValue.java,equals,76-76,[        return _value.equals(other._value);],,equals,72-72,[        if (_value == null && other._value != null)],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/client/property/SimplePropertyValueTest.java,testGetValue,27-27,[        SimplePropertyValue value = new SimplePropertyValue(new Integer(1));],,testGetValue,28-28,[        assertEquals("Unexpected value", new Integer(1), value.getValue());],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/disttest/client/utils/ExecutorWithNoLimitsTest.java,testCallableThrowsException,55-55,[        catch (Exception e)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/disttest/client/utils/ExecutorWithTimeLimitTest.java,testCallableThrowsException,81-81,[        catch (Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/client/utils/ExecutorWithTimeLimitTest.java,,112-117,[        {,             @Override,             public Void call() throws Exception,             {,                 Thread.sleep(TIMEOUT * 2);,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/controller/TestRunnerTest.java,,237-242,[        {,             @Override,             public void run(),             {,                 runner.processParticipantResult(result);,             }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/controller/config/ConfigReader.java,getConfigReader,76-76,[            reader = new FileReader(fileName);],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/disttest/controller/config/ConfigReaderTest.java,setUp,38-38,[        ConfigReader configReader = new ConfigReader();],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/disttest/controller/config/IterationValue.java,getIterationPropertyValuesWithoutUnderscores,73-73,[            String propertyValue = _iterationPropertyValuesWithUnderscores.get(propertyNameWithUnderscore);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/controller/config/JavaScriptConfigEvaluator.java,evaluateJavaScript,70-70,[            engine.eval(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("json2.js")));],,evaluateJavaScript,71-71,[            engine.eval(new InputStreamReader(getClass().getClassLoader().getResourceAsStream("test-utils.js")));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/controller/config/JavaScriptConfigEvaluator.java,evaluateJavaScript,50-50,[            fileReader = new FileReader(fileName);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/controller/config/JavaScriptConfigEvaluatorTest.java,testEvaluateJavaScriptWithReader,67-67,[        FileReader fileReader = new FileReader(jsFilePath);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/disttest/controller/config/JavaScriptConfigEvaluatorTest.java,testEvaluateJavaScriptWithReader,67-67,[        FileReader fileReader = new FileReader(jsFilePath);],,testEvaluateJavaScriptWithReader,68-68,[        String rawConfig = new JavaScriptConfigEvaluator().evaluateJavaScript(fileReader);],,testEvaluateJavaScriptWithReader,70-70,[        Object configAsObject = getObject(rawConfig);],,testEvaluateJavaScriptWithReader,73-73,[        assertEquals("Unexpected number of countries", 2, getPropertyAsList(configAsObject, "_countries").size());],,testEvaluateJavaScriptWithReader,75-75,[        Object country0 = getProperty(configAsObject, "_countries.[0]");],,testEvaluateJavaScriptWithReader,76-76,[        assertEquals("Unexpected country name", "Country", getProperty(country0, "_name"));],,testEvaluateJavaScriptWithReader,77-77,[        assertEquals("Unexpected country iteration number", 0, getPropertyAsInt(country0, "_iterationNumber"));],,testEvaluateJavaScriptWithReader,79-79,[        assertEquals("Unexpected number of regions", 2, getPropertyAsList(country0, "_regions").size());],,testEvaluateJavaScriptWithReader,81-81,[        assertEquals("Unexpected region name", "repeatingRegion0", getProperty(country0, "_regions.[0]._name"));],,testEvaluateJavaScriptWithReader,82-82,[        assertEquals("Unexpected region name", "repeatingRegion1", getProperty(country0, "_regions.[1]._name"));],,testEvaluateJavaScriptWithReader,84-84,[        assertEquals("Unexpected iterating attribute", "0", getProperty(country0, "_regions.[0]._towns.[0]._iteratingAttribute"));],,testEvaluateJavaScriptWithReader,86-86,[        Object country1 = getProperty(configAsObject, "_countries.[1]");],,testEvaluateJavaScriptWithReader,87-87,[        assertEquals("Unexpected country iteration number", 1, getPropertyAsInt(country1, "_iterationNumber"));],,testEvaluateJavaScriptWithReader,88-88,[        assertEquals("Unexpected iterating attribute", "1", getProperty(country1, "_regions.[0]._towns.[0]._iteratingAttribute"));],,testEvaluateJavaScriptWithReader,89-89,[    }],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/disttest/controller/config/ParticipantConfig.java,getOverriddenDuration,87-87,[                long overriddenDuration = Long.valueOf(overriddenDurationString);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/controller/config/ParticipantConfigTest.java,,36-36,[        {],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/disttest/controller/config/ProducerConfig.java,getOverriddenMessageSize,108-108,[                int overriddenMessageSize = Integer.valueOf(overriddenMessageSizeString);],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/qpid/disttest/db/ResultsDbWriter.java,writeParticipantResult,398-398,[            statement = connection.prepareStatement(sqlTemplate);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/disttest/db/ResultsDbWriterTest.java,assertResultsAreInDb,139-139,[        ResultSet rs = statement.executeQuery(],,assertResultsAreInDb,145-145,[            rs.next();],,assertResultsAreInDb,146-146,[            assertEquals(participantResult.getTestName(), rs.getString(TEST_NAME.getDisplayName()));],,assertResultsAreInDb,147-147,[            assertEquals(participantResult.getIterationNumber(), rs.getInt(ITERATION_NUMBER.getDisplayName()));],,assertResultsAreInDb,148-148,[            assertEquals(participantResult.getParticipantName(), rs.getString(PARTICIPANT_NAME.getDisplayName()));],,assertResultsAreInDb,149-149,[            assertEquals(participantResult.getThroughput(), rs.getDouble(THROUGHPUT.getDisplayName()));],,assertResultsAreInDb,150-150,[            assertEquals(expectedRunId, rs.getString(ResultsDbWriter.RUN_ID));],,assertResultsAreInDb,151-151,[            assertEquals(new Timestamp(_dummyTimestamp), rs.getTimestamp(ResultsDbWriter.INSERTED_TIMESTAMP));],,assertResultsAreInDb,155-155,[            connection.close();],,assertResultsAreInDb,156-156,[        }],,assertResultsAreInDb,157-157,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/disttest/db/ResultsDbWriterTest.java,assertResultsAreInDb,138-138,[        Statement statement = connection.createStatement();],,assertResultsAreInDb,139-139,[        ResultSet rs = statement.executeQuery(],,assertResultsAreInDb,140-140,[                "SELECT * FROM results WHERE testName='" + participantResult.getTestName() +],,assertResultsAreInDb,145-145,[            rs.next();],,assertResultsAreInDb,146-146,[            assertEquals(participantResult.getTestName(), rs.getString(TEST_NAME.getDisplayName()));],,assertResultsAreInDb,147-147,[            assertEquals(participantResult.getIterationNumber(), rs.getInt(ITERATION_NUMBER.getDisplayName()));],,assertResultsAreInDb,148-148,[            assertEquals(participantResult.getParticipantName(), rs.getString(PARTICIPANT_NAME.getDisplayName()));],,assertResultsAreInDb,149-149,[            assertEquals(participantResult.getThroughput(), rs.getDouble(THROUGHPUT.getDisplayName()));],,assertResultsAreInDb,150-150,[            assertEquals(expectedRunId, rs.getString(ResultsDbWriter.RUN_ID));],,assertResultsAreInDb,151-151,[            assertEquals(new Timestamp(_dummyTimestamp), rs.getTimestamp(ResultsDbWriter.INSERTED_TIMESTAMP));],,assertResultsAreInDb,155-155,[            connection.close();],,assertResultsAreInDb,156-156,[        }],,assertResultsAreInDb,157-157,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/qpid/disttest/db/ResultsDbWriterTest.java,assertResultsAreInDb,138-138,[        Statement statement = connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/qpid/disttest/db/ResultsDbWriterTest.java,assertResultsAreInDb,137-137,[        Connection connection = DriverManager.getConnection(url);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/disttest/db/ResultsDbWriterTest.java,assertResultsAreInDb,139-139,[        ResultSet rs = statement.executeQuery(],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/jms/ClientJmsDelegate.java,calculatePayloadSizeFrom,632-632,[                return ((TextMessage) message).getText().getBytes().length;],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/disttest/jms/ClientJmsDelegate.java,tearDownTest,543-543,[            Session session = _testSubscriptions.get(subscription);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/disttest/jms/ClientJmsDelegate.java,,118-123,[            {,                 @Override,                 public void onMessage(final Message message),                 {,                     client.processInstruction(JmsMessageAdaptor.messageToCommand(message));,                 }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/disttest/jms/QpidQueueCreator.java,createQueue,155-155,[        catch (Exception e)],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/disttest/message/JsonHandlerTest.java,testGeneratorDesrialization,77-77,[            assertEquals("Unexpected generator value", new Integer(i), generator.getValue());],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/qpid/disttest/message/JsonHandlerTest.java,equals,139-139,[            return EqualsBuilder.reflectionEquals(this, obj);],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/qpid/disttest/message/JsonHandlerTest.java,equals,115-115,[            return EqualsBuilder.reflectionEquals(this, obj);],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/qpid/disttest/message/JsonHandlerTest.java,equals,170-179,[            if (obj == null || !(obj instanceof TestCommand)),             {,                 return false;,             },             TestCommand other = (TestCommand)obj;,             if (_messageProperties == null && other._messageProperties != null ),             {,                 return false;,             },             return _messageProperties.equals(other._messageProperties);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH,org/apache/qpid/disttest/message/JsonHandlerTest.java,equals,179-179,[            return _messageProperties.equals(other._messageProperties);],,equals,175-175,[            if (_messageProperties == null && other._messageProperties != null )],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/results/ResultsCsvWriter.java,writeResultsToOutputFile,81-81,[            writer = new FileWriter(outputFile);],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/disttest/results/ResultsFileWriterTest.java,setUp,47-47,[        _resultsFileWriter.setCsvFormater(_csvFormater);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/disttest/results/aggregation/SeriesStatisticsTest.java,,30-30,[    public static Collection<Long> SERIES = Arrays.asList(new Long[] { 2l, 4l, 4l, 4l, 5l, 5l, 7l, 9l, 5l });],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/disttest/results/aggregation/TestResultAggregatorTest.java,testAggregateResultsForConsumerWithLatencyResults,153-153,[        aggregatedTestResult.getAllConsumerParticipantResult().getTotalPayloadProcessed();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/disttest/results/aggregation/TestResultAggregatorTest.java,testAggregateResultsForTwoConsumerAndOneProducer,104-104,[        aggregatedTestResult.getAllConsumerParticipantResult().getTotalPayloadProcessed();],,
PERFORMANCE,UM_UNNECESSARY_MATH,org/apache/qpid/disttest/results/aggregation/TestResultAggregatorTest.java,testAggregateResultsForConsumerWithLatencyResults,173-173,[        int expectedThroughtput = (int)Math.round(NUMBER_OF_MESSAGES_PRODUCED * 1000.0d /(CONSUMER2_ENDDATE - PRODUCER_STARTDATE));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/disttest/results/formatting/CSVFormatterTest.java,readCsvOutputFileAsString,52-52,[        BufferedReader br = new BufferedReader(new InputStreamReader(is));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/qpid/disttest/results/formatting/CSVFormatterTest.java,readCsvOutputFileAsString,47-47,[        InputStream is = getClass().getResourceAsStream(filename);],,readCsvOutputFileAsString,48-48,[        assertNotNull(is);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/disttest/results/formatting/CSVFormatterTest.java,readCsvOutputFileAsString,52-52,[        BufferedReader br = new BufferedReader(new InputStreamReader(is));],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/disttest/results/formatting/CSVFormatterTest.java,readCsvOutputFileAsString,47-47,[        InputStream is = getClass().getResourceAsStream(filename);],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/qpid/disttest/results/formatting/CSVOrderParticipantResultComparator.java,,30-52,[public class CSVOrderParticipantResultComparator implements Comparator<ParticipantResult>, {,     // TODO yuk,     private static final Map<Class<? extends ParticipantResult>, Integer> TYPE_CODES = new HashMap<Class<? extends ParticipantResult>, Integer>();,     static {,         TYPE_CODES.put(ProducerParticipantResult.class, 0);,         TYPE_CODES.put(ConsumerParticipantResult.class, 1);,         TYPE_CODES.put(ParticipantResult.class, 2);,     }, ,     @Override,     public int compare(ParticipantResult left, ParticipantResult right),     {,         return new CompareToBuilder(),             .append(getTypeCode(left), getTypeCode(right)),             .append(left.getParticipantName(), right.getParticipantName()),             .toComparison();,     }, , ,     private int getTypeCode(ParticipantResult participantResult),     {,         return TYPE_CODES.get(participantResult.getClass());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/dtx/XidImpl.java,<init>,123-123,[            DataInputStream input = new DataInputStream(new ByteArrayInputStream(xid.getBytes()));],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/example/Drain.java,<init>,75-75,[        if (containsOp(TIMEOUT)) { timeout = Integer.parseInt(getOp(TIMEOUT))*1000; }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/example/Hello.java,runTest,78-78,[        catch (Exception exp) ],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/example/Hello.java,runTest,53-53,[        try (InputStream resourceAsStream = this.getClass().getResourceAsStream("hello.properties"))],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/example/OptionParser.java,parseOpts,163-163,[                    System.exit(0);],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/example/OptionParser.java,printHelp,132-132,[        System.exit(0);],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/example/OptionParser.java,printHelp,111-111,[        System.out.println(String.format("%s\n",usage));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/example/OptionParser.java,printHelp,112-112,[        System.out.println(String.format("%s\n",desc));],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/example/OptionParser.java,printHelp,113-113,[        System.out.println(String.format("%s\n","Options:"));],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/example/jmxexample/QueueInformation.java,processCommandLine,219-219,[                System.exit(1);],,processCommandLine,240-240,[                System.exit(1);],,processCommandLine,246-246,[            System.exit(1);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/qpid/example/jmxexample/QueueInformation.java,getAttributeList,174-190,[        if (_attribInfo == null),         {,             MBeanAttributeInfo[] allAttribs = ((MBeanInfo) _mbsc.getMBeanInfo((ObjectName) name)).getAttributes();, ,             if (_attribNames != null && _attribNames.size() != 0),             {,                 LinkedList<MBeanAttributeInfo> tmpList = new LinkedList<MBeanAttributeInfo>();, ,                 for (MBeanAttributeInfo attribute : allAttribs),                 {,                     if (_attribNames.contains(attribute.getName())),                     {,                         tmpList.add(attribute);,                     },                 }, ,                 _attribInfo = tmpList.toArray(new MBeanAttributeInfo[tmpList.size()]);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/example/jmxexample/QueueInformation.java,getDetails,317-317,[            catch (Exception e)],,
MT_CORRECTNESS,STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE,org/apache/qpid/example/jmxexample/QueueInformation.java,getDetails,266-266,[                System.out.print(_formatter.format(todaysDate));],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/qpid/filter/ComparisonExpression.java,matches,545-545,[        return (object != null) && (object == Boolean.TRUE);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/qpid/filter/ComparisonExpression.java,matches,157-157,[            return (object != null) && (object == Boolean.TRUE);],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/filter/ConstantExpression.java,createFloat,110-110,[        Number value = new Double(text);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/qpid/filter/ConstantExpression.java,matches,45-45,[            return (object != null) && (object == Boolean.TRUE);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/qpid/filter/LogicExpression.java,matches,50-50,[        return (object != null) && (object == Boolean.TRUE);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/filter/PropertyExpression.java,,48-52,[                                     {,                                          public Object evaluate(FilterableMessage message),                                          {,                                              //TODO,                                              return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/filter/PropertyExpression.java,,74-77,[                                     {,                                          public Object evaluate(FilterableMessage message),                                          {,                                              return message.isRedelivered();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/qpid/filter/UnaryExpression.java,matches,79-79,[            return (object != null) && (object == Boolean.TRUE);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/qpid/filter/selector/ParseException.java,initialise,138-138,[      retval += " \"";],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParser.java,JmsSelector,74-76,[    Expression left=null;,     left = orExpression();,         {if (true) return asBooleanExpression(left);}],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParser.java,ReInit,1112-1113,[     ReInit(stream, null);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParser.java,ReInit,1116-1120,[    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); },     token_source.ReInit(jj_input_stream);,     token = new Token();,     jj_ntk = -1;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParser.java,ReInit,1132-1136,[    jj_input_stream.ReInit(stream, 1, 1);,     token_source.ReInit(jj_input_stream);,     token = new Token();,     jj_ntk = -1;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParser.java,ReInit,1147-1150,[    token_source = tm;,     token = new Token();,     jj_ntk = -1;,   }],,
MALICIOUS_CODE,MS_OOI_PKGPROTECT,org/apache/qpid/filter/selector/SelectorParserConstants.java,,81-81,[  String[] tokenImage = {],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,jjMoveStringLiteralDfa4_0,370-375,[         if ((active0 & 0x20000L) != 0L),          {,             jjmatchedKind = 17;,             jjmatchedPos = 4;,          },          return jjMoveStringLiteralDfa5_0(active0, 0x800L);],,jjMoveStringLiteralDfa4_0,379-384,[         if ((active0 & 0x20000L) != 0L),          {,             jjmatchedKind = 17;,             jjmatchedPos = 4;,          },          return jjMoveStringLiteralDfa5_0(active0, 0x800L);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,jjMoveStringLiteralDfa4_0,377-377,[         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);],,jjMoveStringLiteralDfa4_0,386-386,[         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,jjMoveStringLiteralDfa5_0,403-408,[         if ((active0 & 0x2000L) != 0L),          {,             jjmatchedKind = 13;,             jjmatchedPos = 5;,          },          return jjMoveStringLiteralDfa6_0(active0, 0x800L);],,jjMoveStringLiteralDfa5_0,410-415,[         if ((active0 & 0x2000L) != 0L),          {,             jjmatchedKind = 13;,             jjmatchedPos = 5;,          },          return jjMoveStringLiteralDfa6_0(active0, 0x800L);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,jjMoveStringLiteralDfa6_0,432-435,[         if ((active0 & 0x800L) != 0L),          {,             jjmatchedKind = 11;,             jjmatchedPos = 6;],,jjMoveStringLiteralDfa6_0,439-442,[         if ((active0 & 0x800L) != 0L),          {,             jjmatchedKind = 11;,             jjmatchedPos = 6;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,,866-866,[public static final String[] jjstrLiteralImages = {],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,,873-873,[public static final String[] lexStateNames = {],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,ReInit,905-909,[   jjmatchedPos = jjnewStateCnt = 0;,    curLexState = defaultLexState;,    input_stream = stream;,    ReInitRounds();, }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,ReInit,921-923,[   ReInit(stream);,    SwitchTo(lexState);, }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,SwitchTo,928-932,[   if (lexState >= 1 || lexState < 0),       throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);,    else,       curLexState = lexState;, }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,ReInitRounds,913-916,[   jjround = 0x80000001;,    for (i = 48; i-- > 0;),       jjrounds[i] = 0x80000000;, }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,jjStopAtPos,45-47,[   jjmatchedKind = kind;,    jjmatchedPos = pos;,    return pos + 1;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/filter/selector/SelectorParserTokenManager.java,,42-42,[  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/filter/selector/SimpleCharStream.java,<init>,343-343,[    this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/filter/selector/SimpleCharStream.java,<init>,336-336,[    this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,383-383,[    ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,376-376,[    ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,BeginToken,156-160,[    tokenBegin = -1;,     char c = readChar();,     tokenBegin = bufpos;, ,     return c;],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,Done,439-442,[    buffer = null;,     bufline = null;,     bufcolumn = null;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ExpandBuff,62-107,[    char[] newbuffer = new char[bufsize + 2048];,     int newbufline[] = new int[bufsize + 2048];,     int newbufcolumn[] = new int[bufsize + 2048];, ,     try,     {,       if (wrapAround),       {,         System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);,         System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);,         buffer = newbuffer;, ,         System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);,         System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);,         bufline = newbufline;, ,         System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);,         System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);,         bufcolumn = newbufcolumn;, ,         maxNextCharInd = (bufpos += (bufsize - tokenBegin));,       },       else,       {,         System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);,         buffer = newbuffer;, ,         System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);,         bufline = newbufline;, ,         System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);,         bufcolumn = newbufcolumn;, ,         maxNextCharInd = (bufpos -= tokenBegin);,       },     },     catch (Throwable t),     {,       throw new Error(t.getMessage());,     }, , ,     bufsize += 2048;,     available = bufsize;,     tokenBegin = 0;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,FillBuff,111-149,[    if (maxNextCharInd == available),     {,       if (available == bufsize),       {,         if (tokenBegin > 2048),         {,           bufpos = maxNextCharInd = 0;,           available = tokenBegin;,         },         else if (tokenBegin < 0),           bufpos = maxNextCharInd = 0;,         else,           ExpandBuff(false);,       },       else if (available > tokenBegin),         available = bufsize;,       else if ((tokenBegin - available) < 2048),         ExpandBuff(true);,       else,         available = tokenBegin;,     }, ,     int i;,     try {,       if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1),       {,         inputStream.close();,         throw new java.io.IOException();,       },       else,         maxNextCharInd += i;,       return;,     },     catch(java.io.IOException e) {,       --bufpos;,       backup(0);,       if (tokenBegin == -1),         tokenBegin = bufpos;,       throw e;],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,GetImage,412-415,[    if (bufpos >= tokenBegin),       return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);,     else,       return new String(buffer, tokenBegin, bufsize - tokenBegin) +],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,GetSuffix,422-433,[    char[] ret = new char[len];, ,     if ((bufpos + 1) >= len),       System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);,     else,     {,       System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,,                                                         len - bufpos - 1);,       System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);,     }, ,     return ret;],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,395-396,[    ReInit(dstream, 1, 1, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,407-408,[    ReInit(dstream, startline, startcolumn, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,383-384,[    ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,389-390,[    ReInit(dstream, encoding, 1, 1, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,401-402,[    ReInit(dstream, encoding, startline, startcolumn, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,376-377,[    ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,330-331,[    ReInit(dstream, 1, 1, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,324-325,[    ReInit(dstream, startline, startcolumn, 4096);,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,ReInit,304-318,[    inputStream = dstream;,     line = startline;,     column = startcolumn - 1;, ,     if (buffer == null || buffersize != buffer.length),     {,       available = bufsize = buffersize;,       buffer = new char[buffersize];,       bufline = new int[buffersize];,       bufcolumn = new int[buffersize];,     },     prevCharIsLF = prevCharIsCR = false;,     tokenBegin = inBuf = maxNextCharInd = 0;,     bufpos = -1;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/SimpleCharStream.java,UpdateLineColumn,165-201,[    column++;, ,     if (prevCharIsLF),     {,       prevCharIsLF = false;,       line += (column = 1);,     },     else if (prevCharIsCR),     {,       prevCharIsCR = false;,       if (c == '\n'),       {,         prevCharIsLF = true;,       },       else,         line += (column = 1);,     }, ,     switch (c),     {,       case '\r' :,         prevCharIsCR = true;,         break;,       case '\n' :,         prevCharIsLF = true;,         break;,       case '\t' :,         column--;,         column += (tabSize - (column % tabSize));,         break;,       default :,         break;,     }, ,     bufline[bufpos] = line;,     bufcolumn[bufpos] = column;,   }],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/qpid/filter/selector/TokenMgrError.java,LexicalError,129-133,[    return("Lexical error at line " +,           errorLine + ", column " +,           errorColumn + ".  Encountered: " +,           (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar + "), ") +,           "after : \"" + addEscapes(errorAfter) + "\"");],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/qpid/framing/AMQDataBlockDecoder.java,decodable,59-59,[        in.skip(1 + 2);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/AMQFrame.java,,37-126,[    {,         _channel = channel;,         _bodyFrame = bodyFrame;,     }, ,     public AMQFrame(final MarkableDataInput in, final int channel, final long bodySize, final BodyFactory bodyFactory) throws AMQFrameDecodingException, IOException,     {,         this._channel = channel;,         this._bodyFrame = bodyFactory.createBody(in,bodySize);,     }, ,     public long getSize(),     {,         return 1 + 2 + 4 + _bodyFrame.getSize() + 1;,     }, ,     public static final int getFrameOverhead(),     {,         return 1 + 2 + 4 + 1;,     }, , ,     public void writePayload(DataOutput buffer) throws IOException,     {,         buffer.writeByte(_bodyFrame.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, _channel);,         EncodingUtils.writeUnsignedInteger(buffer, _bodyFrame.getSize());,         _bodyFrame.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);,     }, ,     public final int getChannel(),     {,         return _channel;,     }, ,     public final AMQBody getBodyFrame(),     {,         return _bodyFrame;,     }, ,     public String toString(),     {,         return "Frame channelId: " + _channel + ", bodyFrame: " + String.valueOf(_bodyFrame);,     }, ,     public static void writeFrame(DataOutput buffer, final int channel, AMQBody body) throws IOException,     {,         buffer.writeByte(body.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body.getSize());,         body.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);, ,     }, ,     public static void writeFrames(DataOutput buffer, final int channel, AMQBody body1, AMQBody body2) throws IOException,     {,         buffer.writeByte(body1.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body1.getSize());,         body1.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);,         buffer.writeByte(body2.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body2.getSize());,         body2.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);, ,     }, ,     public static void writeFrames(DataOutput buffer, final int channel, AMQBody body1, AMQBody body2, AMQBody body3) throws IOException,     {,         buffer.writeByte(body1.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body1.getSize());,         body1.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);,         buffer.writeByte(body2.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body2.getSize());,         body2.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);,         buffer.writeByte(body3.getFrameType());,         EncodingUtils.writeUnsignedShort(buffer, channel);,         EncodingUtils.writeUnsignedInteger(buffer, body3.getSize());,         body3.writePayload(buffer);,         buffer.writeByte(FRAME_END_BYTE);, ,     }],,
BAD_PRACTICE,RV_NEGATING_RESULT_OF_COMPARETO,org/apache/qpid/framing/AMQShortString.java,compareTo,573-573,[                return -name.compareTo(this);],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/framing/AMQType.java,toNativeValue,538-538,[                return Byte.valueOf((String) value);],,toNativeValue,536-536,[            else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/framing/AMQType.java,toNativeValue,577-577,[                return Short.valueOf((String) value);],,toNativeValue,575-575,[            else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/framing/AMQType.java,toNativeValue,620-620,[                return Integer.valueOf((String) value);],,toNativeValue,618-618,[            else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/framing/AMQType.java,toNativeValue,701-701,[                return Float.valueOf((String) value);],,toNativeValue,699-699,[            else if ((value instanceof String) || (value == null))],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/qpid/framing/AMQType.java,toNativeValue,740-740,[                return Double.valueOf((String) value);],,toNativeValue,738-738,[            else if ((value instanceof String) || (value == null))],,
PERFORMANCE,BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION,org/apache/qpid/framing/AMQType.java,writeValueImpl,136-136,[            byte places = new Integer(bd.scale()).byteValue();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/framing/AMQType.java,writeValueImpl,136-136,[            byte places = new Integer(bd.scale()).byteValue();],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/qpid/framing/AMQTypeMap.java,,28-28,[    public static final Map<Byte, AMQType> _reverseTypeMap = new HashMap<Byte, AMQType>();],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/qpid/framing/BasicContentHeaderProperties.java,decode,357-357,[            buffer.skipBytes((int)length);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/CompositeAMQDataBlock.java,,32-76,[    {,         _blocks = blocks;,     }, , ,     public AMQDataBlock[] getBlocks(),     {,         return _blocks;,     }, , ,     public long getSize(),     {,         long frameSize = 0;,         for (int i = 0; i < _blocks.length; i++),         {,             frameSize += _blocks[i].getSize();,         },         return frameSize;,     }, ,     public void writePayload(DataOutput buffer) throws IOException,     {,         for (int i = 0; i < _blocks.length; i++),         {,             _blocks[i].writePayload(buffer);,         },     }, ,     public String toString(),     {,         if (_blocks == null),         {,             return "No blocks contained in composite frame";,         },         else,         {,             StringBuilder buf = new StringBuilder(this.getClass().getName());,             buf.append("{");,             for (int i = 0 ; i < _blocks.length; i++),             {,                 buf.append(" ").append(i).append("=[").append(_blocks[i].toString()).append("]");,             },             buf.append("}");,             return buf.toString();],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/qpid/framing/ContentBody.java,populateFromBuffer,80-80,[            buffer.read(getPayload());],,
MALICIOUS_CODE,MS_EXPOSE_REP,org/apache/qpid/framing/EncodingUtils.java,readBooleans,624-624,[            return ALL_FALSE_ARRAY;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/framing/EncodingUtils.java,readBytes,937-937,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/framing/EncodingUtils.java,readLongstr,728-728,[            return null;],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/qpid/framing/FieldTable.java,getBoolean,222-222,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/framing/FieldTable.java,getBytes,389-389,[            return null;],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/qpid/framing/HeartbeatBody.java,<init>,45-45,[            buffer.skip(size);],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/qpid/framing/HeartbeatBody.java,populateFromBuffer,74-74,[            buffer.skip(size);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/framing/ProtocolInitiation.java,toString,230-230,[        StringBuffer buffer = new StringBuffer(new String(_protocolHeader));],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/ProtocolInitiation.java,,35-235,[    private static final byte[] AMQP_HEADER = new byte[]{(byte)'A',(byte)'M',(byte)'Q',(byte)'P'};, ,     private static final byte CURRENT_PROTOCOL_CLASS = 1;,     private static final byte TCP_PROTOCOL_INSTANCE = 1;, ,     private final byte[] _protocolHeader;,     private final byte _protocolClass;,     private final byte _protocolInstance;,     private final byte _protocolMajor;,     private final byte _protocolMinor;, ,     public ProtocolInitiation(byte[] protocolHeader, byte protocolClass, byte protocolInstance, byte protocolMajor, byte protocolMinor),     {,         _protocolHeader = protocolHeader;,         _protocolClass = protocolClass;,         _protocolInstance = protocolInstance;,         _protocolMajor = protocolMajor;,         _protocolMinor = protocolMinor;,     },     ,     public ProtocolInitiation(ProtocolVersion pv),     {,         this(AMQP_HEADER,,              pv.equals(ProtocolVersion.v0_91) ? 0 : CURRENT_PROTOCOL_CLASS,,              pv.equals(ProtocolVersion.v0_91) ? 0 : TCP_PROTOCOL_INSTANCE,,              pv.equals(ProtocolVersion.v0_91) ? 9 : pv.getMajorVersion(),,              pv.equals(ProtocolVersion.v0_91) ? 1 : pv.getMinorVersion());,     }, ,     public ProtocolInitiation(MarkableDataInput in) throws IOException,     {,         _protocolHeader = new byte[4];,         in.read(_protocolHeader);, ,         _protocolClass = in.readByte();,         _protocolInstance = in.readByte();,         _protocolMajor = in.readByte();,         _protocolMinor = in.readByte();,     }, ,     public long getSize(),     {,         return 4 + 1 + 1 + 1 + 1;,     }, ,     public void writePayload(DataOutput buffer) throws IOException,     {, ,         buffer.write(_protocolHeader);,         buffer.write(_protocolClass);,         buffer.write(_protocolInstance);,         buffer.write(_protocolMajor);,         buffer.write(_protocolMinor);,     }, ,     public boolean equals(Object o),     {,         if (!(o instanceof ProtocolInitiation)),         {,             return false;,         }, ,         ProtocolInitiation pi = (ProtocolInitiation) o;,         if (pi._protocolHeader == null),         {,             return false;,         }, ,         if (_protocolHeader.length != pi._protocolHeader.length),         {,             return false;,         }, ,         for (int i = 0; i < _protocolHeader.length; i++),         {,             if (_protocolHeader[i] != pi._protocolHeader[i]),             {,                 return false;,             },         }, ,         return (_protocolClass == pi._protocolClass &&,                 _protocolInstance == pi._protocolInstance &&,                 _protocolMajor == pi._protocolMajor &&,                 _protocolMinor == pi._protocolMinor);,     }, ,     @Override,     public int hashCode(),     {,         int result = _protocolHeader != null ? Arrays.hashCode(_protocolHeader) : 0;,         result = 31 * result + (int) _protocolClass;,         result = 31 * result + (int) _protocolInstance;,         result = 31 * result + (int) _protocolMajor;,         result = 31 * result + (int) _protocolMinor;,         return result;,     }, ,     public static class Decoder //implements MessageDecoder,     {,         /**,          *,          * @param in input buffer,          * @return true if we have enough data to decode the PI frame fully, false if more,          * data is required,          * @throws IOException if there is an issue reading the input,          */,         public boolean decodable(MarkableDataInput in) throws IOException,         {,             return (in.available() >= 8);,         }, ,     }, ,     public ProtocolVersion checkVersion() throws AMQException,     {, ,         if(_protocolHeader.length != 4),         {,             throw new AMQProtocolHeaderException("Protocol header should have exactly four octets", null);,         },         for(int i = 0; i < 4; i++),         {,             if(_protocolHeader[i] != AMQP_HEADER[i]),             {,                 try,                 {,                     throw new AMQProtocolHeaderException("Protocol header is not correct: Got " + new String(_protocolHeader,"ISO-8859-1") + " should be: " + new String(AMQP_HEADER, "ISO-8859-1"), null);,                 },                 catch (UnsupportedEncodingException e),                 {,                     ,                 },             },         }, ,         ProtocolVersion pv;, ,         // Hack for 0-9-1 which changed how the header was defined,         if(_protocolInstance == 0 && _protocolMajor == 9 && _protocolMinor == 1),         {,             pv = ProtocolVersion.v0_91;,             if (_protocolClass != 0),             {,                 throw new AMQProtocolClassException("Protocol class " + 0 + " was expected; received " +,                                                     _protocolClass, null);,             },         },         else if (_protocolClass != CURRENT_PROTOCOL_CLASS),         {,             throw new AMQProtocolClassException("Protocol class " + CURRENT_PROTOCOL_CLASS + " was expected; received " +,                                                 _protocolClass, null);,         },         else if (_protocolInstance != TCP_PROTOCOL_INSTANCE),         {,             throw new AMQProtocolInstanceException("Protocol instance " + TCP_PROTOCOL_INSTANCE + " was expected; received " +,                                                    _protocolInstance, null);,         },         else,         {,             pv = new ProtocolVersion(_protocolMajor, _protocolMinor);,         },         , ,         if (!pv.isSupported()),         {,             // TODO: add list of available versions in list to msg...,             throw new AMQProtocolVersionException("Protocol version " +,                                                   _protocolMajor + "." + _protocolMinor + " not suppoerted by this version of the Qpid broker.", null);,         },         return pv;,     }, ,     public byte getProtocolClass(),     {,         return _protocolClass;,     }, ,     public byte getProtocolInstance(),     {,         return _protocolInstance;,     }, ,     public byte getProtocolMajor(),     {,         return _protocolMajor;,     }, ,     public byte getProtocolMinor(),     {,         return _protocolMinor;,     }, ,     public String toString(),     {,         StringBuffer buffer = new StringBuffer(new String(_protocolHeader));,         buffer.append(Integer.toHexString(_protocolClass));,         buffer.append(Integer.toHexString(_protocolInstance));,         buffer.append(Integer.toHexString(_protocolMajor));,         buffer.append(Integer.toHexString(_protocolMinor));,         return buffer.toString();],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/qpid/framing/ProtocolInitiation.java,<init>,67-67,[        in.read(_protocolHeader);],,
STYLE,EQ_UNUSUAL,org/apache/qpid/framing/ProtocolVersion.java,equals,122-122,[        return o != null && (o == this || (compareTo(o) == 0));],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/framing/amqp_0_9/MessageTransferBodyImpl.java,getTtl,191-191,[        return _ttl;],,getTTL,436-436,[		return ttl;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/amqp_0_9/MethodConverter_0_9.java,,38-63,[        super((byte)0,(byte)9);,     }, , ,     public MessagePublishInfo convertToInfo(AMQMethodBody methodBody),     {,         final BasicPublishBody publishBody = ((BasicPublishBody) methodBody);, ,         final AMQShortString exchange = publishBody.getExchange();,         final AMQShortString routingKey = publishBody.getRoutingKey();, ,         return new MessagePublishInfoImpl(exchange,,                                           publishBody.getImmediate(),,                                           publishBody.getMandatory(),,                                           routingKey);, ,     }, ,     public AMQMethodBody convertToBody(MessagePublishInfo info),     {, ,         return new BasicPublishBodyImpl(0,,                                     info.getExchange(),,                                     info.getRoutingKey(),,                                     info.isMandatory(),,                                     info.isImmediate()) ;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/amqp_0_91/MethodConverter_0_91.java,,37-62,[        super((byte)0,(byte)9);,     }, , ,     public MessagePublishInfo convertToInfo(AMQMethodBody methodBody),     {,         final BasicPublishBody publishBody = ((BasicPublishBody) methodBody);, ,         final AMQShortString exchange = publishBody.getExchange();,         final AMQShortString routingKey = publishBody.getRoutingKey();, ,         return new MessagePublishInfoImpl(exchange,,                                           publishBody.getImmediate(),,                                           publishBody.getMandatory(),,                                           routingKey);, ,     }, ,     public AMQMethodBody convertToBody(MessagePublishInfo info),     {, ,         return new BasicPublishBodyImpl(0,,                                     info.getExchange(),,                                     info.getRoutingKey(),,                                     info.isMandatory(),,                                     info.isImmediate()) ;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/framing/amqp_8_0/MethodConverter_8_0.java,,36-61,[        super((byte)8,(byte)0);,     }, , ,     public MessagePublishInfo convertToInfo(AMQMethodBody methodBody),     {,         final BasicPublishBody publishBody = ((BasicPublishBody) methodBody);, ,         final AMQShortString exchange = publishBody.getExchange();,         final AMQShortString routingKey = publishBody.getRoutingKey();, ,         return new MessagePublishInfoImpl(exchange == null ? null : exchange.intern(),,                                           publishBody.getImmediate(),,                                           publishBody.getMandatory(),,                                           routingKey == null ? null : routingKey.intern(false));, ,     }, ,     public AMQMethodBody convertToBody(MessagePublishInfo info),     {, ,         return new BasicPublishBodyImpl(0,,                                     info.getExchange(),,                                     info.getRoutingKey(),,                                     info.isMandatory(),,                                     info.isImmediate()) ;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/jms/FailoverPolicy.java,<init>,104-104,[                    catch (Exception cnfe)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/jms/FailoverPolicyTest.java,,183-282,[        {, ,             @Override,             public Session createSession(boolean transacted,,                     int acknowledgeMode, int prefetch) throws JMSException,             {,                 return null;,             }, ,             @Override,             public Session createSession(boolean transacted,,                     int acknowledgeMode, int prefetchHigh, int prefetchLow),                     throws JMSException,             {,                 return null;,             }, ,             @Override,             public ConnectionListener getConnectionListener(),             {,                 return null;,             }, ,             @Override,             public long getMaximumChannelCount() throws JMSException,             {,                 return 0;,             }, ,             @Override,             public void setConnectionListener(ConnectionListener listener),             {,             }, ,             @Override,             public void close() throws JMSException,             {,             }, ,             @Override,             public ConnectionConsumer createConnectionConsumer(,                     Destination arg0, String arg1, ServerSessionPool arg2,,                     int arg3) throws JMSException,             {,                 return null;,             }, ,             @Override,             public ConnectionConsumer createDurableConnectionConsumer(,                     Topic arg0, String arg1, String arg2,,                     ServerSessionPool arg3, int arg4) throws JMSException,             {,                 return null;,             }, ,             @Override,             public javax.jms.Session createSession(boolean arg0, int arg1),                     throws JMSException,             {,                 return null;,             }, ,             @Override,             public String getClientID() throws JMSException,             {,                 return null;,             }, ,             @Override,             public ExceptionListener getExceptionListener() throws JMSException,             {,                 return null;,             }, ,             @Override,             public ConnectionMetaData getMetaData() throws JMSException,             {,                 return null;,             }, ,             @Override,             public void setClientID(String arg0) throws JMSException,             {,             }, ,             @Override,             public void setExceptionListener(ExceptionListener arg0),                     throws JMSException,             {,             }, ,             @Override,             public void start() throws JMSException,             {,             }, ,             @Override,             public void stop() throws JMSException,             {,             }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/jms/failover/FailoverRoundRobinServers.java,getNextBrokerDetails,175-175,[            if (delayStr == null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/qpid/jms/failover/FailoverRoundRobinServers.java,getNextBrokerDetails,175-175,[            if (delayStr == null)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/jndi/PropertiesFileInitialContextFactory.java,getInitialContext,128-128,[            catch(Exception ignore){}],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/jndi/PropertiesFileInitialContextFactory.java,createFactory,159-159,[                if (cf != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/jndi/PropertiesFileInitialContextFactory.java,createDestination,177-177,[                if (dest != null)],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/jndi/PropertiesFileInitialContextFactoryTest.java,prepareContext,94-94,[        properties.load(this.getClass().getResourceAsStream("JNDITest.properties"));],,prepareContext,96-96,[        return new InitialContext(properties);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/jndi/PropertiesFileInitialContextFactoryTest.java,prepareContext,94-94,[        properties.load(this.getClass().getResourceAsStream("JNDITest.properties"));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/jndi/PropertiesFileInitialContextFactoryTest.java,testContextFromProviderURL,134-134,[            f.delete();],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/jndi/PropertiesFileInitialContextFactoryTest.java,prepareContext,94-94,[        properties.load(this.getClass().getResourceAsStream("JNDITest.properties"));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/management/common/JMXConnnectionFactory.java,run,268-268,[            catch (Exception ex)],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/messaging/util/AddressParser.java,,60-60,[    private static Token.Type SYM = lxi.define("SYM", "[.#*%@$^!+-]");],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/messaging/util/JAddr.java,main,45-45,[        InputStreamReader reader = new InputStreamReader(System.in);],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/messaging/util/JAddr.java,pprint_address,91-91,[        return String.format("NAME: %s\nSUBJECT: %s\nOPTIONS: %s",],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/messaging/util/PyPrint.java,pprint_items,110-110,[            return String.format("%s\n%s\n%s", start, result, end);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/nclient/util/ByteBufferMessage.java,toString,191-191,[        return new String(b);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/pool/ReferenceCountingExecutorServiceTest.java,testExecuteCommandWithDefaultExecutorThreadFactory,92-92,[            latch.await(3, TimeUnit.SECONDS);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/pool/ReferenceCountingExecutorServiceTest.java,testExecuteCommandWithOverriddenExecutorThreadFactory,119-119,[            latch.await(3, TimeUnit.SECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/pool/ReferenceCountingExecutorServiceTest.java,,133-139,[        {, ,             public void run(),             {,                 threadGroups.add(Thread.currentThread().getThreadGroup());,                 latch.countDown();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/pool/ReferenceCountingExecutorServiceTest.java,,144-155,[   private final class ThreadGroupChangingThreadFactory implements ThreadFactory,    {,        private final ThreadGroup _newGroup;, ,        private ThreadGroupChangingThreadFactory(final ThreadGroup newGroup),        {,            this._newGroup = newGroup;,        }, ,        public Thread newThread(Runnable r),        {,            return new Thread(_newGroup, r);],,
MALICIOUS_CODE,MS_SHOULD_BE_REFACTORED_TO_BE_FINAL,org/apache/qpid/properties/ConnectionStartProperties.java,,75-75,[                _pid = Integer.parseInt(processName.substring(0,processName.indexOf('@')));],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/ra/ConnectionFactoryProperties.java,getConnectionURL,79-83,[      if (_log.isTraceEnabled()),       {,          _log.trace("getConnectionURL()");,       },       return _connectionURL;],,getConnectionUrl,66-66,[        return _connectionUrl;],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRABytesMessage.java,readBytes,126-126,[         _log.trace("readBytes(" + value + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRABytesMessage.java,readBytes,110-110,[         _log.trace("readBytes(" + value + ", " + length + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRABytesMessage.java,writeBytes,337-337,[         _log.trace("writeBytes(" + value + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRABytesMessage.java,writeBytes,322-322,[         _log.trace("writeBytes(" + value + ", " + offset + ", " + length + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAMapMessage.java,setBytes,324-324,[         _log.trace("setBytes(" + name + ", " + value + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAMapMessage.java,setBytes,308-308,[         _log.trace("setBytes(" + name + ", " + value + ", " + offset + ", " + length + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAMessage.java,setJMSCorrelationIDAsBytes,550-550,[         _log.trace("setJMSCorrelationIDAsBytes(" + correlationID + ")");],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/ra/QpidRASessionFactoryImpl.java,allocateConnection,793-793,[      catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/ra/QpidRASessionFactoryImpl.java,allocateConnection,890-890,[      catch (Exception e)],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAStreamMessage.java,readBytes,94-94,[         _log.trace("readBytes(" + value + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAStreamMessage.java,writeBytes,290-290,[         _log.trace("writeBytes(" + value + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidRAStreamMessage.java,writeBytes,275-275,[         _log.trace("writeBytes(" + value + ", " + offset + ", " + length + ")");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/ra/QpidResourceAdapter.java,getXAResources,151-151,[         _log.trace("getXAResources(" + specs + ")");],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/ra/QpidResourceAdapter.java,getTM,87-87,[      return _tm;],,getTm,37-61,[        InitialContext ctx = null;,         TransactionManager tm = null;, ,         try,         {,             ctx = new InitialContext();,             tm = (TransactionManager)ctx.lookup(TM_JNDI_NAME);,         },         catch(Exception e),         {,             _log.error("Error attempting to location TM " + e.getMessage());,         },         finally,         {,             try,             {,                 if(ctx != null),                 {,                     ctx.close();,                 },             },             catch(Exception ignore){},         }, ,         return tm;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/ra/QpidResourceAdapter.java,getXAResources,154-154,[      return null;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/ra/Util.java,maskUrlForLog,171-171,[       catch(Exception ignore){}],,
BAD_PRACTICE,ES_COMPARING_PARAMETER_STRING_WITH_EQ,org/apache/qpid/ra/Util.java,compare,61-61,[      if (me == you)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/ra/Util.java,compare,67-67,[      if (me == null && you != null)],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/client/AMQQueue.java,equals,186-186,[        return super.equals(o) && o instanceof Queue;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/client/AMQTopic.java,equals,232-240,[        if (getDestSyntax() == DestSyntax.ADDR),         {,             return super.equals(o);,         },         else,         {,             return (o instanceof AMQTopic),                && ((AMQTopic)o).getExchangeName().equals(getExchangeName()),                && ((AMQTopic)o).getRoutingKey().equals(getRoutingKey());],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/ra/tm/GlassfishTransactionManagerLocator.java,getTm,58-58,[            catch(Exception ignore){}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/ra/tm/JBoss7TransactionManagerLocator.java,getTm,48-48,[            catch(Exception ignore)],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/qpid/ra/tm/JBossTransactionManagerLocator.java,,32-32,[   private final String LOCATOR = "org.jboss.tm.TransactionManagerLocator" ;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/ra/tm/WLSTransactionManagerLocator.java,getTm,58-58,[            catch(Exception ignore){}],,
BAD_PRACTICE,UI_INHERITANCE_UNSAFE_GETRESOURCE,org/apache/qpid/server/Broker.java,configureLogging,209-209,[            InputStream propsFile = this.getClass().getResourceAsStream("/fallback-log4j.properties");],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/BrokerOptions.java,getConfigurationStoreLocation,211-211,[            return new File(workDir, DEFAULT_CONFIG_NAME_PREFIX + "." + storeType.toLowerCase()).getAbsolutePath();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/BrokerOptionsTest.java,testDefaultConfigurationStoreLocationWithQpidWork,55-55,[        String expectedPath = new File(qpidWork, BrokerOptions.DEFAULT_CONFIG_NAME_PREFIX + "." + BrokerOptions.DEFAULT_STORE_TYPE.toLowerCase()).getAbsolutePath();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/BrokerOptionsTest.java,testDefaultConfigurationStoreLocationWithQpidWorkAndDifferentStoreType,76-76,[        String expectedPath = new File(qpidWork, BrokerOptions.DEFAULT_CONFIG_NAME_PREFIX + "." + storeType).getAbsolutePath();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/BrokerOptionsTest.java,testDefaultLogConfigFileWithQpidHome,92-92,[        String expectedPath = new File(qpidHome, BrokerOptions.DEFAULT_LOG_CONFIG_FILE).getAbsolutePath();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/BrokerOptionsTest.java,testDefaultConfigurationStoreLocationWithQpidWork,55-55,[        String expectedPath = new File(qpidWork, BrokerOptions.DEFAULT_CONFIG_NAME_PREFIX + "." + BrokerOptions.DEFAULT_STORE_TYPE.toLowerCase()).getAbsolutePath();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/BrokerOptionsTest.java,testDefaultConfigurationStoreLocationWithoutQpidWork,64-64,[        String expectedPath = new File(userDir, "work/" + BrokerOptions.DEFAULT_CONFIG_NAME_PREFIX + "." + BrokerOptions.DEFAULT_STORE_TYPE.toLowerCase()).getAbsolutePath();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/BrokerStartupTest.java,setUp,47-47,[        _monitor = new LogMonitor(_outputFile);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/BrokerStartupTest.java,testStartupWithNoConfig,76-76,[                brokerConfigFile.delete();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/qpid/server/License.java,,25-25,[    String[] LICENSE = {],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/server/Main.java,shutdown,463-463,[        System.exit(status);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/Main.java,,419-448,[                {,                     public void uncaughtException(final Thread t, final Throwable e),                     {,                         boolean continueOnError = Boolean.getBoolean("qpid.broker.exceptionHandler.continue");,                         try,                         {,                             System.err.println("########################################################################");,                             System.err.println("#");,                             System.err.print("# Unhandled Exception ");,                             System.err.print(e.toString());,                             System.err.print(" in Thread ");,                             System.err.println(t.getName());,                             System.err.println("#");,                             System.err.println(continueOnError ? "# Forced to continue by JVM setting 'qpid.broker.exceptionHandler.continue'" : "# Exiting");,                             System.err.println("#");,                             System.err.println("########################################################################");,                             e.printStackTrace(System.err);, ,                             Logger logger = Logger.getLogger("org.apache.qpid.server.Main");,                             logger.error("Uncaught exception, " + (continueOnError ? "continuing." : "shutting down."), e);,                         },                         finally,                         {,                             if (!continueOnError),                             {,                                 Runtime.getRuntime().halt(1);,                             },                         }, ,                     }],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/MainTest.java,testNoOptionsSpecified,47-47,[        String expectedLogConfigPath = new File(qpidHome, BrokerOptions.DEFAULT_LOG_CONFIG_FILE).getAbsolutePath();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/MainTest.java,testNoOptionsSpecified,46-46,[        String expectedStorePath = new File(qpidWork, BrokerOptions.DEFAULT_CONFIG_NAME_PREFIX + ".json").getAbsolutePath();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/SupportedProtocolVersionsTest.java,setUp,51-51,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/TransactionTimeoutHelperTest.java,,185-221,[        {,             _expectedLogHierarchy = expectedLogHierarchy;,             _expectedLogMessageMatches = expectedLogMessageMatches;,         }, ,         public boolean matches(Object arg),         {,             LogMessage logMessage = (LogMessage)arg;, ,             boolean hierarchyMatches = logMessage.getLogHierarchy().equals(_expectedLogHierarchy);,             boolean logMessageMatches = logMessage.toString().matches(_expectedLogMessageMatches);, ,             if (!hierarchyMatches),             {,                 _hierarchyMatchesFailure = "LogHierarchy does not match. Expected " + _expectedLogHierarchy + " actual " + logMessage.getLogHierarchy();,             }, ,             if (!logMessageMatches),             {,                 _logMessageMatchesFailure = "LogMessage does not match. Expected " + _expectedLogMessageMatches + " actual " + logMessage.toString();,             }, ,             return hierarchyMatches && logMessageMatches;,         }, ,         @Override,         public void describeTo(Description description),         {,             if (_hierarchyMatchesFailure != null),             {,                 description.appendText(_hierarchyMatchesFailure);,             },             if (_logMessageMatchesFailure != null),             {,                 description.appendText(_logMessageMatchesFailure);,             },         }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/binding/BindingImpl.java,activate,234-235,[        setState(State.ACTIVE);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/binding/BindingImpl.java,doDelete,220-229,[        if(_deleted.compareAndSet(false,true)),         {,             for(StateChangeListener<BindingImpl,State> listener : _stateChangeListeners),             {,                 listener.stateChanged(this, State.ACTIVE, State.DELETED);,             },             getEventLogger().message(_logSubject, BindingMessages.DELETED());,         },         setState(State.DELETED);,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/startup/FileKeyStoreCreationTest.java,,80-88,[        {,             @Override,             public Object run(),             {,                 assertNotNull(keyStore.getPassword());,                 assertEquals(TestSSLConstants.BROKER_TRUSTSTORE_PASSWORD, keyStore.getPassword());,                 //verify that we haven't configured the key store with the actual dummy password value,                 assertFalse(AbstractConfiguredObject.SECURED_STRING_VALUE.equals(keyStore.getPassword()));,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/startup/FileTrustStoreCreationTest.java,,69-78,[        {,             @Override,             public Object run(),             {,                 //verify we can retrieve the actual password using the method,                 assertEquals(TestSSLConstants.BROKER_TRUSTSTORE_PASSWORD, trustStore.getPassword());,                 assertNotNull(trustStore.getPassword());,                 //verify that we haven't configured the trust store with the actual dummy password value,                 assertFalse(AbstractConfiguredObject.SECURED_STRING_VALUE.equals(trustStore.getPassword()));,                 return null;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/configuration/startup/PreferencesProviderCreationTest.java,testRecoverFileSystemPreferencesProvider,117-117,[            file.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/configuration/store/ManagementModeStoreHandlerTest.java,,476-504,[    private class BrokerFinder implements ConfiguredObjectRecordHandler,     {,         private ConfiguredObjectRecord _brokerRecord;,         private int _version;, ,         @Override,         public void begin(),         {,         }, ,         @Override,         public boolean handle(final ConfiguredObjectRecord object),         {,             if(object.getType().equals(Broker.class.getSimpleName())),             {,                 _brokerRecord = object;,                 return false;,             },             return true;,         }, ,         @Override,         public void end(),         {,         }, ,         public ConfiguredObjectRecord getBrokerRecord(),         {,             return _brokerRecord;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/configuration/store/ManagementModeStoreHandlerTest.java,,545-585,[    private class ChildFinder implements ConfiguredObjectRecordHandler,     {,         private final Collection<UUID> _childIds = new HashSet<UUID>();,         private final ConfiguredObjectRecord _parent;, ,         private ChildFinder(final ConfiguredObjectRecord parent),         {,             _parent = parent;,         }, ,         @Override,         public void begin(),         {,         }, ,         @Override,         public boolean handle(final ConfiguredObjectRecord object),         {, ,             if(object.getParents() != null),             {,                 for(UUID parent : object.getParents().values()),                 {,                     if(parent.equals(_parent.getId())),                     {,                         _childIds.add(object.getId());,                     },                 }, ,             },             return true;,         }, ,         @Override,         public void end(),         {,         }, ,         public Collection<UUID> getChildIds(),         {,             return _childIds;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/configuration/store/ManagementModeStoreHandlerTest.java,,508-541,[    private class RecordFinder implements ConfiguredObjectRecordHandler,     {,         private final UUID _id;,         private ConfiguredObjectRecord _foundRecord;, ,         private RecordFinder(final UUID id),         {,             _id = id;,         }, ,         @Override,         public void begin(),         {,         }, ,         @Override,         public boolean handle(final ConfiguredObjectRecord object),         {,             if(object.getId().equals(_id)),             {,                 _foundRecord = object;,                 return false;,             },             return true;,         }, ,         @Override,         public void end(),         {,         }, ,         public ConfiguredObjectRecord getFoundRecord(),         {,             return _foundRecord;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/updater/CurrentThreadTaskExecutor.java,,107-135,[        {,             @Override,             public boolean cancel(boolean mayInterruptIfRunning),             {,                 return true;,             }, ,             @Override,             public boolean isCancelled(),             {,                 return false;,             }, ,             @Override,             public boolean isDone(),             {,                 return true;,             }, ,             @Override,             public T get() throws InterruptedException, ExecutionException,             {,                 return result;,             }, ,             @Override,             public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException,             {,                 return result;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/updater/TaskExecutorImpl.java,,145-150,[        {,             @Override,             public Void execute(),             {,                 task.execute();,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,,138-142,[        {,             @Override,             public String execute(),             {,                 return "DONE";],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,,191-196,[            {, ,                 @Override,                 public Void execute(),                 {,                     throw exception;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,,242-272,[    private class NeverEndingCallable implements Task<Void>,     {,         private CountDownLatch _waitLatch;, ,         public NeverEndingCallable(CountDownLatch waitLatch),         {,             super();,             _waitLatch = waitLatch;,         }, ,         @Override,         public Void execute(),         {,             if (_waitLatch != null),             {,                 _waitLatch.countDown();,             }, ,             // wait forever,             synchronized (this),             {,                 try,                 {,                     this.wait();,                 },                 catch (InterruptedException e),                 {,                     throw new ServerScopedRuntimeException(e);,                 },             },             return null;],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,execute,265-265,[                    this.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,execute,265-265,[                    this.wait();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/configuration/updater/TaskExecutorTest.java,,233-238,[    private class SubjectRetriever implements Task<Subject>,     {,         @Override,         public Subject execute(),         {,             return Subject.getSubject(AccessController.getContext());],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/consumer/MockConsumer.java,compareTo,457-457,[            return 0;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/exchange/AbstractExchange.java,route,516-516,[        if(queues == null || queues.isEmpty())],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/exchange/AbstractExchange.java,onValidate,152-152,[        if(!_virtualHost.getSecurityManager().isSystemProcess())],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/exchange/AbstractExchange.java,activate,762-763,[        setState(State.ACTIVE);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/exchange/AbstractExchange.java,doDelete,779-787,[            _virtualHost.removeExchange(this,true);,             preSetAlternateExchange();,             setState(State.DELETED);,         },         catch (ExchangeIsAlternateException | RequiredExchangeException e),         {,             return;,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/exchange/AbstractExchange.java,doDeleteBeforeInitialize,769-771,[        preSetAlternateExchange();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/exchange/AbstractExchange.java,postSetAlternateExchange,384-388,[        if(_alternateExchange != null),         {,             ((ExchangeImpl)_alternateExchange).addReference(this);,         },     }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/exchange/DefaultDestination.java,send,74-74,[            else if(routingAddress == null || !routingAddress.contains("/"))],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/exchange/DefaultDestination.java,send,65-65,[            if(routingAddress != null && routingAddress.contains("/") && !routingAddress.startsWith("/"))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/DefaultDestination.java,,87-105,[            {,                 MessageReference _reference = message.newReference();, ,                 public void postCommit(),                 {,                     try,                     {,                         q.enqueue(message, postEnqueueAction);,                     },                     finally,                     {,                         _reference.release();,                     },                 }, ,                 public void onRollback(),                 {,                     _reference.release();,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/FanoutExchangeTest.java,,198-203,[        {,             @Override,             public Object answer(InvocationOnMock invocation) throws Throwable,             {,                 final Set names = (Set) invocation.getArguments()[0];,                 return names.size() == 1 && names.contains("select");],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/HeadersBinding.java,,89-93,[                    {,                         @Override,                         public boolean matches(Filterable message),                         {,                             return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/exchange/HeadersBindingTest.java,,51-140,[    private class MockHeader implements AMQMessageHeader,     {, ,         private final Map<String, Object> _headers = new HashMap<String, Object>();, ,         public String getCorrelationId(),         {,             return null;,         }, ,         public long getExpiration(),         {,             return 0;,         }, ,         public String getUserId(),         {,             return null;,         }, ,         public String getAppId(),         {,             return null;,         }, ,         public String getMessageId(),         {,             return null;,         }, ,         public String getMimeType(),         {,             return null;,         }, ,         public String getEncoding(),         {,             return null;,         }, ,         public byte getPriority(),         {,             return 0;,         }, ,         public long getTimestamp(),         {,             return 0;,         }, ,         public String getType(),         {,             return null;,         }, ,         public String getReplyTo(),         {,             return null;,         }, ,         public Object getHeader(String name),         {,             return _headers.get(name);,         }, ,         public boolean containsHeaders(Set<String> names),         {,             return _headers.keySet().containsAll(names);,         }, ,         @Override,         public Collection<String> getHeaderNames(),         {,             return _headers.keySet();,         }, ,         public boolean containsHeader(String name),         {,             return _headers.containsKey(name);,         }, ,         public void setString(String key, String value),         {,             setObject(key,value);,         }, ,         public void setObject(String key, Object value),         {,             _headers.put(key,value);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/HeadersExchangeTest.java,,241-245,[        {,             @Override,             public Boolean answer(InvocationOnMock invocation) throws Throwable,             {,                 return headerValues.containsKey((String) invocation.getArguments()[0]);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/HeadersExchangeTest.java,,249-253,[        {,             @Override,             public Object answer(InvocationOnMock invocation) throws Throwable,             {,                 return headerValues.get((String) invocation.getArguments()[0]);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/HeadersExchangeTest.java,,258-263,[        {,             @Override,             public Boolean answer(InvocationOnMock invocation) throws Throwable,             {,                 final Set names = (Set) invocation.getArguments()[0];,                 return headerValues.keySet().containsAll(names);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/exchange/TopicExchange.java,doRoute,246-246,[        if(queues == null || queues.isEmpty())],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/exchange/topic/TopicMatcherDFAState.java,,274-277,[                                                        {,                                                             public int compare(final TopicMatcherDFAState o1, final TopicMatcherDFAState o2),                                                             {,                                                                 return o1.getId() - o2.getId();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/failover/FailoverMethodTest.java,testFailoverRoundRobinDelay,78-78,[            _failoverComplete.await(30, TimeUnit.SECONDS);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/failover/FailoverMethodTest.java,testFailoverSingleDelay,130-130,[            _failoverComplete.await(30, TimeUnit.SECONDS);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/failover/FailoverMethodTest.java,testNoFailover,228-228,[            _failoverComplete.await(30, TimeUnit.SECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/filter/JMSSelectorFilter.java,,63-111,[        {,             public boolean isPersistent(),             {,                 return message.isPersistent();,             }, ,             public boolean isRedelivered(),             {,                 return message.isRedelivered();,             }, ,             public Object getHeader(String name),             {,                 return message.getMessageHeader().getHeader(name);,             }, ,             public String getReplyTo(),             {,                 return message.getMessageHeader().getReplyTo();,             }, ,             public String getType(),             {,                 return message.getMessageHeader().getType();,             }, ,             public byte getPriority(),             {,                 return message.getMessageHeader().getPriority();,             }, ,             public String getMessageId(),             {,                 return message.getMessageHeader().getMessageId();,             }, ,             public long getTimestamp(),             {,                 return message.getMessageHeader().getTimestamp();,             }, ,             public String getCorrelationId(),             {,                 return message.getMessageHeader().getCorrelationId();,             }, ,             public long getExpiration(),             {,                 return message.getMessageHeader().getExpiration();],,
PERFORMANCE,DM_STRING_CTOR,org/apache/qpid/server/filter/JMSSelectorFilterTest.java,testEqualsAndHashCodeUsingSelectorString,29-29,[        JMSSelectorFilter filter1 = new JMSSelectorFilter(new String(selectorString));],,testEqualsAndHashCodeUsingSelectorString,30-30,[        JMSSelectorFilter filter2 = new JMSSelectorFilter(new String(selectorString));],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/flow/LimitlessCreditManager.java,,24-51,[public class LimitlessCreditManager extends AbstractFlowCreditManager implements FlowCreditManager, {,     public long getMessageCredit(),     {,         return -1L;,     }, ,     public long getBytesCredit(),     {,         return -1L;,     }, ,     public void restoreCredit(long messageCredit, long bytesCredit),     {,     }, ,     public void removeAllCredit(),     {,     }, ,     public boolean hasCredit(),     {,         return true;,     }, ,     public boolean useCreditForMessage(long msgSize),     {,         return true;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/flow/MessageAndBytesCreditManager.java,,30-89,[    {,         _messageCredit = messageCredit;,         _bytesCredit = bytesCredit;,     }, ,     public synchronized long getMessageCredit(),     {,         return _messageCredit;,     }, ,     public synchronized long getBytesCredit(),     {,         return _bytesCredit;,     }, ,     public synchronized void restoreCredit(long messageCredit, long bytesCredit),     {        ,         _messageCredit += messageCredit;,         _bytesCredit += bytesCredit;,         setSuspended(hasCredit());,     }, ,     public synchronized void removeAllCredit(),     {,         _messageCredit = 0L;,         _bytesCredit = 0L;,         setSuspended(true);,     }, ,     public synchronized boolean hasCredit(),     {,         return (_messageCredit > 0L) && ( _bytesCredit > 0L );,     }, ,     public synchronized boolean useCreditForMessage(final long msgSize),     {,         if(_messageCredit == 0L),         {,             setSuspended(true);,             return false;,         },         else,         {,             if(msgSize > _bytesCredit),             {,                 setSuspended(true);,                 return false;,             },             _messageCredit--;,             _bytesCredit -= msgSize;,             setSuspended(false);,             return true;,         },         ,     }, ,     public synchronized void setBytesCredit(long bytesCredit),     {,         _bytesCredit = bytesCredit;,     }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/flow/MessageOnlyCreditManager.java,,30-81,[    {,         _messageCredit = new AtomicLong(initialCredit);,     }, ,     public long getMessageCredit(),     {,         return _messageCredit.get();,     }, ,     public long getBytesCredit(),     {,         return -1L;,     }, ,     public void restoreCredit(long messageCredit, long bytesCredit),     {,         _messageCredit.addAndGet(messageCredit);,         setSuspended(false);, ,     }, ,     public void removeAllCredit(),     {,         setSuspended(true);,         _messageCredit.set(0L);,     }, ,     public boolean hasCredit(),     {,         return _messageCredit.get() > 0L;,     }, ,     public boolean useCreditForMessage(long msgSize),     {,         if(hasCredit()),         {,             if(_messageCredit.addAndGet(-1L) >= 0),             {,                 setSuspended(false);,                 return true;,             },             else,             {,                 _messageCredit.addAndGet(1L);,                 setSuspended(true);,                 return false;,             },         },         else,         {,             setSuspended(true);,             return false;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/flow/Pre0_10CreditManager.java,,34-185,[    {,         _bytesCreditLimit = bytesCreditLimit;,         _messageCreditLimit = messageCreditLimit;,         _bytesCredit = bytesCreditLimit;,         _messageCredit = messageCreditLimit;,     }, , ,     public synchronized void setCreditLimits(final long bytesCreditLimit, final long messageCreditLimit),     {,         long bytesCreditChange = bytesCreditLimit - _bytesCreditLimit;,         long messageCreditChange = messageCreditLimit - _messageCreditLimit;, , , ,         if(bytesCreditChange != 0L),         {,             if(bytesCreditLimit == 0L),             {,                 _bytesCredit = 0;,             },             else,             {,                 _bytesCredit += bytesCreditChange;,             },         }, , ,         if(messageCreditChange != 0L),         {,             if(messageCreditLimit == 0L),             {,                 _messageCredit = 0;,             },             else,             {,                 _messageCredit += messageCreditChange;,             },         }, , ,         _bytesCreditLimit = bytesCreditLimit;,         _messageCreditLimit = messageCreditLimit;, ,         setSuspended(!hasCredit());, ,     }, , ,     public long getMessageCredit(),     {,         return _messageCredit;,     }, ,     public long getBytesCredit(),     {,         return _bytesCredit;,     }, ,     public synchronized void restoreCredit(final long messageCredit, final long bytesCredit),     {,         final long messageCreditLimit = _messageCreditLimit;,         boolean notifyIncrease = true;,         if(messageCreditLimit != 0L),         {,             notifyIncrease = (_messageCredit != 0);,             long newCredit = _messageCredit + messageCredit;,             _messageCredit = newCredit > messageCreditLimit ? messageCreditLimit : newCredit;,         }, , ,         final long bytesCreditLimit = _bytesCreditLimit;,         if(bytesCreditLimit != 0L),         {,             long newCredit = _bytesCredit + bytesCredit;,             _bytesCredit = newCredit > bytesCreditLimit ? bytesCreditLimit : newCredit;,             if(notifyIncrease && bytesCredit>0),             {,                 notifyIncreaseBytesCredit();,             },         }, , , ,         setSuspended(!hasCredit());, ,     }, ,     public synchronized void removeAllCredit(),     {,         _bytesCredit = 0L;,         _messageCredit = 0L;,         setSuspended(!hasCredit());,     }, ,     public synchronized boolean hasCredit(),     {,         return (_bytesCreditLimit == 0L || _bytesCredit > 0),                 && (_messageCreditLimit == 0L || _messageCredit > 0);,     }, ,     public synchronized boolean useCreditForMessage(final long msgSize),     {,         if(_messageCreditLimit != 0L),         {,             if(_messageCredit != 0L),             {,                 if(_bytesCreditLimit == 0L),                 {,                     _messageCredit--;, ,                     return true;,                 },                 else,                 {,                     if((_bytesCredit >= msgSize) || (_bytesCredit == _bytesCreditLimit)),                     {,                         _messageCredit--;,                         _bytesCredit -= msgSize;, ,                         return true;,                     },                     else,                     {,                         return false;,                     },                 },             },             else,             {,                 setSuspended(true);,                 return false;,             },         },         else,         {,             if(_bytesCreditLimit == 0L),             {, ,                 return true;,             },             else,             {,                 if((_bytesCredit >= msgSize) || (_bytesCredit == _bytesCreditLimit)),                 {,                     _bytesCredit -= msgSize;, ,                     return true;,                 },                 else,                 {,                     return false;],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/flow/Pre0_10CreditManager.java,useCreditForMessage,143-143,[                    _messageCredit--;],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/flow/Pre0_10CreditManager.java,useCreditForMessage,151-151,[                        _messageCredit--;],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/server/jmx/DefaultManagedObject.java,getHierarchicalType,150-150,[            String parentType = getHierarchicalType(obj.getParentObject()).toString();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/jmx/DefaultManagedObject.java,getNotificationInfo,187-187,[        return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/jmx/DefaultManagedObject.java,getHierarchicalName,137-137,[        if (hierarchyName != null)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/server/jmx/JMXManagementPluginImpl.java,unregisterObjectMBeans,229-229,[                    catch(Exception e)],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/jmx/JMXManagementPluginImpl.java,doStart,109-177,[        _allowPortActivation = true;,         Broker<?> broker = getBroker();,         JmxPort<?> connectorPort = null;,         RmiPort registryPort = null;,         Collection<Port<?>> ports = broker.getPorts();,         for (Port<?> port : ports),         {,             if (port.getDesiredState() != State.ACTIVE),             {,                 continue;,             }, ,             if(isRegistryPort(port)),             {,                 registryPort = (RmiPort) port;,                 registryPort.setPortManager(this);,                 if(port.getState() != State.ACTIVE),                 {,                     port.start();,                 }, ,             },             else if(isConnectorPort(port)),             {,                 connectorPort = (JmxPort<?>) port;,                 connectorPort.setPortManager(this);,                 if(port.getState() != State.ACTIVE),                 {,                     port.start();,                 }, ,             },         },         if(connectorPort == null),         {,             throw new IllegalStateException("No JMX connector port found supporting protocol " + Protocol.JMX_RMI);,         },         if(registryPort == null),         {,             throw new IllegalStateException("No JMX RMI port found supporting protocol " + Protocol.RMI);,         }, ,         _objectRegistry = new JMXManagedObjectRegistry(broker, connectorPort, registryPort, this);, ,         broker.addChangeListener(_changeListener);, ,         synchronized (_childrenLock),         {,             for(VirtualHostNode<?> virtualHostNode : broker.getVirtualHostNodes()),             {,                 createObjectMBeans(virtualHostNode);,             }, ,             Collection<AuthenticationProvider<?>> authenticationProviders = broker.getAuthenticationProviders();,             for (AuthenticationProvider<?> authenticationProvider : authenticationProviders),             {,                 createObjectMBeans(authenticationProvider);,             },         },         new Shutdown(_objectRegistry);,         new ServerInformationMBean(_objectRegistry, broker);,         if (LoggingManagementFacade.getCurrentInstance() != null),         {,             new LoggingManagementMBean(LoggingManagementFacade.getCurrentInstance(), _objectRegistry);,         },         _objectRegistry.start();,         setState(State.ACTIVE);,         _allowPortActivation = false;,     }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/jmx/MBeanIntrospector.java,getMBeanConstructorInfo,355-355,[            if (constructorInfo != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/jmx/MBeanIntrospector.java,getParametersInfo,334-334,[            if (paramInfo != null)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/ManagementLogonLogoffReporterTest.java,,84-89,[        {,             @Override,             public boolean matches(final Object argument),             {,                 LogMessage actual = (LogMessage) argument;,                 return actual.getLogHierarchy().equals(hierarchy) &&  actual.toString().equals(message);],,
CORRECTNESS,EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC,org/apache/qpid/server/jmx/QpidSslRMIServerSocketFactory.java,equals,93-100,[        if (!(object instanceof QpidSslRMIServerSocketFactory)),         {,             return false;,         }, ,         QpidSslRMIServerSocketFactory that = (QpidSslRMIServerSocketFactory) object;, ,         return _sslContext.equals(that._sslContext);],,equals,291-296,[],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/QpidSslRMIServerSocketFactory.java,,66-78,[        {,             public Socket accept() throws IOException,             {,                 Socket socket = super.accept();, ,                 SSLSocket sslSocket =,                         (SSLSocket) factory.createSocket(socket,,                                                          socket.getInetAddress().getHostName(),,                                                          socket.getPort(),,                                                          true);,                 sslSocket.setUseClientMode(false);, ,                 return sslSocket;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/jmx/mbeans/AbstractStatisticsGatheringMBean.java,,60-60,[        _lastStatUpdateTime = System.currentTimeMillis();],,,66-66,[        final long period = time - _lastStatUpdateTime;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/jmx/mbeans/ExchangeMBean.java,createNewBinding,279-279,[                if (keyAndValue == null || keyAndValue.length == 0 || keyAndValue.length > 2 || keyAndValue[0].length() == 0)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java,,179-182,[        {{,             put("key1", "binding1");,             put("key2", "binding2");,         }};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/ExchangeMBeanTest.java,,193-196,[        {{,             put("key1", "binding1");,             put("key2", "");,         }};],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/jmx/mbeans/LoggingManagementMBean.java,createRow,308-308,[        Object[] itemData = {loggerName, level.toUpperCase()};],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/jmx/mbeans/LoggingManagementMBean.java,getConfigFileRootLoggerLevel,193-193,[            return _loggingManagementFacade.retrieveConfigFileRootLoggerLevel().toUpperCase();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/jmx/mbeans/LoggingManagementMBean.java,validateLevelNotAllowingInherited,286-286,[        if (level == null || !availableLoggerLevels.contains(level.toUpperCase()))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/LoggingManagementMBeanTest.java,,58-61,[        {{,             add(TEST_LEVEL1);,             add(TEST_LEVEL2);,         }};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/QueueMBean.java,,614-624,[        {,             private long position = 1;, ,             public boolean visit(QueueEntry entry),             {,                 if(position >= first && position <= last),                 {,                     messages.add(entry);,                 },                 position++;,                 return position > last;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/QueueMBeanTest.java,,406-411,[        {,             @Override,             public boolean matches(Object argument),             {,                 Notification actual = (Notification) argument;,                 return actual.getMessage().endsWith(expectedMessage);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/QueueMBeanTest.java,,442-457,[        {,             public Object answer(InvocationOnMock invocation),             {,                 Object[] args = invocation.getArguments();, ,                 //verify the arg types / expected values,                 assertEquals(2, args.length);,                 assertTrue(args[0] instanceof ByteBuffer);,                 assertTrue(args[1] instanceof Integer);, ,                 ByteBuffer dest = (ByteBuffer) args[0];,                 int offset = (Integer) args[1];,                 assertEquals(0, offset);, ,                 dest.put(content);,                 return messageContentSize;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/jmx/mbeans/QueueMBeanTest.java,,466-472,[        {,             public Object answer(InvocationOnMock invocation),             {,                 Object[] args = invocation.getArguments();,                 GetMessageVisitor visitor = (GetMessageVisitor) args[0];,                 visitor.visit(entry);,                 return null;],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/server/jmx/mbeans/Shutdown.java,run,126-126,[            System.exit(0);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/jmx/mbeans/Shutdown.java,,122-127,[    class SystemExiter implements Runnable,     {,         public void run(),         {,             System.exit(0);,         }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/jmx/mbeans/VirtualHostManagerMBean.java,retrieveQueueAttributeValues,147-147,[                catch (Exception e)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/logging/AbstractMessageLogger.java,getPrincipal,213-213,[            if(principals != null && !principals.isEmpty())],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/server/logging/AbstractTestLogging.java,,41-410,[public class AbstractTestLogging extends QpidBrokerTestCase, {,     public static final long DEFAULT_LOG_WAIT = 2000;,     public static final String TEST_LOG_PREFIX = "MESSAGE";,     protected LogMonitor _monitor;, ,     @Override,     public void setUp() throws Exception,     {,         setLogMessagePrefix();,         ,         super.setUp();,         _monitor = new LogMonitor(_outputFile);,     }, ,     protected void setLogMessagePrefix(),     {,         //set the message prefix to facilitate scraping from the munged test output.,         setSystemProperty("qpid.logging.prefix", TEST_LOG_PREFIX);,     }, ,     @Override,     public void tearDown() throws Exception,     {,         _monitor.close();,         super.tearDown();,     }, ,     /**,      * assert that the requested log message has not occured,      *,      * @param log,      *,      * @throws IOException,      */,     public void assertLoggingNotYetOccured(String log) throws IOException,     {,         // Ensure the alert has not occured yet,         assertEquals("Message has already occured:" + log, 0,,                      findMatches(log).size());,     }, ,     protected void validateMessageID(String id, String log),     {,         assertEquals("Incorrect message", id, getMessageID(log));,     }, ,     protected String getMessageID(String log),     {,         String message = fromMessage(log);, ,         return message.substring(0, message.indexOf(" "));,     }, ,     /**,      * Return the first channel id from the log string,      * ' ch;X'  if there is no channel id return -1.,      *,      * @param log the log string to search.,      *,      * @return channel id or -1 if no channel id exists.,      */,     protected int getChannelID(String log),     {,         int start = log.indexOf("ch:") + 3;, ,         // If we do a check for ] as the boundary we will get cases where log,         // is presented with the bounding. If we don't match a ] then we can use,         // the end of the string as the boundary.,         int end = log.indexOf("]", start);,         if (end == -1),         {,             end = log.length();,         },         return parseInt(log, start, end);,     }, ,     protected String fromMessage(String log),     {;,         int startSubject = log.indexOf("]") + 1;,         int start = log.indexOf("]", startSubject) + 1;, ,         // If we don't have a subject then the second indexOf will return 0,         // in which case we can use the end of the actor as the index.,         if (start == 0),         {,             start = startSubject;,         }, ,         return log.substring(start).trim();,     }, ,     /**,      * Extract the Subject from the Log Message.,      *,      * The subject is the second block inclosed in brackets '[ ]'.,      *,      * If there is no Subject or the second block of brackets '[ ]' cannot be,      * identified then an empty String ("") is returned.,      *,      * The brackets '[ ]' are not included in the returned String.,      *,      * @param log The log message to process,      *,      * @return the Subject string or the empty string ("") if the subject can't be identified.,      */,     protected String fromSubject(String log),     {,         int start = log.indexOf("[") + 1;,         // Take the second index,         start = log.indexOf("[", start) + 1;, ,         // There may not be a subject so in that case return nothing.,         if (start == 0),         {,             return "";,         }, ,         int end = log.indexOf("]", start);,         try,         {,             return log.substring(start, end);,         },         catch (IndexOutOfBoundsException iobe),         {,             return "";,         },     }, ,     /**,      * Extract the actor segment from the log message.,      * The Actor segment is the first section enclosed in '[ ]'.,      *,      * No analysis is performed to ensure that the first '[ ]' section of the,      * given log is really an Actor segment.,      *,      * The brackets '[ ]' are not included in the returned String.,      *,      * @param log the Log Message,      *,      * @return the Actor segment or "" if unable to locate '[ ]' section,      */,     protected String fromActor(String log),     {,         int start = log.indexOf("[") + 1;,         int end = log.indexOf("]", start);,         try,         {,             return log.substring(start, end).trim();,         },         catch (IndexOutOfBoundsException iobe),         {,             return "";,         },     }, ,     /**,      * Return the message String from the given message section,      *,      * @param log the Message Section,      *,      * @return the Message String.,      */,     protected String getMessageString(String log),     {,         // Remove the Log ID from the returned String,         int start = log.indexOf(":") + 1;, ,         return log.substring(start).trim();,     }, ,     /**,      * Given our log message extract the connection ID:,      *,      * The log string will contain the connectionID identified by 'con:',      *,      * So extract the value shown here by X:,      *,      * 'con:X(',      *,      * Extract the value between the ':' and '(' and process it as an Integer,      *,      * If we are unable to find the right index or process the substring as an,      * Integer then return -1.,      *,      * @param log the log String to process,      *,      * @return the connection ID or -1.,      */,     protected int getConnectionID(String log),     {,         int conIDStart = log.indexOf("con:") + 4;,         int conIDEnd = log.indexOf("(", conIDStart);,         return parseInt(log, conIDStart, conIDEnd);,     }, ,     /**,      * Extract the log entry from the raw log line which will contain other,      * log4j formatting.,      *,      * This formatting may impead our testing process so extract the log message,      * as we know it to be formatted.,      *,      * This starts with the string MESSAGE,      *,      * @param rawLog the raw log,      *,      * @return the log we are expecting to be printed without the log4j prefixes,      */,     protected String getLog(String rawLog),     {,         int start = rawLog.indexOf(TEST_LOG_PREFIX);,         return rawLog.substring(start);,     },     ,     /**,      * Extract the log entry from the result set. Positions are 0-based.,      * ,      * @param results list of log message results to extract from,      * @param position position in the list of the message to extract,      * @return the message string,      */,     protected String getLogMessage(List<String> results, int position),     {,         return getLog(results.get(position));,     },     ,     /**,      * Extract the nth-from-last log entry from the result set.,      * ,      * @param results list of log message results to extract from,      * @param positionFromEnd position from end of the message list to extract (eg 0 for last),      * @return the message string,      */,     protected String getLogMessageFromEnd(List<String> results, int positionFromEnd),     {,         int resultSize = results.size();,         return getLogMessage(results, resultSize - 1 - positionFromEnd);,     },     ,     protected List<String> findMatches(String toFind) throws IOException,     {,         return _monitor.findMatches(toFind);,     },     ,     protected List<String> waitAndFindMatches(String toFind) throws IOException,     {,         return waitAndFindMatches(toFind, DEFAULT_LOG_WAIT);,     }, ,     protected List<String> waitAndFindMatches(String toFind, long wait) throws IOException,     {,         return _monitor.waitAndFindMatches(toFind, wait);,     }, ,     public boolean waitForMessage(String message) throws FileNotFoundException, IOException,     {,         return waitForMessage(message, DEFAULT_LOG_WAIT);,     }, ,     public boolean waitForMessage(String message, long wait) throws FileNotFoundException, IOException,     {,         return _monitor.waitForMessage(message, wait);,     }, ,     /**,      * Given a list of messages that have been pulled out of a log file,      * Process the results splitting the log statements in to lists based on the,      * actor's connection ID.,      *,      * So for each log entry extract the Connecition ID from the Actor of the log,      *,      * Then use that as a key to a HashMap storing the list of log messages for,      * that connection.,      *,      * @param logMessages The list of mixed connection log messages,      *,      * @return Map indexed by connection id to a list of log messages just for that connection.,      */,     protected HashMap<Integer, List<String>> splitResultsOnConnectionID(List<String> logMessages),     {,         HashMap<Integer, List<String>> connectionSplitList = new HashMap<Integer, List<String>>();, ,         for (String log : logMessages),         {,             // Get the connectionID from the Actor in the Message Log.,             int cID = getConnectionID(fromActor(getLog(log)));, ,             List<String> connectionData = connectionSplitList.get(cID);, ,             // Create the initial List if we don't have one already,             if (connectionData == null),             {,                 connectionData = new LinkedList<String>();,                 connectionSplitList.put(cID, connectionData);,             }, ,             // Store the log,             connectionData.add(log);,         }, ,         return connectionSplitList;,     }, ,     /**,      * Filter the give result set by the specficifed virtualhost.,      * This is done using the getSlice to identify the virtualhost (vh) in the,      * log message,      *,      * @param results         full list of logs,      * @param virtualHostName the virtualhostName to filter on,      *,      * @return the list of messages only for that virtualhost,      */,     protected List<String> filterResultsByVirtualHost(List<String> results, String virtualHostName),     {,         List<String> filteredResults = new LinkedList<String>();,         Iterator<String> iterator = results.iterator();, ,         while (iterator.hasNext()),         {,             String log = iterator.next();, ,             if (AbstractTestLogSubject.getSlice("vh", log).equals(virtualHostName)),             {,                 filteredResults.add(log);,             },         }, ,         return filteredResults;,     }, ,     /**,      * Dump the log results.,      */,     protected void dumpLogs(List<String> results) throws IOException  ,     {,         dumpLogs(results, null);,     },     ,     /**,      * Dump the log results or if there are none, the contents of the ,      * monitored log file if the monitor is non-null.,      */,     protected void dumpLogs(List<String> results, LogMonitor monitor) throws IOException   ,     {,         System.err.println("Log Dump:");,         for (String log : results),         {,             System.err.println(log);,         }, ,         if (results.isEmpty() && monitor != null),         {,             System.err.println("Monitored file contents:");,             System.err.println(monitor.readFile());,         },     }, ,     private int parseInt(final String logSubstring, final int start, final int end),     {,         try,         {,             final NumberFormat format = NumberFormat.getInstance(Locale.getDefault());,             final Number number = format.parse(logSubstring.substring(start, end));,             return number.intValue();,         },         catch (Exception e),         {,             return -1;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/logging/BrokerLoggingTest.java,setUp,64-64,[        setLogMessagePrefix();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/logging/Log4jMessageLoggerTest.java,,240-264,[    private class Log4jTestAppender extends AppenderSkeleton,     {,         private List<LoggingEvent> _log = new LinkedList<LoggingEvent>();, ,         protected void append(LoggingEvent loggingEvent),         {,             _log.add(loggingEvent);,         }, ,         public void close(),         {,             _log.clear();,         }, ,         /**,          * @return the list of LoggingEvents that have occurred in this Appender,          */,         public List<LoggingEvent> getLog(),         {,             return _log;,         }, ,         public boolean requiresLayout(),         {,             return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/logging/LogMessageTest.java,,131-166,[        private Exception _exception = null;,         private int _count;, ,         /**,          * @param count The number of Log Messages to generate,          */,         LogGenerator(int count),         {,             _count = count;,         }, ,         public void run(),         {,             try,             {,                 // try and generate _count iterations of Config & Listening messages.,                 for (int i = 0; i < _count; i++),                 {,                     BrokerMessages.CONFIG("Config");,                     BrokerMessages.LISTENING("TCP", 1234);,                 },             },             catch (Exception e),             {,                 // if something goes wrong recorded it for later analysis.,                 _exception = e;,             },         }, ,         /**,          * Return any exception that was thrown during the log generation.,          * @return Exception,          */,         public Exception getThrowException(),         {,             return _exception;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/logging/LogRecorder.java,,221-221,[            return _id < _recordId;],,,228-228,[            while(_id < _recordId-_bufferSize)],,,230-230,[                _id = _recordId-_bufferSize;],,,206-206,[        return new RecordIterator(Math.max(_recordId-_bufferSize, 0l));],,,151-151,[        _records[((int) (_recordId & _mask))] = new Record(_recordId, loggingEvent);],,,152-152,[        _recordId++;],,
BAD_PRACTICE,IT_NO_SUCH_ELEMENT,org/apache/qpid/server/logging/LogRecorder.java,next,227-234,[            Record record = _records[((int) (_id & _mask))];,             while(_id < _recordId-_bufferSize),             {,                 _id = _recordId-_bufferSize;,                 record = _records[((int) (_id & _mask))];,             },             _id++;,             return record;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/logging/actors/AMQPConnectionActorTest.java,setUp,47-47,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/logging/actors/BaseActorTestCase.java,,64-67,[                          {,                               public String toLogString(),                               {,                                   return message;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/logging/actors/BaseActorTestCase.java,,71-79,[                          {,                               public String toString(),                               {,                                   return message;,                               }, ,                               public String getLogHierarchy(),                               {,                                   return "test.hierarchy";],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/logging/actors/HttpManagementActorTest.java,,60-76,[                                    {,                                         @Override,                                         public String getType(),                                         {,                                             return "HTTP";,                                         }, ,                                         @Override,                                         public SocketAddress getRemoteAddress(),                                         {,                                             return new InetSocketAddress(IP, PORT);,                                         }, ,                                         @Override,                                         public String getName(),                                         {,                                             return getRemoteAddress().toString();],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,<init>,91-93,[        if(LOGGER == null),         {,             LOGGER = Logger.getLogger(LoggingManagementFacade.class);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,<init>,103-105,[        if(LOGGER == null),         {,             LOGGER = Logger.getLogger(LoggingManagementFacade.class);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,writeUpdatedConfigFile,375-375,[            old.delete();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,<init>,93-93,[            LOGGER = Logger.getLogger(LoggingManagementFacade.class);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,<init>,105-105,[            LOGGER = Logger.getLogger(LoggingManagementFacade.class);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/logging/log4j/LoggingManagementFacade.java,,298-309,[        {,             private static final long serialVersionUID = 599203507907836466L;,         {,            add(Level.ALL.toString());,            add(Level.TRACE.toString());,            add(Level.DEBUG.toString());,            add(Level.INFO.toString());,            add(Level.WARN.toString());,            add(Level.ERROR.toString());,            add(Level.FATAL.toString());,            add(Level.OFF.toString());,         }};],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/logging/messages/ConnectionMessagesTest.java,testConnectionOpen_WithNOClientIDNoProtocolVersionNoClientVersionNullClientProduct,100-100,[        _logMessage = ConnectionMessages.OPEN(null, null, null , clientProduct , false, false, false, true);],,testConnectionOpen_WithNOClientIDNoProtocolVersionNoClientVersionNullClientProduct,103-103,[        String[] expected = {"Open", ": Client Product :", clientProduct};],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/logging/messages/ConnectionMessagesTest.java,testConnectionOpen_WithNOClientIDNoProtocolVersionNullClientVersionNoClientProduct,88-88,[        _logMessage = ConnectionMessages.OPEN(null, null, clientVersion , null , false, false, true, false);],,testConnectionOpen_WithNOClientIDNoProtocolVersionNullClientVersionNoClientProduct,91-91,[        String[] expected = {"Open", ": Client Version :", clientVersion};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/logging/subjects/AbstractTestLogSubject.java,,77-85,[        {,             public String toString(),             {,                 return "<Log Message>";,             }, ,             public String getLogHierarchy(),             {,                 return "test.hierarchy";],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/management/amqp/ManagementNode.java,performCreateOperation,431-431,[            response = createFailureResponse(message,],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/server/management/amqp/ManagementNode.java,performUpdateOperation,514-514,[        final MutableMessageHeader responseHeader = new MutableMessageHeader();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/management/plugin/HttpManagement.java,doStart,128-144,[        getBroker().getEventLogger().message(ManagementConsoleMessages.STARTUP(OPERATIONAL_LOGGING_NAME));, ,         Collection<Port<?>> httpPorts = getHttpPorts(getBroker().getPorts());,         _server = createServer(httpPorts);,         try,         {,             _server.start();,             logOperationalListenMessages(_server);,         },         catch (Exception e),         {,             throw new ServerScopedRuntimeException("Failed to start HTTP management on ports : " + httpPorts, e);,         }, ,         getBroker().getEventLogger().message(ManagementConsoleMessages.READY(OPERATIONAL_LOGGING_NAME));,         setState(State.ACTIVE);,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/HttpManagementUtil.java,getOutputWriter,243-243,[        writer = new BufferedWriter(new OutputStreamWriter(getOutputStream(request,response, managementConfiguration)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/HttpManagementUtil.java,tryToAuthenticate,211-211,[                        String[] credentials = (new String(Base64.decodeBase64(base64UsernameAndPassword.getBytes()))).split(":", 2);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/HttpManagementUtil.java,tryToAuthenticate,211-211,[                        String[] credentials = (new String(Base64.decodeBase64(base64UsernameAndPassword.getBytes()))).split(":", 2);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/management/plugin/connector/TcpAndSslSelectChannelConnector.java,,155-238,[        private Protocol _protocol = Protocol.UNKNOWN;,         private Buffer _preBuffer = new IndirectNIOBuffer(6);, ,         public ProtocolIdentifyingEndpoint(final SocketChannel channel,,                                            final SelectorManager.SelectSet selectSet,,                                            final SelectionKey key, final int maxIdleTime) throws IOException,         {,             super(channel, selectSet, key, maxIdleTime);,         }, ,         public Protocol getProtocol() throws IOException,         {,             if(_protocol == Protocol.UNKNOWN),             {,                 if(_preBuffer.space() != 0),                 {,                     super.fill(_preBuffer);,                     _protocol = identifyFromPreBuffer();,                 },             },             return _protocol;,         }, ,         public SocketChannel getSocketChannel(),         {,             return (SocketChannel) getChannel();,         }, ,         private Protocol identifyFromPreBuffer(),         {,             if(_preBuffer.space() == 0),             {,                 byte[] helloBytes = _preBuffer.array();,                 if (looksLikeSSLv2ClientHello(helloBytes) || looksLikeSSLv3ClientHello(helloBytes)),                 {,                     return Protocol.SSL;,                 },                 else,                 {,                     return Protocol.TCP;,                 },             },             return Protocol.UNKNOWN;,         }, ,         private boolean looksLikeSSLv3ClientHello(byte[] headerBytes),         {,             return headerBytes[0] == 22 && // SSL Handshake,                    (headerBytes[1] == 3 && // SSL 3.0 / TLS 1.x,                     (headerBytes[2] == 0 || // SSL 3.0,                      headerBytes[2] == 1 || // TLS 1.0,                      headerBytes[2] == 2 || // TLS 1.1,                      headerBytes[2] == 3)) && // TLS1.2,                    (headerBytes[5] == 1); // client_hello,         }, ,         private boolean looksLikeSSLv2ClientHello(byte[] headerBytes),         {,             return headerBytes[0] == -128 &&,                    headerBytes[3] == 3 && // SSL 3.0 / TLS 1.x,                    (headerBytes[4] == 0 || // SSL 3.0,                     headerBytes[4] == 1 || // TLS 1.0,                     headerBytes[4] == 2 || // TLS 1.1,                     headerBytes[4] == 3);,         }, ,         @Override,         public int fill(final Buffer buffer) throws IOException,         {,             int size = 0;, ,             if(getProtocol() != Protocol.UNKNOWN),             {,                 if (_preBuffer.hasContent()),                 {,                     size = buffer.put(_preBuffer);,                     _preBuffer.skip(size);,                 },                 if (buffer.space() != 0),                 {,                     size += super.fill(buffer);,                 },             },             return size;],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/server/management/plugin/filter/ForbiddingAuthorisationFilter.java,,42-42,[    public static String INIT_PARAM_ALLOWED = "allowed";],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/server/management/plugin/filter/RedirectingAuthorisationFilter.java,,41-41,[    public static String DEFAULT_LOGIN_URL = "login.html";],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/server/management/plugin/filter/RedirectingAuthorisationFilter.java,,42-42,[    public static String INIT_PARAM_LOGIN_URL = "login-url";],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/server/management/plugin/log/LogFileHelper.java,listLogFiles,200-200,[        for (File file : parent.listFiles())],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,tearDown,111-111,[                    catch (Exception e)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,assertWrittenFile,320-320,[                assertEquals("Unexpected log file content", logContent, baos.toString());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,assertWrittenFile,331-331,[            if (fis != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,testWriteLogFile,172-172,[            if (os != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,testWriteLogFilesForAllLogs,151-151,[            if (os != null)],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/management/plugin/log/LogFileHelperTest.java,setUp,60-60,[        _compositeRollingAppenderBackupFolder.mkdirs();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/management/plugin/servlet/rest/AbstractServlet.java,getPathInfoElements,288-288,[        return null;],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/management/plugin/servlet/rest/ConfiguredObjectToMapConverter.java,incorporateAttributesIntoMap,111-111,[                    object.put(categoryName.substring(0,1).toLowerCase()+categoryName.substring(1), parent.getName());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/management/plugin/servlet/rest/ConfiguredObjectToMapConverter.java,incorporateChildrenIntoMap,271-271,[                        object.put(childClass.getSimpleName().toLowerCase() + "s", childObjects);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/management/plugin/servlet/rest/ConfiguredObjectToMapConverter.java,,228-232,[        {,             @Override,             public int compare(final Class<? extends ConfiguredObject> o1, final Class<? extends ConfiguredObject> o2),             {,                 return o1.getSimpleName().compareTo(o2.getSimpleName());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/management/plugin/servlet/rest/ConfiguredObjectToMapConverter.java,,245-249,[                    {,                         @Override,                         public int compare(final ConfiguredObject o1, final ConfiguredObject o2),                         {,                             return o1.getName().compareTo(o2.getName());],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/qpid/server/management/plugin/servlet/rest/KeyComparator.java,,26-50,[class KeyComparator implements Comparator<Map>, {,     private String _key;, ,     public KeyComparator(final String key),     {,         _key = key;,     }, ,     public int compare(final Map o1, final Map o2),     {,         Comparable left = (Comparable) o1.get(_key);,         Comparable right = (Comparable) o2.get(_key);, ,         int result;,         if(left == null),         {,             result =  right == null ? 0 : -1;,         },         else,         {,             result = left.compareTo(right);,         }, ,         return result;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/server/management/plugin/servlet/rest/LogRecordsServlet.java,doGetWithSubjectAndActor,67-67,[        catch(Exception e)],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/qpid/server/management/plugin/servlet/rest/MapComparator.java,,27-71,[class MapComparator implements Comparator<Map>, {,     private Comparator<Map>[] _sortKeys;, ,     public MapComparator(final String[] sortKeys),     {,         _sortKeys = parseKeys(sortKeys);,     }, ,     private static Comparator<Map>[] parseKeys(final String[] sortKeys),     {,         Comparator<Map>[] comparators = new Comparator[sortKeys.length];,         for(int i = 0; i < sortKeys.length; i++),         {,             String key = sortKeys[i];, ,             if(key.startsWith("+") || key.startsWith(" ")),             {,                 comparators[i] = new KeyComparator(key.substring(1));,             },             else if(key.startsWith("-")),             {,                 comparators[i] = Collections.reverseOrder(new KeyComparator(key.substring(1)));,             },             else,             {,                 comparators[i] = new KeyComparator(key);,             },         },         return comparators;,     }, , ,     public int compare(final Map o1, final Map o2),     {,         int result = 0;,         for(int i = 0; i < _sortKeys.length; i++),         {,             result = _sortKeys[i].compare(o1, o2);,             if(result != 0),             {,                 return result;,             },         },         return 0;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/management/plugin/servlet/rest/MessageContentServlet.java,,104-169,[    private class MessageFinder implements QueueEntryVisitor,     {,         private final long _messageNumber;,         private String _mimeType;,         private long _size;,         private byte[] _content;,         private boolean _found;, ,         private MessageFinder(long messageNumber),         {,             _messageNumber = messageNumber;,         }, , ,         public boolean visit(QueueEntry entry),         {,             ServerMessage message = entry.getMessage();,             if(message != null),             {,                 if(_messageNumber == message.getMessageNumber()),                 {,                     try,                     {,                         MessageReference reference = message.newReference();,                         try,                         {,                             _mimeType = message.getMessageHeader().getMimeType();,                             _size = message.getSize();,                             _content = new byte[(int) _size];,                             _found = true;,                             message.getContent(ByteBuffer.wrap(_content), 0);,                         },                         finally,                         {,                             reference.release();,                         },                         return true;,                     },                     catch (MessageDeletedException e),                     {,                         // ignore - the message was deleted as we tried too look at it, treat as if no message found,                     },                 }, ,             },             return false;,         }, ,         public String getMimeType(),         {,             return _mimeType;,         }, ,         public long getSize(),         {,             return _size;,         }, ,         public byte[] getContent(),         {,             return _content;,         }, ,         public boolean isFound(),         {,             return _found;],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/qpid/server/management/plugin/servlet/rest/MessageServlet.java,doPostWithSubjectAndActor,480-480,[            boolean isMoveTransaction = move != null && Boolean.valueOf(move);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/management/plugin/servlet/rest/MessageServlet.java,,279-288,[            {, ,                 public boolean visit(final QueueEntry entry),                 {,                     final ServerMessage message = entry.getMessage();,                     if(message != null),                     {,                         txn.dequeue(entry);,                     },                     return false;],,
MT_CORRECTNESS,MSF_MUTABLE_SERVLET_FIELD,org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java,,138-138,[            _hierarchy = (Class<? extends ConfiguredObject>[])new Class[0];],,,134-134,[            _hierarchy = classes.toArray(hierarchyClasses);],,,365-365,[        return _hierarchy.length == 0 ? Broker.class : _hierarchy[_hierarchy.length-1];],,,148-148,[            if(pathInfoElements.length > _hierarchy.length)],,,165-165,[        for(int i = 0; i < _hierarchy.length; i++)],,,151-151,[                        + getServletName() + ". Expected hierarchy length: " + _hierarchy.length],,,167-167,[            if(i == 0 || getBroker().getModel().getChildTypes(_hierarchy[i - 1]).contains(_hierarchy[i]))],,,187-187,[                        children.addAll((Collection<? extends ConfiguredObject<?>>) parent.getChildren(_hierarchy[i]));],,,177-177,[                        for(ConfiguredObject<?> child : parent.getChildren(_hierarchy[i]))],,,199-199,[                    filters.put(_hierarchy[i], names.get(i));],,,377-377,[            if (pathInfoElements.length != _hierarchy.length)],,,425-425,[            if (_hierarchy.length == 0)],,,383-383,[                                                   + names.size()],,,447-447,[        Collection<ConfiguredObject>[] objects = new Collection[_hierarchy.length];],,,448-448,[        if (_hierarchy.length == 1)],,,450-450,[            createOrUpdate(providedObject, _hierarchy[0], getBroker(), null, request, response);],,,454-454,[            for (int i = 0; i < _hierarchy.length - 1; i++)],,,459-459,[                    for (ConfiguredObject object : getBroker().getChildren(_hierarchy[0]))],,,494-494,[            for (int i = _hierarchy.length - 2; i >= 0; i--)],,,472-472,[                        if (getBroker().getModel().getChildTypes(_hierarchy[j]).contains(_hierarchy[i]))],,,496-496,[                if (parentClasses.contains(_hierarchy[i]))],,,504-504,[                        throw new IllegalArgumentException("Cannot deduce parent of class "],,,476-476,[                                for (ConfiguredObject<?> object : parent.getChildren(_hierarchy[i]))],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java,,66-66,[            new HashSet<>(Arrays.asList(DEPTH_PARAM,],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/qpid/server/management/plugin/servlet/rest/RestServlet.java,doPutWithSubjectAndActor,409-409,[                    part.getInputStream().read(data);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java,evaluateSaslResponse,269-269,[                outputObject.put("challenge", new String(Base64.encodeBase64(challenge)));],,evaluateSaslResponse,291-291,[            outputObject.put("challenge", new String(Base64.encodeBase64(challenge)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java,evaluateSaslResponse,229-229,[            challenge  = saslServer.evaluateResponse(saslResponse == null ? new byte[0] : Base64.decodeBase64(saslResponse.getBytes()));],,
BAD_PRACTICE,J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION,org/apache/qpid/server/management/plugin/servlet/rest/SaslServlet.java,evaluateSaslResponse,284-284,[            session.setAttribute(ATTR_SASL_SERVER, saslServer);],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/management/plugin/servlet/rest/StructureServlet.java,pluralize,97-97,[        String name = childClass.getSimpleName().toLowerCase();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/management/plugin/session/LoginLogoutReporterTest.java,,75-80,[        {,             @Override,             public boolean matches(Object argument),             {,                 LogMessage actual = (LogMessage) argument;,                 return actual.toString().equals(expectedMessage);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/AbstractConfiguredObject.java,attainStateIfResolved,716-720,[        if(_openComplete),         {,             attainState();,         },     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/model/AbstractSystemConfig.java,convertToConfigurationRecords,197-197,[            reader = new FileReader(initialConfigurationLocation);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/model/AbstractSystemConfig.java,convertToConfigurationRecords,193-193,[            reader = new InputStreamReader(url.openStream());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/model/AbstractSystemConfig.java,getBroker,138-138,[        if(children == null || children.isEmpty())],,
BAD_PRACTICE,NP_BOOLEAN_RETURN_NULL,org/apache/qpid/server/model/AttributeValueConverter.java,convert,200-200,[                return null;],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/model/ConfiguredObjectAttributeOrStatistic.java,getNameFromMethod,78-78,[        String name = baseName.length() == 1 ? baseName.toLowerCase() : baseName.substring(0,1).toLowerCase() + baseName.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/model/ConfiguredObjectRegistrationGenerator.java,getCategory,171-171,[                    category = e.getSimpleName().toString().toLowerCase();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/model/ConfiguredObjectRegistrationGenerator.java,process,127-127,[        catch (Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/model/ConfiguredObjectTypeRegistry.java,,770-800,[        {,             @Override,             public Iterator<String> iterator(),             {,                 final Iterator<ConfiguredObjectAttribute<? super X, ?>> underlyingIterator = attrs.iterator();,                 return new Iterator<String>(),                 {,                     @Override,                     public boolean hasNext(),                     {,                         return underlyingIterator.hasNext();,                     }, ,                     @Override,                     public String next(),                     {,                         return underlyingIterator.next().getName();,                     }, ,                     @Override,                     public void remove(),                     {,                         throw new UnsupportedOperationException();,                     },                 };,             }, ,             @Override,             public int size(),             {,                 return attrs.size();],,
BAD_PRACTICE,NP_TOSTRING_COULD_RETURN_NULL,org/apache/qpid/server/model/RuntimeDefault.java,toString,30-30,[        return value == null ? null : value.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/model/UUIDGenerator.java,createUUID,43-43,[        return UUID.nameUUIDFromBytes(sb.toString().getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/model/VirtualHostTest.java,,206-219,[        {,             final Iterator<ConfiguredObjectRecord> corIterator = asList(queueCor, exchangeCor, virtualHostCor).iterator();, ,             @Override,             public Object answer(final InvocationOnMock invocation) throws Throwable,             {,                 ConfiguredObjectRecordHandler handler = (ConfiguredObjectRecordHandler) invocation.getArguments()[0];,                 boolean handlerContinue = true;,                 while(corIterator.hasNext() && handlerContinue),                 {,                     handlerContinue = handler.handle(corIterator.next());,                 }, ,                 return null;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/server/model/adapter/BrokerAdapter.java,initialiseStatisticsReporting,279-279,[        long report = ((Number)getAttribute(Broker.STATISTICS_REPORTING_PERIOD)).intValue() * 1000; // convert to ms],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/qpid/server/model/adapter/BrokerAdapter.java,deletePort,715-715,[        port.removeChangeListener(this);],,deletePort,717-717,[        return port != null;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/BrokerAdapter.java,activate,229-275,[        if(_brokerOptions.isManagementMode()),         {,             _managementModeAuthenticationProvider.open();,         }, ,         for(KeyStore<?> keyStore : getChildren(KeyStore.class)),         {,             addKeyStore(keyStore);,         },         for(TrustStore<?> trustStore : getChildren(TrustStore.class)),         {,             addTrustStore(trustStore);,         },         for(AuthenticationProvider<?> authenticationProvider : getChildren(AuthenticationProvider.class)),         {,             addAuthenticationProvider(authenticationProvider);,         },         for(Port<?> port : getChildren(Port.class)),         {,             addPort(port);,         },         for(Plugin<?> plugin : getChildren(Plugin.class)),         {,             addPlugin(plugin);,         },         for(GroupProvider<?> groupProvider : getChildren(GroupProvider.class)),         {,             addGroupProvider(groupProvider);,         },         for(AccessControlProvider<?> accessControlProvider : getChildren(AccessControlProvider.class)),         {,             addAccessControlProvider(accessControlProvider);,         },         for(VirtualHostNode<?> virtualHostNode : getChildren(VirtualHostNode.class)),         {,             addVirtualHostNode(virtualHostNode);,         }, ,         initialiseStatisticsReporting();,        // changeChildState(State.ACTIVE, false);,         if (isManagementMode()),         {,             _eventLogger.message(BrokerMessages.MANAGEMENT_MODE(BrokerOptions.MANAGEMENT_MODE_USER_NAME,,                                                                 _brokerOptions.getManagementModePassword()));,         },         setState(State.ACTIVE);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/BrokerAdapter.java,getPlugins,818-819,[        Collection children = getChildren(Plugin.class);,         return children;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/model/adapter/BrokerAdapter.java,,490-495,[                            {,                                 @Override,                                 public Object run(),                                 {,                                     virtualHostNode.start();,                                     return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/model/adapter/BrokerAdapter.java,reportStatistics,1072-1072,[            catch(Exception e)],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/qpid/server/model/adapter/BrokerAdapter.java,,997-997,[        private final int DELIVERED = 0;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/qpid/server/model/adapter/BrokerAdapter.java,,998-998,[        private final int RECEIVED = 1;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/ConnectionAdapter.java,doDelete,161-164,[        closeUnderlyingConnection();,         deleted();,         setState(State.DELETED);,     }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,onCreate,161-161,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,onCreate,167-167,[                    file.createNewFile();],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,onOpen,134-134,[        Collection<Group> principals = new ArrayList<Group>(groups.size());],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,activate,255-266,[            _groupDatabase.setGroupFile(getPath());,             setState(State.ACTIVE);,         },         catch(IOException | RuntimeException e),         {,             setState(State.ERRORED);,             if (_broker.isManagementMode()),             {,                 LOGGER.warn("Failed to activate group provider: " + getName(), e);,             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,doDelete,271-282,[        File file = new File(getPath());,         if (file.exists()),         {,             if (!file.delete()),             {,                 throw new IllegalConfigurationException("Cannot delete group file");,             },         }, ,         deleted();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,startQuiesced,287-288,[        setState(State.QUIESCED);,     }],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,onOpen,370-370,[            Collection<GroupMember> members = new ArrayList<GroupMember>();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,activate,362-363,[            setState(State.ACTIVE);,         }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,doDelete,443-447,[            getSecurityManager().authoriseGroupOperation(Operation.DELETE, getName());,             _groupDatabase.removeGroup(getName());,             deleted();,             setState(State.DELETED);,         }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,activate,490-491,[                setState(State.ACTIVE);,             }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileBasedGroupProviderImpl.java,doDelete,496-501,[                getSecurityManager().authoriseGroupOperation(Operation.UPDATE, GroupAdapter.this.getName());, ,                 _groupDatabase.removeUserFromGroup(getName(), GroupAdapter.this.getName());,                 deleted();,                 setState(State.DELETED);,             }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,activate,84-94,[            _store = new FileSystemPreferencesStore(new File(_path));,             createStoreIfNotExist();,             _store.open();,             _open = true;,             setState(State.ACTIVE);,         },         catch( RuntimeException e ),         {,             setState(State.ERRORED);,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,doDelete,139-149,[        close();, ,         if(_store != null),         {,             _store.delete();,             deleted();,             _authenticationProvider.setPreferencesProvider(null);, ,         },         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,doQuiesce,129-134,[        if(_store != null),         {,             _store.close();,         },         setState(State.QUIESCED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,openNewStore,205-223,[        if(_open),         {,             if (_store != null),             {,                 _store.close();,             }, ,             if (_path == null),             {,                 _store = null;,             },             else,             {,                 _store = new FileSystemPreferencesStore(new File(_path));,                 createStoreIfNotExist();,                 _store.open();,             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,restart,154-156,[        _store.open();,         setState(State.ACTIVE);,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderImpl.java,,361-361,[                                {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderTest.java,tearDown,86-86,[            _preferencesFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderTest.java,testChangeAttributes,177-177,[            newPrefsFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderTest.java,testConstructionWithEmptyFile,126-126,[        emptyPrefsFile.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderTest.java,testConstructionWithEmptyFile,140-140,[            emptyPrefsFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/model/adapter/FileSystemPreferencesProviderTest.java,testConstructionWithNonExistingFile,119-119,[            nonExistingFile.delete();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/model/adapter/PortFactoryTest.java,setUp,76-76,[        TaskExecutor executor = CurrentThreadTaskExecutor.newStartedInstance();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/adapter/SessionAdapter.java,doDelete,174-176,[        deleted();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/port/AbstractPort.java,doDelete,316-318,[        close();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/model/port/AbstractPort.java,startQuiesced,338-339,[        setState(State.QUIESCED);,     }],,
BAD_PRACTICE,IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION,org/apache/qpid/server/model/port/AmqpPort.java,<clinit>,49-49,[    String INSTALLED_PROTOCOLS = AmqpPortImpl.getInstalledProtocolsAsString();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/server/model/port/AmqpPortImpl.java,isTcpNoDelay,97-97,[        return _tcpNoDelay;],,isTcpNodelay,100-100,[        return tcpNodelay;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/model/testmodel/TestModel.java,,55-65,[        {,             @Override,             public Collection<Class<? extends ConfiguredObject>> getConfiguredObjectClasses(),             {,                 return Arrays.<Class<? extends ConfiguredObject>>asList(TestRootCategoryImpl.class, Test2RootCategoryImpl.class);,             }, ,             @Override,             public String getType(),             {,                 return "test";],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/server/plugin/AMQPProtocolVersionWrapper.java,<init>,44-50,[            switch (i),             {,                 case 1: this._major = Integer.parseInt(parts[i]);,                     break;,                 case 2: this._minor = Integer.parseInt(parts[i]);,                     break;,                 case 3: this._patch = Integer.parseInt(parts[i]);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/server/plugin/PluggableProcessor.java,generateServiceFiles,158-158,[                for (String implementation : factoryImplementations.get(serviceName))],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/qpid/server/plugin/ProtocolEngineCreatorComparator.java,,25-47,[public class ProtocolEngineCreatorComparator implements Comparator<ProtocolEngineCreator>, {,     @Override,     public int compare(ProtocolEngineCreator pec1, ProtocolEngineCreator pec2),     {,         final AMQPProtocolVersionWrapper v1 = new AMQPProtocolVersionWrapper(pec1.getVersion());,         final AMQPProtocolVersionWrapper v2 = new AMQPProtocolVersionWrapper(pec2.getVersion());, ,         if (v1.getMajor() != v2.getMajor()),         {,             return v1.getMajor() - v2.getMajor();,         },         else if (v1.getMinor() != v2.getMinor()),         {,             return v1.getMinor() - v2.getMinor();,         },         else if (v1.getPatch() != v2.getPatch()),         {,             return v1.getPatch() - v2.getPatch();,         },         else,         {,             return 0;],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/plugin/QpidServiceLoader.java,isDisabled,81-81,[        return Boolean.getBoolean("qpid.plugin.disabled:"+clazz.getSimpleName().toLowerCase()+"."+next.getType())],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/plugin/QpidServiceLoader.java,isDisabledConfiguredType,87-87,[        return Boolean.getBoolean("qpid.type.disabled:" + typeFactory.getCategoryClass().getSimpleName().toLowerCase()],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java,closed,431-431,[                catch(Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java,closed,421-421,[            catch(Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/qpid/server/protocol/MultiVersionProtocolEngine.java,,467-583,[    private class SslDelegateProtocolEngine implements ServerProtocolEngine,     {,         private final MultiVersionProtocolEngine _decryptEngine;,         private final SSLEngine _engine;,         private final SSLReceiver _sslReceiver;,         private final SSLBufferingSender _sslSender;,         private long _lastReadTime;, ,         private SslDelegateProtocolEngine(),         {, ,             _decryptEngine = new MultiVersionProtocolEngine(_broker, null, false, false, _supported,,                                                             _defaultSupportedReply, _port, Transport.SSL, _id, _creators);, ,             _engine = _sslContext.createSSLEngine();,             _engine.setUseClientMode(false);, ,             if(_needClientAuth),             {,                 _engine.setNeedClientAuth(_needClientAuth);,             },             else if(_wantClientAuth),             {,                 _engine.setWantClientAuth(_wantClientAuth);,             }, ,             SSLStatus sslStatus = new SSLStatus();,             _sslReceiver = new SSLReceiver(_engine,_decryptEngine,sslStatus);,             _sslSender = new SSLBufferingSender(_engine,_sender,sslStatus);,             _decryptEngine.setNetworkConnection(new SSLNetworkConnection(_engine,_network, _sslSender), _sslSender);,         }, ,         @Override,         public void received(ByteBuffer msg),         {,             _lastReadTime = System.currentTimeMillis();,             _sslReceiver.received(msg);,             _sslSender.send();,             _sslSender.flush();,         }, ,         @Override,         public void setNetworkConnection(NetworkConnection network, Sender<ByteBuffer> sender),         {,             //TODO - Implement,         }, ,         @Override,         public SocketAddress getRemoteAddress(),         {,             return _decryptEngine.getRemoteAddress();,         }, ,         @Override,         public SocketAddress getLocalAddress(),         {,             return _decryptEngine.getLocalAddress();,         }, ,         @Override,         public long getWrittenBytes(),         {,             return _decryptEngine.getWrittenBytes();,         }, ,         @Override,         public long getReadBytes(),         {,             return _decryptEngine.getReadBytes();,         }, ,         @Override,         public void closed(),         {,             _decryptEngine.closed();,         }, ,         @Override,         public void writerIdle(),         {,             _decryptEngine.writerIdle();,         }, ,         @Override,         public void readerIdle(),         {,             _decryptEngine.readerIdle();,         }, ,         @Override,         public void exception(Throwable t),         {,             _decryptEngine.exception(t);,         }, ,         @Override,         public long getConnectionId(),         {,             return _decryptEngine.getConnectionId();,         }, ,         @Override,         public Subject getSubject(),         {,             return _decryptEngine.getSubject();,         }, ,         @Override,         public long getLastReadTime(),         {,             return _lastReadTime;,         }, ,         @Override,         public long getLastWriteTime(),         {,             return _decryptEngine.getLastWriteTime();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/protocol/MultiVersionProtocolEngineFactoryTest.java,getAmqpHeader,144-144,[                return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/MultiVersionProtocolEngineFactoryTest.java,,233-248,[            {,                 public void setIdleTimeout(int i),                 {,                 }, ,                 public void send(ByteBuffer msg),                 {,                 }, ,                 public void flush(),                 {,                 }, ,                 public void close(),                 {,                 }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/converter/v0_10_v1_0/MessageConverter_1_0_to_v0_10.java,convertMetaData,155-155,[            messageProps.setCorrelationId(origHeader.getCorrelationId().getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_10_v1_0/MessageConverter_1_0_to_v0_10.java,,76-129,[        {,             @Override,             public MessageMetaData_0_10 getMetaData(),             {,                 return messageMetaData_0_10;,             }, ,             @Override,             public long getMessageNumber(),             {,                 return serverMsg.getMessageNumber();,             }, ,             @Override,             public void addContent(int offsetInMessage, ByteBuffer src),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public int getContent(int offsetInMessage, ByteBuffer dst),             {,                 int size = messageContent.length - offsetInMessage;,                 if(dst.remaining() < size),                 {,                     size = dst.remaining();,                 },                 ByteBuffer buf = ByteBuffer.wrap(messageContent, offsetInMessage, size);,                 dst.put(buf);,                 return size;,             }, ,             @Override,             public ByteBuffer getContent(int offsetInMessage, int size),             {,                 return ByteBuffer.wrap(messageContent, offsetInMessage, size);,             }, ,             @Override,             public void remove(),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isInMemory(),             {,                 return true;,             }, ,             @Override,             public boolean flowToDisk(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java,,181-227,[        {,             @Override,             public MessageMetaData getMetaData(),             {,                 return metaData;,             }, ,             @Override,             public long getMessageNumber(),             {,                 return message.getMessageNumber();,             }, ,             @Override,             public void addContent(int offsetInMessage, ByteBuffer src),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public int getContent(int offsetInMessage, ByteBuffer dst),             {,                 return message.getContent(dst, offsetInMessage);,             }, ,             @Override,             public ByteBuffer getContent(int offsetInMessage, int size),             {,                 return message.getContent(offsetInMessage, size);,             }, ,             @Override,             public void remove(),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isInMemory(),             {,                 return true;,             }, ,             @Override,             public boolean flowToDisk(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_10_to_0_8.java,,260-288,[        {,             @Override,             public AMQShortString getExchange(),             {,                 return exchangeName;,             }, ,             @Override,             public void setExchange(AMQShortString exchange),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isImmediate(),             {,                 return immediate;,             }, ,             @Override,             public boolean isMandatory(),             {,                 return mandatory;,             }, ,             @Override,             public AMQShortString getRoutingKey(),             {,                 return routingKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_8_v0_10/MessageConverter_0_8_to_0_10.java,,70-116,[        {,             @Override,             public MessageMetaData_0_10 getMetaData(),             {,                 return messageMetaData_0_10;,             }, ,             @Override,             public long getMessageNumber(),             {,                 return message_0_8.getMessageNumber();,             }, ,             @Override,             public void addContent(int offsetInMessage, ByteBuffer src),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public int getContent(int offsetInMessage, ByteBuffer dst),             {,                 return message_0_8.getContent(dst, offsetInMessage);,             }, ,             @Override,             public ByteBuffer getContent(int offsetInMessage, int size),             {,                 return message_0_8.getContent(offsetInMessage, size);,             }, ,             @Override,             public void remove(),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isInMemory(),             {,                 return true;,             }, ,             @Override,             public boolean flowToDisk(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java,,78-131,[        {,             @Override,             public MessageMetaData getMetaData(),             {,                 return messageMetaData_0_8;,             }, ,             @Override,             public long getMessageNumber(),             {,                 return serverMsg.getMessageNumber();,             }, ,             @Override,             public void addContent(int offsetInMessage, ByteBuffer src),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public int getContent(int offsetInMessage, ByteBuffer dst),             {,                 int size = messageContent.length - offsetInMessage;,                 if(dst.remaining() < size),                 {,                     size = dst.remaining();,                 },                 ByteBuffer buf = ByteBuffer.wrap(messageContent, offsetInMessage, size);,                 dst.put(buf);,                 return size;,             }, ,             @Override,             public ByteBuffer getContent(int offsetInMessage, int size),             {,                 return ByteBuffer.wrap(messageContent, offsetInMessage, size);,             }, ,             @Override,             public void remove(),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isInMemory(),             {,                 return true;,             }, ,             @Override,             public boolean flowToDisk(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/converter/v0_8_v1_0/MessageConverter_1_0_to_v0_8.java,,142-176,[                                            {,                                                 @Override,                                                 public AMQShortString getExchange(),                                                 {,                                                     return null;,                                                 }, ,                                                 @Override,                                                 public void setExchange(final AMQShortString amqShortString),                                                 {,                                                     throw new UnsupportedOperationException();,                                                 }, ,                                                 @Override,                                                 public boolean isImmediate(),                                                 {,                                                     return false;,                                                 }, ,                                                 @Override,                                                 public boolean isMandatory(),                                                 {,                                                     return false;,                                                 }, ,                                                 @Override,                                                 public AMQShortString getRoutingKey(),                                                 {,                                                     String key = header.getTo();,                                                     if(key == null),                                                     {,                                                         key = header.getSubject();,                                                     }, ,                                                     return AMQShortString.valueOf(key);],,
STYLE,UC_USELESS_CONDITION,org/apache/qpid/server/protocol/v0_10/CreditCreditManager.java,addCredit,82-82,[            notifyIncrease = notifyIncrease && bytesCredit>0;],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/protocol/v0_10/CreditCreditManager.java,useCreditForMessage,121-121,[                    _messageCredit--;],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/protocol/v0_10/CreditCreditManager.java,useCreditForMessage,127-127,[                    _messageCredit--;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageConverter_Internal_to_v0_10.java,convertMetaData,140-140,[            messageProps.setCorrelationId(serverMsg.getMessageHeader().getCorrelationId().getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/MessageConverter_Internal_to_v0_10.java,,65-118,[                {,                     @Override,                     public MessageMetaData_0_10 getMetaData(),                     {,                         return messageMetaData_0_10;,                     }, ,                     @Override,                     public long getMessageNumber(),                     {,                         return serverMsg.getMessageNumber();,                     }, ,                     @Override,                     public void addContent(int offsetInMessage, ByteBuffer src),                     {,                         throw new UnsupportedOperationException();,                     }, ,                     @Override,                     public int getContent(int offsetInMessage, ByteBuffer dst),                     {,                         int size = messageContent.length - offsetInMessage;,                         if(dst.remaining() < size),                         {,                             size = dst.remaining();,                         },                         ByteBuffer buf = ByteBuffer.wrap(messageContent, offsetInMessage, size);,                         dst.put(buf);,                         return size;,                     }, ,                     @Override,                     public ByteBuffer getContent(int offsetInMessage, int size),                     {,                         return ByteBuffer.wrap(messageContent, offsetInMessage, size);,                     }, ,                     @Override,                     public void remove(),                     {,                         throw new UnsupportedOperationException();,                     }, ,                     @Override,                     public boolean isInMemory(),                     {,                         return true;,                     }, ,                     @Override,                     public boolean flowToDisk(),                     {,                         return false;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageConverter_v0_10.java,convertMetaData,144-144,[            messageProps.setCorrelationId(serverMsg.getMessageHeader().getCorrelationId().getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/MessageConverter_v0_10.java,,72-118,[                {,                     @Override,                     public MessageMetaData_0_10 getMetaData(),                     {,                         return messageMetaData_0_10;,                     }, ,                     @Override,                     public long getMessageNumber(),                     {,                         return serverMsg.getMessageNumber();,                     }, ,                     @Override,                     public void addContent(int offsetInMessage, ByteBuffer src),                     {,                         throw new UnsupportedOperationException();,                     }, ,                     @Override,                     public int getContent(int offsetInMessage, ByteBuffer dst),                     {,                         return serverMsg.getContent(dst, offsetInMessage);,                     }, ,                     @Override,                     public ByteBuffer getContent(int offsetInMessage, int size),                     {,                         return serverMsg.getContent(offsetInMessage, size);,                     }, ,                     @Override,                     public void remove(),                     {,                         throw new UnsupportedOperationException();,                     }, ,                     @Override,                     public boolean isInMemory(),                     {,                         return true;,                     }, ,                     @Override,                     public boolean flowToDisk(),                     {,                         return false;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageConverter_v0_10_to_Internal.java,convertMessageBody,185-185,[            String text = new String(data);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageTransferHeader.java,getAppId,70-70,[        return appIdBytes == null ? null : new String(appIdBytes);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageTransferHeader.java,getCorrelationId,48-48,[            return new String(_messageProps.getCorrelationId());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/MessageTransferHeader.java,getUserId,64-64,[        return userIdBytes == null ? null : new String(userIdBytes);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/protocol/v0_10/ServerConnectionDelegate.java,getFeatures,107-107,[        if (features != null && features.size() > 0)],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/protocol/v0_10/ServerSession.java,compareTo,1070-1070,[        return getId().compareTo(o.getId());],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/server/protocol/v0_10/ServerSession.java,acquire,341-341,[                        MessageDispositionChangeListener changeListener = _messageDispositionListenerMap.get(next);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/ServerSession.java,,280-284,[        {,             public void performAction(MessageDispositionChangeListener listener),             {,                 listener.onAccept();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/ServerSession.java,,292-296,[                                      {,                                           public void performAction(MessageDispositionChangeListener listener),                                           {,                                               listener.onRelease(setRedelivered);,                                           }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/ServerSession.java,,303-307,[                                      {,                                           public void performAction(MessageDispositionChangeListener listener),                                           {,                                               listener.onReject();,                                           }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/ServerSession.java,,459-472,[                             {, ,                                  public void postCommit(),                                  {,                                      sub.deleteAcquired(entry);,                                  }, ,                                  public void onRollback(),                                  {,                                      // The client has acknowledge the message and therefore have seen it.,                                      // In the event of rollback, the message must be marked as redelivered.,                                      entry.setRedelivered();,                                      entry.release();,                                  }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java,convertBooleanValue,1373-1385,[        if(argValue instanceof Boolean && ((Boolean)argValue)),         {,             return true;,         },         else if (argValue instanceof String && Boolean.parseBoolean((String)argValue)),         {,             return true;,         },         else if (argValue instanceof Number && ((Number)argValue).intValue() != 0),         {,             return true;,         },         return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_10/ServerSessionDelegate.java,,364-381,[        {,             @Override,             public Object getProperty(final Property prop),             {,                 switch(prop),                 {,                     case EXPIRATION:,                         return message.getExpiration();,                     case IMMEDIATE:,                         return message.isImmediate();,                     case MANDATORY:,                         return (delvProps == null || !delvProps.getDiscardUnroutable()) && xfr.getAcceptMode() == MessageAcceptMode.EXPLICIT;,                     case PERSISTENT:,                         return message.isPersistent();,                     case REDELIVERED:,                         return delvProps.getRedelivered();,                 },                 return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_10/ServerSessionTest.java,testCompareTo,65-65,[                new Binary(getName().getBytes()), 0);],,testCompareTo,71-71,[                new Binary(getName().getBytes()), 0);],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/protocol/v0_10/WindowCreditManager.java,useCreditForMessage,135-135,[                    _messageUsed++;],,
MT_CORRECTNESS,VO_VOLATILE_INCREMENT,org/apache/qpid/server/protocol/v0_10/WindowCreditManager.java,useCreditForMessage,141-141,[                    _messageUsed++;],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/protocol/v0_8/AMQChannel.java,compareTo,1307-1307,[        return getId().compareTo(o.getId());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,protocolInitiationReceived,555-555,[                                                                                       mechanisms.getBytes(),],,protocolInitiationReceived,556-556,[                                                                                       locales.getBytes());],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,,1340-1340,[            _sender.close();],,,1360-1360,[                _sender.close();],,,245-245,[        _sender = sender;],,,717-717,[        _sender.send(buf);],,,724-724,[            _sender.flush();],,,565-565,[            _sender.send(asByteBuffer(new ProtocolInitiation(ProtocolVersion.getLatestSupportedVersion())));],,,566-566,[            _sender.flush();],,,557-557,[            _sender.send(asByteBuffer(responseBody.generateFrame(0)));],,,558-558,[            _sender.flush();],,,271-271,[        _sender.flush();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,,1394-1394,[        return _lastIoTime;],,,719-719,[        _lastIoTime = time;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,,1389-1389,[        return _writtenBytes;],,,710-710,[        _writtenBytes += buf.remaining();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,methodFrameReceived,671-671,[        catch (Exception e)],,
MT_CORRECTNESS,UL_UNRELEASED_LOCK,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,closeSession,1021-1021,[                                _receivedLock.lock();],,
MT_CORRECTNESS,UL_UNRELEASED_LOCK_EXCEPTION_PATH,org/apache/qpid/server/protocol/v0_8/AMQProtocolEngine.java,closeSession,1021-1021,[                                _receivedLock.lock();],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/server/protocol/v0_8/AckTest.java,publishMessages,132-132,[            ArrayList<AMQQueue> qs = new ArrayList<AMQQueue>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/AckTest.java,,94-118,[            {, ,                 public AMQShortString getExchange(),                 {,                     return new AMQShortString("someExchange");,                 }, ,                 public void setExchange(AMQShortString exchange),                 {,                     //To change body of implemented methods use File | Settings | File Templates.,                 }, ,                 public boolean isImmediate(),                 {,                     return false;,                 }, ,                 public boolean isMandatory(),                 {,                     return false;,                 }, ,                 public AMQShortString getRoutingKey(),                 {,                     return new AMQShortString("rk");],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/ExtractResendAndRequeueTest.java,,93-98,[            {,                 @Override,                 public Object answer(final InvocationOnMock invocation) throws Throwable,                 {,                     when(entry.isDeleted()).thenReturn(true);,                     return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/protocol/v0_8/InternalTestProtocolSession.java,,204-216,[        {,             _deliveryTag = deliveryTag;,             _message = message;,         }, ,         public ServerMessage getMessage(),         {,             return _message;,         }, ,         public long getDeliveryTag(),         {,             return _deliveryTag;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/InternalTestProtocolSession.java,,290-305,[            {,                 public void setIdleTimeout(int i),                 {,                 }, ,                 public void send(ByteBuffer msg),                 {,                 }, ,                 public void flush(),                 {,                 }, ,                 public void close(),                 {,                 }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/protocol/v0_8/MaxChannelsTest.java,testChannels,49-49,[        assertEquals("Number of channels not correctly set.", new Long(maxChannels), _session.getMaximumNumberOfChannels());],,testChannels,65-65,[        assertEquals("Maximum number of channels not set.", new Long(maxChannels), new Long(_session.getChannels().size()));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/MessageConverter_Internal_to_v0_8.java,,77-130,[        {,             @Override,             public MessageMetaData getMetaData(),             {,                 return messageMetaData_0_8;,             }, ,             @Override,             public long getMessageNumber(),             {,                 return serverMsg.getMessageNumber();,             }, ,             @Override,             public void addContent(int offsetInMessage, ByteBuffer src),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public int getContent(int offsetInMessage, ByteBuffer dst),             {,                 int size = messageContent.length - offsetInMessage;,                 if(dst.remaining() < size),                 {,                     size = dst.remaining();,                 },                 ByteBuffer buf = ByteBuffer.wrap(messageContent, offsetInMessage, size);,                 dst.put(buf);,                 return size;,             }, ,             @Override,             public ByteBuffer getContent(int offsetInMessage, int size),             {,                 return ByteBuffer.wrap(messageContent, offsetInMessage, size);,             }, ,             @Override,             public void remove(),             {,                 throw new UnsupportedOperationException();,             }, ,             @Override,             public boolean isInMemory(),             {,                 return true;,             }, ,             @Override,             public boolean flowToDisk(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/MessageConverter_Internal_to_v0_8.java,,139-167,[                                            {,                                                 @Override,                                                 public AMQShortString getExchange(),                                                 {,                                                     return AMQShortString.EMPTY_STRING;,                                                 }, ,                                                 @Override,                                                 public void setExchange(final AMQShortString amqShortString),                                                 {,                                                     throw new UnsupportedOperationException();,                                                 }, ,                                                 @Override,                                                 public boolean isImmediate(),                                                 {,                                                     return false;,                                                 }, ,                                                 @Override,                                                 public boolean isMandatory(),                                                 {,                                                     return false;,                                                 }, ,                                                 @Override,                                                 public AMQShortString getRoutingKey(),                                                 {,                                                     return AMQShortString.valueOf(serverMsg.getInitialRoutingAddress());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_8/MessageConverter_v0_8_to_Internal.java,convertMessageBody,277-277,[            String text = new String(data);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/MessageMetaData.java,,174-197,[                        {, ,                             public AMQShortString getExchange(),                             {,                                 return exchange;,                             }, ,                             public void setExchange(AMQShortString exchange),                             {,                             }, ,                             public boolean isImmediate(),                             {,                                 return (flags & IMMEDIATE_FLAG) != 0;,                             }, ,                             public boolean isMandatory(),                             {,                                 return (flags & MANDATORY_FLAG) != 0;,                             }, ,                             public AMQShortString getRoutingKey(),                             {,                                 return routingKey;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,setUp,50-50,[        _store = new TestMemoryMessageStore();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,,61-85,[        {, ,             public AMQShortString getExchange(),             {,                 return null;,             }, ,             public void setExchange(AMQShortString exchange),             {,                 //To change body of implemented methods use File | Settings | File Templates.,             }, ,             public boolean isImmediate(),             {,                 return false;,             }, ,             public boolean isMandatory(),             {,                 return false;,             }, ,             public AMQShortString getRoutingKey(),             {,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,,128-152,[        {, ,             public AMQShortString getExchange(),             {,                 return null;,             }, ,             public void setExchange(AMQShortString exchange),             {,                 //To change body of implemented methods use File | Settings | File Templates.,             }, ,             public boolean isImmediate(),             {,                 return false;,             }, ,             public boolean isMandatory(),             {,                 return false;,             }, ,             public AMQShortString getRoutingKey(),             {,                 return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,getId,188-188,[                return UUID.nameUUIDFromBytes(queueName.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,,178-194,[        {,             @Override,             public String getName(),             {,                 return queueName;,             }, ,             @Override,             public UUID getId(),             {,                 return UUID.nameUUIDFromBytes(queueName.getBytes());,             }, ,             @Override,             public MessageDurability getMessageDurability(),             {,                 return MessageDurability.DEFAULT;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/ReferenceCountingTest.java,,202-218,[        {,             @Override,             public long getMessageNumber(),             {,                 return storedMessage.getMessageNumber();,             }, ,             @Override,             public boolean isPersistent(),             {,                 return true;,             }, ,             @Override,             public StoredMessage getStoredMessage(),             {,                 return storedMessage;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/handler/TxCommitHandler.java,,66-74,[            {, ,                 @Override,                 public void run(),                 {,                     MethodRegistry methodRegistry = session.getMethodRegistry();,                     AMQMethodBody responseBody = methodRegistry.createTxCommitOkBody();,                     session.writeFrame(responseBody.generateFrame(channelId));,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/handler/TxRollbackHandler.java,,64-69,[            {, ,                 public void run(),                 {,                     session.writeFrame(responseBody.generateFrame(channelId));,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/output/ProtocolOutputConverterImpl.java,,157-175,[        {,             @Override,             public int getContent(final ByteBuffer buf, final int offset),             {,                 int size = Math.min(buf.remaining(), content.length - offset);,                 buf.put(content, offset, size);,                 return size;,             }, ,             @Override,             public ByteBuffer getContent(final int offset, final int size),             {,                 return ByteBuffer.wrap(content, offset, size);,             }, ,             @Override,             public long getSize(),             {,                 return content.length;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/protocol/v0_8/output/ProtocolOutputConverterImpl.java,,233-276,[        {,             _message = message;,             _offset = offset;,             _length = length;,         }, ,         public byte getFrameType(),         {,             return TYPE;,         }, ,         public int getSize(),         {,             return _length;,         }, ,         public void writePayload(DataOutput buffer) throws IOException,         {,             ByteBuffer buf = _message.getContent(_offset, _length);, ,             if(buf.hasArray()),             {,                 buffer.write(buf.array(), buf.arrayOffset()+buf.position(), buf.remaining());,             },             else,             {, ,                 byte[] data = new byte[_length];, ,                 buf.get(data);, ,                 buffer.write(data);,             },         }, ,         public void handle(int channelId, AMQVersionAwareProtocolSession amqProtocolSession) throws AMQException,         {,             throw new UnsupportedOperationException();,         }, ,         @Override,         public String toString(),         {,             return "[" + getClass().getSimpleName() + " offset: " + _offset + ", length: " + _length + "]";],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v0_8/state/AMQStateManager.java,,118-122,[                {,                     @Override,                     public Boolean run() throws AMQException,                     {,                         return body.execute(dispatcher, channelId);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/Connection_1_0.java,,168-195,[            {,                 @Override,                 public void remoteLinkCreation(final LinkEndpoint endpoint),                 {,                     Subject.doAs(session.getSubject(), new PrivilegedAction<Object>(),                     {,                         @Override,                         public Object run(),                         {,                             session.remoteLinkCreation(endpoint);,                             return null;,                         },                     });,                 }, ,                 @Override,                 public void remoteEnd(final End end),                 {,                     Subject.doAs(session.getSubject(), new PrivilegedAction<Object>(),                     {,                         @Override,                         public Object run(),                         {,                             session.remoteEnd(end);,                             return null;,                         },                     });,                 }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java,send,248-248,[                    if(txn != null)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/protocol/v1_0/ConsumerTarget_1_0.java,,477-494,[        {,         }, ,         public boolean process(final DeliveryState state, final Boolean settled),         {,             Binary transactionId = null;,             Outcome outcome = null;,             // If disposition is settled this overrides the txn?,             if(state instanceof TransactionalState),             {,                 transactionId = ((TransactionalState)state).getTxnId();,                 outcome = ((TransactionalState)state).getOutcome();,             },             else if (state instanceof Outcome),             {,                 outcome = (Outcome) state;,             },             return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/ExchangeDestination.java,,59-77,[            {, ,                 @Override,                 public Object getProperty(final Property prop),                 {,                     switch(prop),                     {,                         case MANDATORY:,                             return false;,                         case REDELIVERED:,                             return false;,                         case PERSISTENT:,                             return message.isPersistent();,                         case IMMEDIATE:,                             return false;,                         case EXPIRATION:,                             return message.getExpiration();,                     },                     return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/protocol/v1_0/MessageConverter_to_1_0.java,convertMessageBody,85-85,[            String text = new String(data);],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/server/protocol/v1_0/MessageMetaData_1_0.java,getReplyTo,515-515,[                return _properties.getReplyTo().toString();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/NodeReceivingDestination.java,,58-76,[            {, ,                 @Override,                 public Object getProperty(final Property prop),                 {,                     switch(prop),                     {,                         case MANDATORY:,                             return false;,                         case REDELIVERED:,                             return false;,                         case PERSISTENT:,                             return message.isPersistent();,                         case IMMEDIATE:,                             return false;,                         case EXPIRATION:,                             return message.getExpiration();,                     },                     return null;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/protocol/v1_0/ProtocolEngine_1_0_0_SASL.java,,549-549,[        return _lastReadTime;],,,281-281,[            _lastReadTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/protocol/v1_0/ProtocolEngine_1_0_0_SASL.java,,163-163,[        return _readBytes;],,,290-290,[            _readBytes += msg.remaining();],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/server/protocol/v1_0/ProtocolEngine_1_0_0_SASL.java,received,296-303,[                        msg.get();,                     },                     else,                     {,                         break;,                     },                 case M:,                     if (msg.hasRemaining())],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/ProtocolEngine_1_0_0_SASL.java,,191-202,[        {,             @Override,             public boolean isEnabled(),             {,                 return FRAME_LOGGER.isDebugEnabled();,             }, ,             @Override,             public void received(final SocketAddress remoteAddress, final short channel, final Object frame),             {,                 FRAME_LOGGER.debug("RECV[" + remoteAddress + "|" + channel + "] : " + frame);,             }],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/protocol/v1_0/QueueDestination.java,,32-79,[public class QueueDestination extends MessageSourceDestination implements SendingDestination, ReceivingDestination, {,     private static final Logger _logger = Logger.getLogger(QueueDestination.class);,     private static final Accepted ACCEPTED = new Accepted();,     private static final Outcome[] OUTCOMES = new Outcome[] { ACCEPTED };, , ,     public QueueDestination(AMQQueue queue),     {,         super(queue);,     }, ,     public Outcome[] getOutcomes(),     {,         return OUTCOMES;,     }, ,     public Outcome send(final Message_1_0 message, ServerTransaction txn),     {, ,         txn.enqueue(getQueue(),message, new ServerTransaction.Action(),         {, , ,             public void postCommit(),             {,                 getQueue().enqueue(message,null);,             }, ,             public void onRollback(),             {,                 // NO-OP,             },         });, , ,         return ACCEPTED;,     }, ,     public int getCredit(),     {,         // TODO - fix,         return 100;,     }, ,     public AMQQueue getQueue(),     {,         return (AMQQueue) super.getQueue();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/protocol/v1_0/SendingLink_1_0.java,<init>,360-360,[        if(_target != null)],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/server/protocol/v1_0/SendingLink_1_0.java,remoteDetached,419-419,[                        endpoint.getLock().wait(100);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/SendingLink_1_0.java,,657-665,[                                        {,                                             public void postCommit(),                                             {,                                                 queueEntry.delete();,                                             }, ,                                             public void onRollback(),                                             {,                                             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/protocol/v1_0/SendingLink_1_0.java,,677-686,[                                {,                                     public void postCommit(),                                     {,                                         queueEntry.release();,                                     }, ,                                     public void onRollback(),                                     {,                                         //To change body of implemented methods use File | Settings | File Templates.,                                     }],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/protocol/v1_0/Session_1_0.java,compareTo,727-727,[        return getId().compareTo(o.getId());],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/queue/AbstractQueue.java,compareTo,96-96,[public abstract class AbstractQueue<X extends AbstractQueue<X>>],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/server/queue/AbstractQueue.java,switchToLinkExclusivity,2640-2643,[                _exclusiveSubscriber = getConsumerList().getHead().getConsumer();,                 // deliberate fall through,             case 0:,                 _exclusiveOwner = null;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/server/queue/AbstractQueue.java,switchToConnectionExclusivity,2681-2704,[        switch(_exclusive),         {,             case NONE:,             case CONTAINER:,             case PRINCIPAL:,                 AMQConnectionModel con = null;,                 for(ConsumerImpl c : getConsumers()),                 {,                     if(con == null),                     {,                         con = c.getSessionModel().getConnectionModel();,                     },                     else if(!con.equals(c.getSessionModel().getConnectionModel())),                     {,                         throw new ExistingConsumerPreventsExclusive();,                     },                 },                 _exclusiveOwner = con;,                 break;,             case SESSION:,                 _exclusiveOwner = _exclusiveOwner == null ? null : ((AMQSessionModel)_exclusiveOwner).getConnectionModel();,                 break;,             case LINK:,                 _exclusiveOwner = _exclusiveSubscriber == null ? null : _exclusiveSubscriber.getSessionModel().getConnectionModel();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/server/queue/AbstractQueue.java,switchToContainerExclusivity,2710-2735,[        switch(_exclusive),         {,             case NONE:,             case PRINCIPAL:,                 String containerID = null;,                 for(ConsumerImpl c : getConsumers()),                 {,                     if(containerID == null),                     {,                         containerID = c.getSessionModel().getConnectionModel().getRemoteContainerName();,                     },                     else if(!containerID.equals(c.getSessionModel().getConnectionModel().getRemoteContainerName())),                     {,                         throw new ExistingConsumerPreventsExclusive();,                     },                 },                 _exclusiveOwner = containerID;,                 break;,             case CONNECTION:,                 _exclusiveOwner = _exclusiveOwner == null ? null : ((AMQConnectionModel)_exclusiveOwner).getRemoteContainerName();,                 break;,             case SESSION:,                 _exclusiveOwner = _exclusiveOwner == null ? null : ((AMQSessionModel)_exclusiveOwner).getConnectionModel().getRemoteContainerName();,                 break;,             case LINK:,                 _exclusiveOwner = _exclusiveSubscriber == null ? null : _exclusiveSubscriber.getSessionModel().getConnectionModel().getRemoteContainerName();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/server/queue/AbstractQueue.java,switchToPrincipalExclusivity,2741-2766,[        switch(_exclusive),         {,             case NONE:,             case CONTAINER:,                 Principal principal = null;,                 for(ConsumerImpl c : getConsumers()),                 {,                     if(principal == null),                     {,                         principal = c.getSessionModel().getConnectionModel().getAuthorizedPrincipal();,                     },                     else if(!principal.equals(c.getSessionModel().getConnectionModel().getAuthorizedPrincipal())),                     {,                         throw new ExistingConsumerPreventsExclusive();,                     },                 },                 _exclusiveOwner = principal;,                 break;,             case CONNECTION:,                 _exclusiveOwner = _exclusiveOwner == null ? null : ((AMQConnectionModel)_exclusiveOwner).getAuthorizedPrincipal();,                 break;,             case SESSION:,                 _exclusiveOwner = _exclusiveOwner == null ? null : ((AMQSessionModel)_exclusiveOwner).getConnectionModel().getAuthorizedPrincipal();,                 break;,             case LINK:,                 _exclusiveOwner = _exclusiveSubscriber == null ? null : _exclusiveSubscriber.getSessionModel().getConnectionModel().getAuthorizedPrincipal();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/server/queue/AbstractQueue.java,switchToSessionExclusivity,2654-2675,[        switch(_exclusive),         {,             case NONE:,             case PRINCIPAL:,             case CONTAINER:,             case CONNECTION:,                 AMQSessionModel session = null;,                 for(ConsumerImpl c : getConsumers()),                 {,                     if(session == null),                     {,                         session = c.getSessionModel();,                     },                     else if(!session.equals(c.getSessionModel())),                     {,                         throw new ExistingConsumerPreventsExclusive();,                     },                 },                 _exclusiveOwner = session;,                 break;,             case LINK:,                 _exclusiveOwner = _exclusiveSubscriber == null ? null : _exclusiveSubscriber.getSessionModel().getConnectionModel();],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/qpid/server/queue/AbstractQueue.java,deleteAndReturnCount,1772-1772,[                if(requeues == 0)],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/AbstractQueue.java,activate,2804-2805,[        setState(State.ACTIVE);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/AbstractQueue.java,doDelete,2817-2820,[        _virtualHost.removeQueue(this);,         preSetAlternateExchange();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/AbstractQueue.java,doDeleteBeforeInitialize,2810-2812,[        preSetAlternateExchange();,         setState(State.DELETED);,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/AbstractQueue.java,postSetAlternateExchange,538-542,[        if(_alternateExchange instanceof ExchangeImpl),         {,             ((ExchangeImpl)_alternateExchange).addReference(this);,         },     }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testEnqueueMessageThenRegisterConsumer,210-210,[        ServerMessage messageA = createMessage(new Long(24));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testEnqueueTwoMessagesThenRegisterConsumer,226-226,[        ServerMessage messageA = createMessage(new Long(24));],,testEnqueueTwoMessagesThenRegisterConsumer,227-227,[        ServerMessage messageB = createMessage(new Long(25));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testExclusiveConsumer,442-442,[        ServerMessage messageA = createMessage(new Long(24));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetFirstFiveMessageIds,548-548,[            Long messageId = new Long(i);],,testGetFirstFiveMessageIds,559-559,[            Long messageId = new Long(i);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetFirstMessageId,531-531,[        Long messageId = new Long(23);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetLastFiveMessageIds,569-569,[            Long messageId = new Long(i);],,testGetLastFiveMessageIds,580-580,[            Long messageId = new Long(i+5);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetMessagesOnTheQueueByQueueEntryFilterWithDequeuedEntry,804-804,[                assertFalse("Message with id " + dequeueMessageIndex],,testGetMessagesOnTheQueueByQueueEntryFilterWithDequeuedEntry,809-809,[            assertEquals("Expected message with id " + expectedId + " but got message with id " + id,],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetMessagesOnTheQueueWithDequeuedEntry,756-756,[                assertFalse("Message with id " + dequeueMessageIndex],,testGetMessagesOnTheQueueWithDequeuedEntry,761-761,[            assertEquals("Expected message with id " + expectedId + " but got message with id " + id,],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testGetMessagesRangeOnTheQueue,590-590,[            Long messageId = new Long(i);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testNotificationFiredAsync,862-862,[        _queue.enqueue(createMessage(new Long(24)), null);],,testNotificationFiredAsync,863-863,[        _queue.enqueue(createMessage(new Long(25)), null);],,testNotificationFiredAsync,864-864,[        _queue.enqueue(createMessage(new Long(26)), null);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testNotificationFiredOnEnqueue,850-850,[        _queue.enqueue(createMessage(new Long(24)), null);],,testNotificationFiredOnEnqueue,853-853,[        _queue.enqueue(createMessage(new Long(25)), null);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testRegisterConsumerThenEnqueueMessage,172-172,[        ServerMessage messageA = createMessage(new Long(24));],,testRegisterConsumerThenEnqueueMessage,202-202,[        ServerMessage messageB = createMessage(new Long (25));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testReleaseForQueueWithMultipleConsumers,396-396,[        ServerMessage messageA = createMessage(new Long(24));],,testReleaseForQueueWithMultipleConsumers,397-397,[        ServerMessage messageB = createMessage(new Long(25));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testReleaseMessageThatBecomesExpiredIsNotRedelivered,296-296,[        ServerMessage messageA = createMessage(new Long(24));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testReleasedMessageIsResentToSubscriber,246-246,[        ServerMessage messageA = createMessage(new Long(24));],,testReleasedMessageIsResentToSubscriber,247-247,[        ServerMessage messageB = createMessage(new Long(25));],,testReleasedMessageIsResentToSubscriber,248-248,[        ServerMessage messageC = createMessage(new Long(26));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testReleasedOutOfComparableOrderAreRedelivered,346-346,[        ServerMessage messageA = createMessage(new Long(24));],,testReleasedOutOfComparableOrderAreRedelivered,347-347,[        ServerMessage messageB = createMessage(new Long(25));],,testReleasedOutOfComparableOrderAreRedelivered,348-348,[        ServerMessage messageC = createMessage(new Long(26));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/queue/AbstractQueueTestBase.java,testResend,506-506,[        Long id = new Long(26);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,710-716,[        {,             @Override,             public void run(),             {,                 // we don't actually want/need this runner to do any work,                 // because we we are already doing it!,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,784-792,[        {,             public boolean accept(QueueEntry entry),             {,                 return true;,             }, ,             public boolean filterComplete(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,964-969,[        {,             @Override,             public boolean visit(final QueueEntry entry),             {,                 entries.add(entry);,                 return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,1116-1120,[        {,             @Override,             public Boolean answer(final InvocationOnMock invocationOnMock) throws Throwable,             {,                 return arguments.containsKey(nameCaptor.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,1126-1130,[        {,             @Override,             public Boolean answer(final InvocationOnMock invocationOnMock) throws Throwable,             {,                 return arguments.keySet().containsAll(namesCaptor.getValue());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/AbstractQueueTestBase.java,,1136-1140,[        {,             @Override,             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable,             {,                 return arguments.get(nameCaptor2.getValue());],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/queue/ConsumerListTest.java,setUp,41-41,[        _subList = new QueueConsumerList();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/LastValueQueueList.java,,178-189,[                                {,                                     @Override,                                     public void postCommit(),                                     {,                                         entry.delete();,                                     }, ,                                     @Override,                                     public void onRollback(),                                     {, ,                                     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/LastValueQueueListTest.java,createTestQueue,234-238,[        AMQQueue queue = mock(AMQQueue.class);,         VirtualHostImpl virtualHost = mock(VirtualHostImpl.class);,         when(queue.getVirtualHost()).thenReturn(virtualHost);, ,         return queue;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/qpid/server/queue/MessageGroupQueueTest.java,,48-48,[    protected final String QUEUE = "MessageGroupQueue";],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/queue/ModelTest.java,testCreationDurableViaJMX,200-200,[        createViaJMXandValidateViaJMX(name, owner, durable);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/queue/ModelTest.java,testCreationTransientViaJMX,185-185,[        createViaJMXandValidateViaJMX(name, owner, durable);],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/queue/PriorityQueueList.java,compareTo,239-239,[    static class PriorityQueueEntry extends OrderedQueueEntry],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/queue/PriorityQueueListTest.java,setUp,58-58,[        BrokerTestHelper.setUp();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/queue/ProducerFlowControlTest.java,awaitSenderException,490-490,[            _exceptionThrownLatch.await(timeout, TimeUnit.MILLISECONDS);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java,,56-56,[    protected static int MSG_COUNT = 50;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java,,46-46,[    protected final String VHOST = "test";],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/server/queue/QueueDepthWithSelectorTest.java,,47-47,[    protected final String QUEUE = this.getClass().getName();],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/queue/QueueEntryImpl.java,compareTo,45-45,[public abstract class QueueEntryImpl implements QueueEntry],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/queue/QueueEntryImplTestBase.java,getState,185-196,[        EntryState state = null;,         try,         {,             Field f = QueueEntryImpl.class.getDeclaredField("_state");,             f.setAccessible(true);,             state = (EntryState) f.get(_queueEntry);,         },         catch (Exception e),         {,             fail("Failure to get a state field: " + e.getMessage());,         },         return state;],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/queue/QueueEntryListTestBase.java,testAddGenericMessage,86-86,[            iter.getNode();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/queue/QueueEntryListTestBase.java,testAddSpecificMessage,65-65,[            iter.getNode();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/queue/QueueEntryListTestBase.java,testDequeuedMessagedNotPresentInIterator,169-169,[            it2.getNode();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/queue/QueueEntryListTestBase.java,testIterator,135-135,[            iter.getNode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/queue/QueueMessageRecoveryTest.java,,180-198,[        {,             super(attributes, virtualHost);,             _messageList = messageList;,         }, ,         @Override,         QueueEntryList getEntries(),         {,             return null;,         }, ,         @Override,         protected void doEnqueue(final ServerMessage message, final Action<? super MessageInstance> action),         {,             synchronized(_messageList),             {,                 _messageList.add(message);,             },         }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/qpid/server/queue/SimpleQueueEntryImplTest.java,getQueueEntryImpl,76-76,[        return (QueueEntryImpl) queueEntryList.add(message);],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/qpid/server/queue/SortedQueueEntry.java,compareTo,27-27,[public class SortedQueueEntry extends QueueEntryImpl],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,,52-52,[    public final static String keys[] = { " 73", " 18", " 11", "127", "166", "163", " 69", " 60", "191", "144",],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,,73-73,[    public final static String textkeys[] = { "AAA", "BBB", "CCC", "DDD", "EEE", "FFF", "GGG", "HHH", "III", "JJJ",],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testAscendingSortKeys,259-259,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testDescendingSortKeys,282-282,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testInsertAfter,305-305,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testInsertAtHead,376-376,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testInsertBefore,325-325,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testInsertInbetween,345-345,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testNonUniqueSortKeys,217-217,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,testNullSortKeys,238-238,[        _sqel = new SelfValidatingSortedQueueEntryList(_testQueue);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,setUp,116-116,[        _sqel = (SelfValidatingSortedQueueEntryList) _testQueue.getEntries();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/SortedQueueEntryListTest.java,,100-112,[        {,             SelfValidatingSortedQueueEntryList _entries;,             @Override,             protected void onOpen(),             {,                 super.onOpen();,                 _entries = new SelfValidatingSortedQueueEntryList(this);,             }, ,             @Override,             SelfValidatingSortedQueueEntryList getEntries(),             {,                 return _entries;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/server/queue/SortedQueueEntryTest.java,,48-48,[    public final static String keys[] = { "CCC", "AAA", "BBB" };],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/SortedQueueEntryTest.java,,70-82,[        {,             SelfValidatingSortedQueueEntryList _entries;,             @Override,             protected void onOpen(),             {,                 super.onOpen();,                 _entries = new SelfValidatingSortedQueueEntryList(this);,             }, ,             @Override,             SelfValidatingSortedQueueEntryList getEntries(),             {,                 return _entries;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/queue/StandardQueueTest.java,testProcessQueueWithDequeuedEntry,240-240,[            latch.await(1, TimeUnit.MINUTES);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/StandardQueueTest.java,,184-189,[        {,             @Override,             public void deliverAsync(QueueConsumer sub),             {,                 // do nothing,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/StandardQueueTest.java,,205-216,[        {,             /**,              * Send a message and decrement latch,              * @param consumer,              * @param entry,              * @param batch,              */,             public long send(final ConsumerImpl consumer, MessageInstance entry, boolean batch),             {,                 long size = super.send(consumer, entry, batch);,                 latch.countDown();,                 return size;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/queue/StandardQueueTest.java,,230-234,[        {,             public void run(),             {,                 // do nothing,             }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/security/FileKeyStoreImpl.java,validateKeyStoreAttributes,160-160,[        catch (Exception e)],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/FileTrustStoreImpl.java,getTrustManagers,282-282,[                return null;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/NonJavaKeyStoreImpl.java,updateKeyManagers,269-302,[            if (_privateKeyUrl != null && _certificateUrl != null),             {,                 PrivateKey privateKey = readPrivateKey(getUrlFromString(_privateKeyUrl));,                 X509Certificate[] certs = readCertificates(getUrlFromString(_certificateUrl));,                 if(_intermediateCertificateUrl != null),                 {,                     List<X509Certificate> allCerts = new ArrayList<>(Arrays.asList(certs));,                     allCerts.addAll(Arrays.asList(readCertificates(getUrlFromString(_intermediateCertificateUrl))));,                     certs = allCerts.toArray(new X509Certificate[allCerts.size()]);,                 }, ,                 java.security.KeyStore inMemoryKeyStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());, ,                 byte[] bytes = new byte[64];,                 char[] chars = new char[64];,                 RANDOM.nextBytes(bytes);,                 StandardCharsets.US_ASCII.decode(ByteBuffer.wrap(bytes)).get(chars);,                 inMemoryKeyStore.load(null, chars);,                 inMemoryKeyStore.setKeyEntry("1", privateKey, chars, certs);, , ,                 KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());,                 kmf.init(inMemoryKeyStore, chars);,                 _keyManagers = kmf.getKeyManagers();,                 _certificate = certs[0];,             }, ,         },         catch (IOException | GeneralSecurityException e),         {,             LOGGER.error("Error attempting to create KeyStore from private key and certificates", e);,             _keyManagers = new KeyManager[0];,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/NonJavaTrustStoreImpl.java,updateTrustManagers,277-303,[            if (_certificatesUrl != null),             {,                 X509Certificate[] certs = readCertificates(getUrlFromString(_certificatesUrl));,                 java.security.KeyStore inMemoryKeyStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());, ,                 inMemoryKeyStore.load(null, null);,                 int i = 1;,                 for(Certificate cert : certs),                 {,                     inMemoryKeyStore.setCertificateEntry(String.valueOf(i++), cert);,                 }, , , ,                 TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());,                 tmf.init(inMemoryKeyStore);,                 _trustManagers = tmf.getTrustManagers();,                 _certificates = certs;,             }, ,         },         catch (IOException | GeneralSecurityException e),         {,             LOGGER.error("Error attempting to create KeyStore from private key and certificates", e);,             _trustManagers = new TrustManager[0];,         },     }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/SecurityManager.java,authoriseConfiguringBroker,578-578,[                configuredObjectOperation == null? null : configuredObjectOperation.name().toLowerCase(),],,authoriseConfiguringBroker,579-579,[                configuredObjectType == null ? null : configuredObjectType.getSimpleName().toLowerCase(),],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/server/security/SecurityManager.java,addPlugin,141-141,[        synchronized (_plugins)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/server/security/SecurityManager.java,stateChanged,502-502,[                synchronized (_plugins)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/server/security/SecurityManager.java,stateChanged,512-512,[                synchronized (_plugins)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/security/SecurityManager.java,getCurrentUser,122-122,[            if(principals != null && !principals.isEmpty())],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/qpid/server/security/SecurityManager.java,authorisePublish,437-437,[            _publishAccessCheckCache.putIfAbsent(key, check);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/SubjectCreatorTest.java,<init>,59-59,[    private byte[] _saslResponseBytes = PASSWORD.getBytes();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/access/ObjectProperties.java,getAllPropertyNames,118-118,[            properties.add(StringUtils.remove(property.name(), '_').toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/access/ObjectProperties.java,getCanonicalName,107-107,[            return StringUtils.remove(name, '_').toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/access/ObjectType.java,toString,106-106,[        return name.charAt(0) + name.substring(1).toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/access/Operation.java,toString,54-54,[        return name.charAt(0) + name.substring(1).toLowerCase();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/server/security/access/config/AclActionTest.java,testEqualsAndHashCode,34-56,[        AclRulePredicates predicates = createAclRulePredicates();,         ObjectType objectType = ObjectType.EXCHANGE;,         Operation operation = Operation.ACCESS;, ,         AclAction aclAction = new AclAction(operation, objectType, predicates);,         AclAction equalAclAction = new AclAction(operation, objectType, predicates);, ,         assertTrue(aclAction.equals(aclAction));,         assertTrue(aclAction.equals(equalAclAction));,         assertTrue(equalAclAction.equals(aclAction));, ,         assertTrue(aclAction.hashCode() == equalAclAction.hashCode());, ,         assertFalse("Different operation should cause aclActions to be unequal",,                 aclAction.equals(new AclAction(Operation.BIND, objectType, predicates)));, ,         assertFalse("Different operation type should cause aclActions to be unequal",,                 aclAction.equals(new AclAction(operation, ObjectType.GROUP, predicates)));, ,         assertFalse("Different predicates should cause aclActions to be unequal",,                 aclAction.equals(new AclAction(operation, objectType, createAclRulePredicates())));, ,     }],,testEqualsAndHashcode,107-115,[        AuthenticatedPrincipal user1principal1 = new AuthenticatedPrincipal(new UsernamePrincipal("user1"));,         AuthenticatedPrincipal user1principal2 = new AuthenticatedPrincipal(new UsernamePrincipal("user1"));, ,         assertTrue(user1principal1.equals(user1principal1));,         assertTrue(user1principal1.equals(user1principal2));,         assertTrue(user1principal2.equals(user1principal1));, ,         assertEquals(user1principal1.hashCode(), user1principal2.hashCode());,     }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/access/config/PlainConfiguration.java,toPluginProperties,311-311,[            String key = i.next().toLowerCase();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/access/config/PlainConfiguration.java,load,92-92,[            fileReader = new FileReader(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/access/config/PlainConfigurationTest.java,writeACLConfig,47-47,[        PrintWriter aclWriter = new PrintWriter(new FileWriter(acl));],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/qpid/server/security/access/config/RuleSet.java,,63-63,[    public static final List<String> CONFIG_PROPERTIES = Arrays.asList(DEFAULT_ALLOW, DEFAULT_DENY);],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/server/security/access/config/RuleSet.java,check,324-329,[                        getEventLogger().message(AccessControlMessages.ALLOWED(,                                 action.getOperation().toString(),,                                 action.getObjectType().toString(),,                                 action.getProperties().toString()));,                     case ALLOW:,                         return Result.ALLOWED;],,check,331-336,[                        getEventLogger().message(AccessControlMessages.DENIED(,                                 action.getOperation().toString(),,                                 action.getObjectType().toString(),,                                 action.getProperties().toString()));,                     case DENY:,                         return Result.DENIED;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/access/firewall/HostnameFirewallRule.java,,102-105,[        {,             public String call(),             {,                 return remote.getCanonicalHostName();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/security/access/firewall/InetNetwork.java,maskIP,106-106,[        catch (Exception _)],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/access/plugins/ACLFileAccessControlProviderImpl.java,activate,108-133,[        if(_broker.isManagementMode()),         {, ,             setState(_accessControl.validate() ? State.QUIESCED : State.ERRORED);,         },         else,         {,             try,             {,                 _accessControl.open();,                 setState(State.ACTIVE);,             },             catch (RuntimeException e),             {,                 setState(State.ERRORED);,                 if (_broker.isManagementMode()),                 {,                     LOGGER.warn("Failed to activate ACL provider: " + getName(), e);,                 },                 else,                 {,                     throw e;,                 },             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/access/plugins/ACLFileAccessControlProviderImpl.java,doDelete,151-154,[        close();,         setState(State.DELETED);,         deleted();,     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/access/plugins/ACLFileAccessControlProviderImpl.java,startQuiesced,145-146,[        setState(State.QUIESCED);,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/access/plugins/DefaultAccessControlTest.java,,249-261,[        {,             @Override,             public Object run() throws Exception,             {,                 RuleSet mockRuleSet = mock(RuleSet.class);, ,                 DefaultAccessControl accessControl = new DefaultAccessControl(mockRuleSet);, ,                 ObjectProperties properties = new ObjectProperties(testVirtualHost);,                 accessControl.authorise(Operation.ACCESS, ObjectType.VIRTUALHOST, properties);, ,                 verify(mockRuleSet).check(subject, Operation.ACCESS, ObjectType.VIRTUALHOST, properties, inetAddress);,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/access/plugins/DefaultAccessControlTest.java,,279-297,[        {,             @Override,             public Object run() throws Exception,             {, , ,                 RuleSet mockRuleSet = mock(RuleSet.class);,                 when(mockRuleSet.check(,                         subject,,                         Operation.ACCESS,,                         ObjectType.VIRTUALHOST,,                         ObjectProperties.EMPTY,,                         inetAddress)).thenThrow(new RuntimeException());, ,                 DefaultAccessControl accessControl = new DefaultAccessControl(mockRuleSet);,                 Result result = accessControl.authorise(Operation.ACCESS, ObjectType.VIRTUALHOST, ObjectProperties.EMPTY);, ,                 assertEquals(Result.DENIED, result);,                 return null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/acl/AbstractACLTestCase.java,writeACLFileUtil,109-109,[        PrintWriter out = new PrintWriter(new FileWriter(aclFile));],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/server/security/auth/AuthenticatedPrincipal.java,,41-124,[        this(new UsernamePrincipal(userPrincipalName));,     }, ,     public AuthenticatedPrincipal(Principal wrappedPrincipal),     {,         if(wrappedPrincipal == null),         {,             throw new IllegalArgumentException("Wrapped principal is null");,         }, ,         _wrappedPrincipal = wrappedPrincipal;,     }, ,     @Override,     public String getName(),     {,         return _wrappedPrincipal.getName();,     }, ,     @Override,     public int hashCode(),     {,         return _wrappedPrincipal.hashCode();,     }, ,     @Override,     public boolean equals(Object obj),     {,         if (this == obj),         {,             return true;,         }, ,         if (!(obj instanceof AuthenticatedPrincipal)),         {,             return false;,         }, ,         AuthenticatedPrincipal other = (AuthenticatedPrincipal) obj;, ,         return _wrappedPrincipal.equals(other._wrappedPrincipal);,     }, ,     public static AuthenticatedPrincipal getOptionalAuthenticatedPrincipalFromSubject(final Subject authSubject),     {,         return getAuthenticatedPrincipalFromSubject(authSubject, true);,     }, ,     public static AuthenticatedPrincipal getAuthenticatedPrincipalFromSubject(final Subject authSubject),     {,         return getAuthenticatedPrincipalFromSubject(authSubject, false);,     }, ,     private static AuthenticatedPrincipal getAuthenticatedPrincipalFromSubject(final Subject authSubject, boolean isPrincipalOptional),     {,         if (authSubject == null),         {,             throw new IllegalArgumentException("No authenticated subject.");,         }, ,         final Set<AuthenticatedPrincipal> principals = authSubject.getPrincipals(AuthenticatedPrincipal.class);,         int numberOfAuthenticatedPrincipals = principals.size();, ,         if(numberOfAuthenticatedPrincipals == 0 && isPrincipalOptional),         {,             return null;,         },         else,         {,             if (numberOfAuthenticatedPrincipals != 1),             {,                 throw new IllegalArgumentException(,                         "Can't find single AuthenticatedPrincipal in authenticated subject. There were ",                                 + numberOfAuthenticatedPrincipals,                                 + " authenticated principals out of a total number of principals of: " + authSubject.getPrincipals());,             },             return principals.iterator().next();,         },     }, ,     @Override,     public String toString(),     {,         return getName();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/AuthenticatedPrincipalTest.java,,92-95,[        {,             public String getName(),             {,                 return "otherprincipal";],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/server/security/auth/UsernamePrincipal.java,,32-73,[    {,         if (name == null),         {,             throw new IllegalArgumentException("name cannot be null");,         },         _name = name;,     }, ,     public String getName(),     {,         return _name;,     }, ,     public String toString(),     {,         return _name;,     }, ,     @Override,     public int hashCode(),     {,         final int prime = 31;,         return prime * _name.hashCode();,     }, ,     @Override,     public boolean equals(Object obj),     {,         if (this == obj),         {,             return true;,         },         else,         {,             if (obj instanceof UsernamePrincipal),             {,                 UsernamePrincipal other = (UsernamePrincipal) obj;,                 return _name.equals(other._name);,             },             else,             {,                 return false;],,
PERFORMANCE,DM_STRING_CTOR,org/apache/qpid/server/security/auth/UsernamePrincipalTest.java,testEqualityEqualName,47-47,[        final UsernamePrincipal principal1 = new UsernamePrincipal(new String("string"));],,testEqualityEqualName,48-48,[        final UsernamePrincipal principal2 = new UsernamePrincipal(new String("string"));],,
PERFORMANCE,DM_STRING_CTOR,org/apache/qpid/server/security/auth/UsernamePrincipalTest.java,testInequalityNonUserPrincipal,62-62,[        assertFalse(principal.equals(new String("string")));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/AbstractPasswordFilePrincipalDatabase.java,loadPasswordFile,189-189,[                reader = new BufferedReader(new FileReader(_passwordFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/AbstractPasswordFilePrincipalDatabase.java,savePasswordFile,291-291,[                reader = new BufferedReader(new FileReader(_passwordFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/AbstractPasswordFilePrincipalDatabase.java,savePasswordFile,290-290,[                writer = new PrintStream(tmp);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/database/AbstractPasswordFilePrincipalDatabase.java,lookupPassword,114-114,[            return null;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/AbstractPasswordFilePrincipalDatabase.java,swapTempFileToLive,249-249,[            old.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,createPasswordFile,122-122,[            BufferedWriter writer = new BufferedWriter(new FileWriter(testFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,testCreatePrincipalIsSavedToFile,234-234,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,testUpdatePasswordIsSavedToFile,365-365,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,testCreatePrincipalIsSavedToFile,234-234,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,testUpdatePasswordIsSavedToFile,365-365,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,tearDown,97-97,[            oldPwdFile.delete();],,tearDown,100-100,[        _pwdFile.delete();],,tearDown,108-108,[                oldPwdFile.delete();],,tearDown,111-111,[            f.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,testSetPasswordFileWithReadOnlyFile,413-413,[        testFile.setReadOnly();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,,174-177,[        {,             public String getName(),             {,                 return USERNAME;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/database/Base64MD5PasswordFilePrincipalDatabaseTest.java,,223-226,[        {,             public String getName(),             {,                 return CREATED_USERNAME;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,createPasswordFile,372-372,[            BufferedWriter writer = new BufferedWriter(new FileWriter(testFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testCreatePrincipalIsSavedToFile,122-122,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testUpdatePasswordIsSavedToFile,256-256,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testCreatePrincipalIsSavedToFile,122-122,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testUpdatePasswordIsSavedToFile,256-256,[            BufferedReader reader = new BufferedReader(new FileReader(testFile));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,tearDown,66-66,[                oldPwdFile.delete();],,tearDown,69-69,[            f.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testCreatePrincipal,100-100,[        testFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testCreatePrincipalIsSavedToFile,146-146,[        testFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testDeletePrincipal,191-191,[        testFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testGetUsers,230-230,[        testFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testSetPasswordFileWithReadOnlyFile,320-320,[        testFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testSetPasswordFileWithReadOnlyFile,305-305,[        testFile.setReadOnly();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,testUpdatePasswordIsSavedToFile,280-280,[        testFile.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,,85-88,[        {,             public String getName(),             {,                 return CREATED_USERNAME;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/database/PlainPasswordFilePrincipalDatabaseTest.java,,111-114,[        {,             public String getName(),             {,                 return TEST_USERNAME;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/security/auth/jmx/JMXPasswordAuthenticatorTest.java,testWithIllegalNumberOfArguments,199-199,[            _rmipa.authenticate(credentials);],,
CORRECTNESS,NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS,org/apache/qpid/server/security/auth/jmx/JMXPasswordAuthenticatorTest.java,testWithIllegalNumberOfArguments,199-199,[            _rmipa.authenticate(credentials);],,
CORRECTNESS,IJU_TEARDOWN_NO_SUPER,org/apache/qpid/server/security/auth/manager/AnonymousAuthenticationManagerTest.java,tearDown,59-59,[    }],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/server/security/auth/manager/ExternalAuthenticationTest.java,setUp,58-58,[        setSystemProperty("javax.net.debug", "ssl");],,
CORRECTNESS,NP_ALWAYS_NULL,org/apache/qpid/server/security/auth/manager/PlainPasswordFileAuthenticationManagerFactoryTest.java,tearDown,101-101,[            if (_emptyPasswordFile == null && _emptyPasswordFile.exists())],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PlainPasswordFileAuthenticationManagerFactoryTest.java,tearDown,103-103,[                _emptyPasswordFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PlainPasswordFileAuthenticationManagerFactoryTest.java,testPasswordFileNotFound,68-68,[        _emptyPasswordFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java,doDelete,220-220,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java,onCreate,87-87,[                passwordFile.createNewFile();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java,activate,463-464,[            setState(State.ACTIVE);,         }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManager.java,doDelete,471-486,[                String userName = _user.getName();,                 deleteUserFromDatabase(userName);,                 PreferencesProvider preferencesProvider = getPreferencesProvider();,                 if (preferencesProvider != null),                 {,                     preferencesProvider.deletePreferences(userName);,                 },                 deleted();,                 setState(State.DELETED);,             },             catch (AccountNotFoundException e),             {,                 LOGGER.warn("Failed to delete user " + _user, e);,             }, ,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,testInitialiseWhenPasswordFileExists,155-155,[            fos.write("admin:admin".getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,testSaslAuthenticationError,232-232,[        AuthenticationResult result = _manager.authenticate(testServer, "12345".getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,testSaslAuthenticationNotCompleted,214-214,[        AuthenticationResult result = _manager.authenticate(testServer, "12345".getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,testSaslAuthenticationSuccess,196-196,[        AuthenticationResult result = _manager.authenticate(testServer, "12345".getBytes());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,deletePasswordFileIfExists,281-281,[            passwordFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,testInitialiseWhenPasswordFileExists,150-150,[        f.createNewFile();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,evaluateResponse,320-320,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,unwrap,335-335,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/manager/PrincipalDatabaseAuthenticationManagerTest.java,wrap,340-340,[            return null;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/auth/manager/ScramAuthUser.java,doDelete,105-107,[        _authenticationManager.getUserMap().remove(getName());,         deleted();,     }],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/qpid/server/security/auth/manager/SimpleLDAPAuthenticationManagerImpl.java,closeSafely,503-503,[                ctx = null;],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/security/auth/manager/SimpleLDAPAuthenticationManagerImpl.java,createInitialDirContext,298-298,[        boolean isLdaps = String.valueOf(env.get(Context.PROVIDER_URL)).trim().toLowerCase().startsWith("ldaps:");],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/security/auth/manager/SimpleLDAPAuthenticationManagerImpl.java,validateInitialDirContext,367-384,[        Hashtable<String,Object> env = createInitialDirContextEnvironment(_providerUrl);, ,         setupSearchContext(env);, ,         InitialDirContext ctx = null;,         try,         {,             ctx = createInitialDirContext(env);,         },         catch (NamingException e),         {,             throw new ServerScopedRuntimeException("Unable to establish connection to the ldap server at " + _providerUrl, e);,         },         finally,         {,             closeSafely(ctx);,         },     }],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/qpid/server/security/auth/manager/ldap/LDAPSSLSocketFactoryGenerator.java,createSubClass,78-78,[            final ClassLoader classLoader = new LDAPSSLSocketFactoryAwareDelegatingClassloader(fqcn, classBytes, sslSocketFactory);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/qpid/server/security/auth/manager/ldap/LDAPSSLSocketFactoryGenerator.java,getStaticFieldByReflection,246-246,[                declaredField.setAccessible(true);],,getStaticFieldByReflection,251-251,[                declaredField.setAccessible(accessible);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/qpid/server/security/auth/manager/ldap/LDAPSSLSocketFactoryGeneratorTest.java,testGetDefaultCreatesInstance,76-76,[        assertTrue(socketFactory instanceof AbstractLDAPSSLSocketFactory);],,
CORRECTNESS,SIO_SUPERFLUOUS_INSTANCEOF,org/apache/qpid/server/security/auth/manager/ldap/LDAPSSLSocketFactoryGeneratorTest.java,testGetDefaultCreatesInstance,76-76,[        assertTrue(socketFactory instanceof AbstractLDAPSSLSocketFactory);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/auth/sasl/CRAMMD5HexInitialiserTest.java,tearDown,83-83,[            _file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/sasl/CRAMMD5HexServerTest.java,generateClientResponse,163-163,[        byte[] digestedPasswordBytes = MessageDigest.getInstance("MD5").digest(clearTextPassword.getBytes());],,generateClientResponse,165-165,[        byte[] hexEncodedDigestedPasswordBytes = new String(hexEncodedDigestedPassword).getBytes();],,generateClientResponse,174-174,[        byte[] resp = responseAsString.getBytes();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/auth/sasl/CRAMMD5HexServerTest.java,,198-201,[        {,             public String getName(),             {,                 return name;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/qpid/server/security/auth/sasl/SaslServerTestCase.java,testFailAuth,53-53,[            byte[] resp = this.server.evaluateResponse(wrongResponse);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/qpid/server/security/auth/sasl/SaslServerTestCase.java,testSuccessfulAuth,44-44,[        byte[] resp = this.server.evaluateResponse(correctResponse);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/sasl/SaslUtil.java,generateCramMD5ClientResponse,68-68,[        return responseAsString.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/security/auth/sasl/SaslUtil.java,generateCramMD5HexClientResponse,57-57,[        return responseAsString.getBytes();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/sasl/anonymous/AnonymousSaslServer.java,evaluateResponse,47-47,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java,evaluateResponse,55-55,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/sasl/plain/PlainAdapterSaslServer.java,evaluateResponse,107-107,[            return null;],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/server/security/auth/sasl/plain/PlainPasswordCallback.java,,39-77,[    private boolean _authenticated = false;, ,     /**,      * Constructs a new PlainPasswordCallback with the incoming plain text password.,      * ,      * @throws NullPointerException if the incoming plain text is null,      */,     public PlainPasswordCallback(String prompt, boolean echoOn, String plainPassword),     {,         super(prompt, echoOn);,         ,         if(plainPassword == null),         {,             throw new NullPointerException("Incoming plain text cannot be null");,         }, ,         _plainPassword = plainPassword.toCharArray();,     }, ,     public String getPlainPassword(),     {,         return new String(_plainPassword);,     }, ,     public void setAuthenticated(boolean authenticated),     {,         _authenticated = authenticated;,     }, ,     /**,      * Method to determine if the incoming plain password is authenticated,      * ,      * @return true if the stored password matches the incoming text, or setAuthenticated(true) has been called,      */,     public boolean isAuthenticated(),     {,         char[] storedPassword = getPassword();, ,         return Arrays.equals(_plainPassword, storedPassword) || _authenticated;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/security/auth/sasl/plain/PlainSaslServer.java,evaluateResponse,107-107,[            return null;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactoryTest.java,testPermissionsAreChecked,186-186,[            file.createNewFile();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactoryTest.java,,241-255,[                           {,                                @Override,                                public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs),                                        throws IOException,                                {,                                    Files.delete(file);,                                    return FileVisitResult.CONTINUE;,                                }, ,                                @Override,                                public FileVisitResult postVisitDirectory(final Path dir, final IOException exc),                                        throws IOException,                                {,                                    Files.delete(dir);,                                    return FileVisitResult.CONTINUE;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/qpid/server/security/encryption/AESKeyFileEncrypterFactoryTest.java,,266-339,[    private class KeyFilePathChecker extends SimpleFileVisitor<Path>,     {, ,         private final String _fileName;,         private final String _subdirName;,         private Path _keyFile;,         private boolean _inKeysSubdir;, ,         public KeyFilePathChecker(),         {,             this(AESKeyFileEncrypterFactory.DEFAULT_KEYS_SUBDIR_NAME, "Broker_" + AESKeyFileEncrypterFactoryTest.this.getName() + ".key");,         }, ,         public KeyFilePathChecker(final String subdirName, final String fileName),         {,             _subdirName = subdirName;,             _fileName = fileName;,         }, ,         @Override,         public FileVisitResult preVisitDirectory(final Path dir, final BasicFileAttributes attrs) throws IOException,         {,             if(!_inKeysSubdir && dir.endsWith(_subdirName)),             {,                 _inKeysSubdir = true;,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.OTHERS_READ));,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.OTHERS_WRITE));,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.OTHERS_EXECUTE));, ,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.GROUP_READ));,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.GROUP_WRITE));,                 assertFalse(Files.getPosixFilePermissions(dir).contains(PosixFilePermission.GROUP_EXECUTE));,                 return FileVisitResult.CONTINUE;,             },             else,             {,                 return _inKeysSubdir ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;,             }, ,         }, ,         @Override,         public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException,         {,             if(_inKeysSubdir),             {,                 if(file.endsWith(_fileName)),                 {,                     _keyFile = file;, ,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.OTHERS_READ));,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.OTHERS_WRITE));,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.OTHERS_EXECUTE));, ,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.GROUP_READ));,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.GROUP_WRITE));,                     assertFalse(Files.getPosixFilePermissions(file).contains(PosixFilePermission.GROUP_EXECUTE));, ,                     return FileVisitResult.TERMINATE;,                 },             },             return FileVisitResult.CONTINUE;,         }, ,         @Override,         public FileVisitResult postVisitDirectory(final Path dir, final IOException exc) throws IOException,         {,             _inKeysSubdir = false;,             return FileVisitResult.CONTINUE;,         }, ,         public Path getKeyFile(),         {,             return _keyFile;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/security/group/FileGroupDatabase.java,readGroupFile,203-203,[            if(fileInputStream != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/server/security/group/FileGroupDatabase.java,writeGroupFile,255-255,[            if(fileOutputStream != null)],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/server/security/group/FileGroupDatabase.java,writeGroupFile,241-241,[            Set<String> users = _groupToUserMap.get(group);],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/server/security/group/FileGroupDatabaseTest.java,testMissingGroupFile,67-67,[            _groupDatabase.setGroupFile("/not/a/file");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/server/security/group/FileGroupDatabaseTest.java,writeGroupFile,430-430,[        props.store(new FileOutputStream(_groupFile), "test group file");],,writeGroupFile,431-431,[    }],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/server/security/group/FileGroupDatabaseTest.java,writeGroupFile,430-430,[        props.store(new FileOutputStream(_groupFile), "test group file");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/security/group/FileGroupDatabaseTest.java,tearDown,451-451,[                groupFile.delete();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/server/security/group/GroupPrincipal.java,,40-96,[    {,         _groupName = groupName;,     }, ,     public String getName(),     {,         return _groupName;,     }, ,     public boolean addMember(Principal user),     {,         throw new UnsupportedOperationException("Not supported");,     }, ,     public boolean removeMember(Principal user),     {,         throw new UnsupportedOperationException("Not supported");,     }, ,     public boolean isMember(Principal member),     {,         throw new UnsupportedOperationException("Not supported");,     }, ,     public Enumeration<? extends Principal> members(),     {,         throw new UnsupportedOperationException("Not supported");,     }, ,     /**,      * @see java.lang.Object#hashCode(),      */,     public int hashCode(),     {,         final int prime = 37;,         return prime * _groupName.hashCode();,     }, ,     /**,      * @see java.lang.Object#equals(java.lang.Object),      */,     public boolean equals(Object obj),     {,         if (this == obj),         {,             return true;,         },         else,         {,             if (obj instanceof GroupPrincipal),             {,                 GroupPrincipal other = (GroupPrincipal) obj;,                 return _groupName.equals(other._groupName);,             },             else,             {,                 return false;],,
PERFORMANCE,DM_STRING_CTOR,org/apache/qpid/server/security/group/GroupPrincipalTest.java,testEqualityEqualName,61-61,[        final GroupPrincipal principal1 = new GroupPrincipal(new String("string"));],,testEqualityEqualName,62-62,[        final GroupPrincipal principal2 = new GroupPrincipal(new String("string"));],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/stats/StatisticsCounter.java,,118-118,[        _last = _start / _period;],,,83-83,[            if (thisSample > _last)],,,85-85,[                _last = thisSample;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/stats/StatisticsCounter.java,,114-114,[        _peak = 0L;],,,124-124,[        return (double) _peak / ((double) _period / 1000.0d);],,,88-88,[                if (_rate > _peak)],,,90-90,[                    _peak = _rate;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/stats/StatisticsCounter.java,,115-115,[        _rate = 0L;],,,130-130,[        return (double) _rate / ((double) _period / 1000.0d);],,,86-86,[                _rate = _temp;],,,88-88,[                if (_rate > _peak)],,,90-90,[                    _peak = _rate;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/stats/StatisticsCounter.java,,116-116,[        _total = 0L;],,,135-135,[        return _total;],,,94-94,[            _total += value;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/stats/StatisticsReportingTest.java,sendUsing,164-164,[        String content = new String(new byte[size]);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/AbstractDurableConfigurationStoreTestCase.java,,475-481,[                    {, ,                         @Override,                         public Object answer(final InvocationOnMock invocation) throws Throwable,                         {,                             String attrName = requestedAttribute.getValue();,                             return attributes.get(attrName);],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/qpid/server/store/AbstractJDBCConfigurationStore.java,,68-68,[    public static final Set<String> CONFIGURATION_STORE_TABLE_NAMES = new HashSet<String>(Arrays.asList(CONFIGURED_OBJECTS_TABLE_NAME, CONFIGURED_OBJECT_HIERARCHY_TABLE_NAME));],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCConfigurationStore.java,createConfiguredObjectsTable,488-488,[                stmt.execute("CREATE TABLE "],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/AbstractJDBCConfigurationStore.java,,267-272,[        {{,             put("amq.direct", "direct");,             put("amq.topic", "topic");,             put("amq.fanout", "fanout");,             put("amq.match", "headers");,         }};],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,,62-62,[    public static final Set<String> MESSAGE_STORE_TABLE_NAMES = new HashSet<String>(Arrays.asList(DB_VERSION_TABLE_NAME,],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,recordXid,746-746,[            for(org.apache.qpid.server.store.Transaction.Record enqueue : enqueues)],,recordXid,764-764,[                if(enqueues != null)],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,upgradeIfNecessary,212-214,[                            upgradeFromV6();,                         case 7:,                             upgradeFromV7();],,upgradeIfNecessary,214-223,[                            upgradeFromV7();,                         case DB_VERSION:,                             return;,                         default:,                             throw new StoreException("Unknown database version: " + version);,                     },                 },                 finally,                 {,                     rs.close();],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,createMessageContentTable,378-378,[                stmt.execute("CREATE TABLE "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,createMetaDataTable,355-355,[                stmt.execute("CREATE TABLE "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,createXidActionTable,426-426,[                stmt.execute("CREATE TABLE " + XID_ACTIONS_TABLE_NAME + " ( format " + getSqlBigIntType() + " not null,"],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,createXidTable,401-401,[                stmt.execute("CREATE TABLE "],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,createQueueEntryTable,337-337,[                stmt.execute("CREATE TABLE "+ QUEUE_ENTRY_TABLE_NAME +" ( queue_id varchar(36) not null, message_id "],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,setMaxMessageId,144-144,[                conn.prepareStatement(query);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/store/AbstractJDBCMessageStore.java,getContent,1072-1117,[        Connection conn = null;,         PreparedStatement stmt = null;, ,         try,         {,             conn = newAutoCommitConnection();, ,             stmt = conn.prepareStatement(SELECT_FROM_MESSAGE_CONTENT);,             stmt.setLong(1,messageId);,             ResultSet rs = stmt.executeQuery();, ,             int written = 0;, ,             if (rs.next()),             {, ,                 byte[] dataAsBytes = getBlobAsBytes(rs, 1);,                 int size = dataAsBytes.length;, ,                 if (offset > size),                 {,                     throw new StoreException("Offset " + offset + " is greater than message size " + size,                                              + " for message id " + messageId + "!");, ,                 }, ,                 written = size - offset;,                 if(written > dst.remaining()),                 {,                     written = dst.remaining();,                 }, ,                 dst.put(dataAsBytes, offset, written);,             }, ,             return written;, ,         },         catch (SQLException e),         {,             throw new StoreException("Error retrieving content from offset " + offset + " for message " + messageId + ": " + e.getMessage(), e);,         },         finally,         {,             JdbcUtils.closePreparedStatement(stmt, getLogger());,             JdbcUtils.closeConnection(conn, getLogger());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/BrokerStoreUpgraderAndRecoverer.java,,484-489,[        {,             @Override,             public void performAction(final ConfiguredObject<?> object),             {,                  object.addChangeListener(configChangeListener);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/BrokerStoreUpgraderAndRecoverer.java,,215-279,[        {{,                 put("DERBY", new AttributesTransformer().,                         addAttributeTransformer("id", copyAttribute()).,                         addAttributeTransformer("name", copyAttribute()).,                         addAttributeTransformer("createdTime", copyAttribute()).,                         addAttributeTransformer("createdBy", copyAttribute()).,                         addAttributeTransformer("storePath", copyAttribute()).,                         addAttributeTransformer("storeUnderfullSize", copyAttribute()).,                         addAttributeTransformer("storeOverfullSize", copyAttribute()));,                 put("Memory",  new AttributesTransformer().,                         addAttributeTransformer("id", copyAttribute()).,                         addAttributeTransformer("name", copyAttribute()).,                         addAttributeTransformer("createdTime", copyAttribute()).,                         addAttributeTransformer("createdBy", copyAttribute()));,                 put("BDB", new AttributesTransformer().,                         addAttributeTransformer("id", copyAttribute()).,                         addAttributeTransformer("name", copyAttribute()).,                         addAttributeTransformer("createdTime", copyAttribute()).,                         addAttributeTransformer("createdBy", copyAttribute()).,                         addAttributeTransformer("storePath", copyAttribute()).,                         addAttributeTransformer("storeUnderfullSize", copyAttribute()).,                         addAttributeTransformer("storeOverfullSize", copyAttribute()).,                         addAttributeTransformer("bdbEnvironmentConfig", mutateAttributeName("context")));,                 put("JDBC", new AttributesTransformer().,                         addAttributeTransformer("id", copyAttribute()).,                         addAttributeTransformer("name", copyAttribute()).,                         addAttributeTransformer("createdTime", copyAttribute()).,                         addAttributeTransformer("createdBy", copyAttribute()).,                         addAttributeTransformer("storePath", mutateAttributeName("connectionURL")).,                         addAttributeTransformer("connectionURL", mutateAttributeName("connectionUrl")).,                         addAttributeTransformer("connectionPool", new AttributeTransformer(),                         {,                             @Override,                             public MutableEntry transform(MutableEntry entry),                             {,                                Object value = entry.getValue();,                                 if ("DEFAULT".equals(value)),                                 {,                                     value = "NONE";,                                 },                                 return new MutableEntry("connectionPoolType", value);,                             },                         }).,                         addAttributeTransformer("jdbcBigIntType", addContextVar("qpid.jdbcstore.bigIntType")).,                         addAttributeTransformer("jdbcBytesForBlob", addContextVar("qpid.jdbcstore.useBytesForBlob")).,                         addAttributeTransformer("jdbcBlobType", addContextVar("qpid.jdbcstore.blobType")).,                         addAttributeTransformer("jdbcVarbinaryType", addContextVar("qpid.jdbcstore.varBinaryType")).,                         addAttributeTransformer("partitionCount", addContextVar("qpid.jdbcstore.bonecp.partitionCount")).,                         addAttributeTransformer("maxConnectionsPerPartition", addContextVar("qpid.jdbcstore.bonecp.maxConnectionsPerPartition")).,                         addAttributeTransformer("minConnectionsPerPartition", addContextVar("qpid.jdbcstore.bonecp.minConnectionsPerPartition")));,                 put("BDB_HA", new AttributesTransformer().,                         addAttributeTransformer("id", copyAttribute()).,                         addAttributeTransformer("createdTime", copyAttribute()).,                         addAttributeTransformer("createdBy", copyAttribute()).,                         addAttributeTransformer("storePath", copyAttribute()).,                         addAttributeTransformer("storeUnderfullSize", copyAttribute()).,                         addAttributeTransformer("storeOverfullSize", copyAttribute()).,                         addAttributeTransformer("haNodeName", mutateAttributeName("name")).,                         addAttributeTransformer("haGroupName", mutateAttributeName("groupName")).,                         addAttributeTransformer("haHelperAddress", mutateAttributeName("helperAddress")).,                         addAttributeTransformer("haNodeAddress", mutateAttributeName("address")).,                         addAttributeTransformer("haDesignatedPrimary", mutateAttributeName("designatedPrimary")).,                         addAttributeTransformer("haReplicationConfig", mutateAttributeName("context")).,                         addAttributeTransformer("bdbEnvironmentConfig", mutateAttributeName("context")));,             }};],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/server/store/BrokerStoreUpgraderAndRecovererTest.java,remove,340-340,[            return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/BrokerStoreUpgraderAndRecovererTest.java,,314-367,[        {,             super();,             this.records = records;,         }, ,         @Override,         public void openConfigurationStore(ConfiguredObject<?> parent,,                                            final boolean overwrite,,                                            final ConfiguredObjectRecord... initialRecords) throws StoreException,         {,         }, ,         @Override,         public void upgradeStoreStructure() throws StoreException,         {, ,         }, ,         @Override,         public void create(ConfiguredObjectRecord object) throws StoreException,         {,         }, ,         @Override,         public UUID[] remove(ConfiguredObjectRecord... objects) throws StoreException,         {,             return null;,         }, ,         @Override,         public void update(boolean createIfNecessary, ConfiguredObjectRecord... records) throws StoreException,         {,         }, ,         @Override,         public void closeConfigurationStore() throws StoreException,         {,         }, ,         @Override,         public void onDelete(ConfiguredObject<?> parent),         {,         }, ,         @Override,         public void visitConfiguredObjectRecords(ConfiguredObjectRecordHandler handler) throws StoreException,         {,             handler.begin();,             for (ConfiguredObjectRecord record : records),             {,                 handler.handle(record);,             },             handler.end();,         }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/store/ConfiguredObjectRecordConverter.java,loadChild,101-101,[            String attrName = childType.toLowerCase() + "s";],,loadChild,126-126,[                    final String otherParentAttr = otherParent.getSimpleName().toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/store/JsonFileConfigStore.java,build,431-431,[                map.put(parentType.toLowerCase(), record.getParents().get(parentType));],,build,448-448,[                String attrName = childClass.getSimpleName().toLowerCase() + "s";],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/store/JsonFileConfigStore.java,load,298-298,[                records = configuredObjectRecordConverter.readFromJson(_rootClass, _parent, new FileReader(configFile));],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/server/store/JsonFileConfigStore.java,generateClassNameMap,629-629,[        map.put(clazz.getSimpleName().toString(), clazz);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/store/JsonFileConfigStore.java,,140-140,[        _classNameMapping = generateClassNameMap(_parent.getModel(), _rootClass);],,,336-336,[        else if(!_classNameMapping.containsKey(record.getType()))],,,542-542,[            else if(!_classNameMapping.containsKey(type))],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/server/store/JsonFileConfigStore.java,load,298-298,[                records = configuredObjectRecordConverter.readFromJson(_rootClass, _parent, new FileReader(configFile));],,load,301-301,[            if(records.isEmpty())],,load,307-307,[            for(ConfiguredObjectRecord record : records)],,load,318-318,[            if(updated)],,load,326-326,[        }],,load,327-327,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/JsonFileConfigStore.java,getFileLock,239-239,[            lockFile.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/JsonFileConfigStore.java,save,405-405,[            tmpFile.delete();],,save,407-407,[            backupFile.delete();],,
MALICIOUS_CODE,MS_MUTABLE_ARRAY,org/apache/qpid/server/store/derby/DerbyMessageStoreQuotaEventsTest.java,,42-42,[    private static final long OVERFULL_SIZE = (long) (MESSAGE_DATA.length * 3 * NUMBER_OF_MESSAGES_TO_OVERFILL_STORE * 0.8);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/store/MessageStoreTestCase.java,<init>,132-132,[            private final UUID _id = UUID.nameUUIDFromBytes(queueName.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/MessageStoreTestCase.java,,131-149,[        {,             private final UUID _id = UUID.nameUUIDFromBytes(queueName.getBytes());, ,             @Override,             public String getName(),             {,                 return queueName;,             }, ,             @Override,             public UUID getId(),             {,                 return _id;,             }, ,             @Override,             public MessageDurability getMessageDurability(),             {,                 return MessageDurability.DEFAULT;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/MessageStoreTestCase.java,,152-168,[        {,             @Override,             public long getMessageNumber(),             {,                 return message.getMessageNumber();,             }, ,             @Override,             public boolean isPersistent(),             {,                 return true;,             }, ,             @Override,             public StoredMessage getStoredMessage(),             {,                 return message;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/MessageStoreTestCase.java,,365-371,[        {, ,             @Override,             public boolean handle(StoredMessage<?> storedMessage),             {,                 retrievedMessageRef.set(storedMessage);,                 return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/MessageStoreTestCase.java,,383-389,[        {, ,             @Override,             public boolean handle(StoredMessage<?> storedMessage),             {,                 retrievedMessageRef.set(storedMessage);,                 return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/MessageStoreTestCase.java,,441-456,[        {,             super();,             _messageNumber = messageNumber;,         }, ,         public boolean matches(Object obj),         {,             return obj instanceof StoredMessage && ((StoredMessage<?>)obj).getMessageNumber() == _messageNumber;,         }, ,         @Override,         public void describeTo(final Description description),         {,             description.appendText("Expected messageNumber:");,             description.appendValue(_messageNumber);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/MessageStoreTestCase.java,,463-486,[        private final Set<Long> _enqueuedIds = new HashSet<Long>();, ,         public QueueFilteringMessageInstanceHandler(UUID queueId),         {,             _queueId = queueId;,         }, ,         @Override,         public boolean handle(UUID queueId, long messageId),         {,             if (queueId.equals(_queueId)),             {,                 if (_enqueuedIds.contains(messageId)),                 {,                     fail("Queue with id " + _queueId + " contains duplicate message ids");,                 },                 _enqueuedIds.add(messageId);,             },             return true;,         }, ,         public Set<Long> getEnqueuedIds(),         {,             return _enqueuedIds;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/TestMemoryMessageStore.java,,39-44,[                        {,                             @Override,                             public boolean handle(StoredMessage<?> storedMessage),                             {,                                 counter.incrementAndGet();,                                 return true;],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/store/TestRecord.java,hashCode,55-55,[        result = prime * result + ((_message == null) ? 0 : new Long(_message.getMessageNumber()).hashCode());],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/server/store/VirtualHostMessageStoreTest.java,unbindQueueFromExchange,778-778,[        Map<String,Object> bindArguments = new HashMap<String, Object>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/VirtualHostMessageStoreTest.java,,837-871,[        {,             _exchange = exchange;,             _immediate = immediate;,             _mandatory = mandatory;,             _routingKey = routingKey;,         }, ,         @Override,         public AMQShortString getExchange(),         {,             return new AMQShortString(_exchange.getName());,         }, ,         @Override,         public void setExchange(AMQShortString exchange),         {,             //no-op,         }, ,         @Override,         public boolean isImmediate(),         {,             return _immediate;,         }, ,         @Override,         public boolean isMandatory(),         {,             return _mandatory;,         }, ,         @Override,         public AMQShortString getRoutingKey(),         {,             return new AMQShortString(_routingKey);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java,,251-284,[        {,             super("modelVersion", "0.2", "0.3");,         }, ,         @SuppressWarnings("unchecked"),         @Override,         public void configuredObject(ConfiguredObjectRecord record),         {,             if("VirtualHost".equals(record.getType())),             {,                 record = upgradeRootRecord(record);,             },             else if("Queue".equals(record.getType())),             {,                 Map<String, Object> newAttributes = new LinkedHashMap<String, Object>();,                 if(record.getAttributes().get(ARGUMENTS) instanceof Map),                 {,                     newAttributes.putAll(QueueArgumentsConverter.convertWireArgsToModel((Map<String, Object>) record.getAttributes(),                             .get(ARGUMENTS)));,                 },                 newAttributes.putAll(record.getAttributes());, ,                 record = new ConfiguredObjectRecordImpl(record.getId(), record.getType(), newAttributes, record.getParents());,                 getUpdateMap().put(record.getId(), record);,             }, ,             getNextUpgrader().configuredObject(record);,         }, ,         @Override,         public void complete(),         {,             getNextUpgrader().complete();,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/VirtualHostStoreUpgraderAndRecoverer.java,,298-342,[        {,             super("modelVersion", "0.3", "0.4");,         }, , ,         @Override,         public void configuredObject(ConfiguredObjectRecord record),         {,             if("VirtualHost".equals(record.getType())),             {,                 record = upgradeRootRecord(record);,             },             else if(Queue.class.getSimpleName().equals(record.getType())),             {,                 Map<String, Object> newAttributes = new LinkedHashMap<String, Object>(record.getAttributes());,                 if(record.getAttributes().get(EXCLUSIVE) instanceof Boolean),                 {,                     boolean isExclusive = (Boolean) record.getAttributes().get(EXCLUSIVE);,                     newAttributes.put(EXCLUSIVE, isExclusive ? "CONTAINER" : "NONE");,                     if(!isExclusive && record.getAttributes().containsKey("owner")),                     {,                         newAttributes.remove("owner");,                     },                 },                 else,                 {,                     newAttributes.remove("owner");,                 },                 if(!record.getAttributes().containsKey("durable")),                 {,                     newAttributes.put("durable","true");,                 }, ,                 record = new ConfiguredObjectRecordImpl(record.getId(),record.getType(),newAttributes, record.getParents());,                 getUpdateMap().put(record.getId(), record);,             }, ,             getNextUpgrader().configuredObject(record);,         }, ,         @Override,         public void complete(),         {,             getNextUpgrader().complete();,         }],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java,storedSizeChange,993-993,[                long newSize = _totalStoreSize += 2*delta;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/store/berkeleydb/AbstractBDBMessageStore.java,,116-116,[        _totalStoreSize = getSizeOnDisk();],,,993-993,[                long newSize = _totalStoreSize += 2*delta;],,,1007-1007,[                    long oldSize = _totalStoreSize;],,,997-997,[                    _totalStoreSize = getSizeOnDisk();],,,999-999,[                    if(_totalStoreSize > getPersistentSizeHighThreshold())],,,1008-1008,[                    _totalStoreSize = getSizeOnDisk();],,,1010-1010,[                    if(oldSize <= _totalStoreSize)],,,1019-1019,[                    if(_totalStoreSize < getPersistentSizeLowThreshold())],,,1015-1015,[                        _totalStoreSize = getSizeOnDisk();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/server/store/berkeleydb/BDBBackup.java,,89-89,[    public static final String[][] COMMAND_LINE_SPEC =],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/server/store/berkeleydb/BDBBackup.java,takeBackupNoLock,246-246,[            fileInputStreams = new FileInputStream[fileSet.length];],,takeBackupNoLock,237-237,[            fileSet = fromDirFile.listFiles(new FilenameFilter()],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/BDBBackup.java,takeBackupNoLock,215-215,[            toDirFile.mkdirs();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/store/berkeleydb/BDBBackup.java,createSourceDirEnvironment,348-348,[        return new Environment(new File(fromdir), new EnvironmentConfig());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBBackup.java,,238-241,[                    {,                         public boolean accept(File dir, String name),                         {,                             return name.endsWith(LOG_FILE_SUFFIX);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/BDBBackupTest.java,setUp,64-64,[        _backupToDir.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/BDBHAVirtualHostNodeTest.java,testIntruderConnected,557-557,[        environmentPathFile.mkdirs();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBHAVirtualHostNodeTest.java,,210-219,[        {,             @Override,             public void childAdded(ConfiguredObject<?> object, ConfiguredObject<?> child),             {,                 if (child instanceof RemoteReplicationNode),                 {,                     remoteNodeLatch.countDown();,                     lastSeenReplica.set((RemoteReplicationNode<?>)child);,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBHAVirtualHostNodeTest.java,,502-510,[        {,             @Override,             public void stateChanged(ConfiguredObject<?> object, State oldState, State newState),             {,                 if (newState == State.ERRORED),                 {,                     stopLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBHAVirtualHostNodeTest.java,,543-551,[        {,             @Override,             public void stateChanged(ConfiguredObject<?> object, State oldState, State newState),             {,                 if (newState == State.ERRORED),                 {,                     stopLatch.countDown();,                 },             }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/store/berkeleydb/BDBMessageStoreTest.java,createMessageProperties_0_10,228-228,[        msgProps_0_10.setCorrelationId("qwerty".getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/store/berkeleydb/BDBMessageStoreTest.java,testBDBMessagePersistence,172-172,[        String returnedPayloadString_0_8 = new String(recoveredContent_0_8.array());],,testBDBMessagePersistence,204-204,[        String returnedPayloadString_0_10 = new String(recoveredContent.array());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/store/berkeleydb/BDBMessageStoreTest.java,testBDBMessagePersistence,94-94,[        ByteBuffer firstContentBytes_0_8 = ByteBuffer.wrap(bodyText.substring(0, 10).getBytes());],,testBDBMessagePersistence,95-95,[        ByteBuffer secondContentBytes_0_8 = ByteBuffer.wrap(bodyText.substring(10).getBytes());],,testBDBMessagePersistence,97-97,[        ByteBuffer completeContentBody_0_10 = ByteBuffer.wrap(bodyText.getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBMessageStoreTest.java,,238-264,[        {,             public AMQShortString getExchange(),             {,                 return new AMQShortString("exchange12345");,             }, ,             @Override,             public void setExchange(AMQShortString exchange),             {,             }, ,             @Override,             public boolean isImmediate(),             {,                 return false;,             }, ,             @Override,             public boolean isMandatory(),             {,                 return true;,             }, ,             @Override,             public AMQShortString getRoutingKey(),             {,                 return new AMQShortString("routingKey12345");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/server/store/berkeleydb/BDBStoreUpgradeTestPreparer.java,<init>,91-91,[        _connFac = new AMQConnectionFactory(CONN_URL);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBStoreUpgradeTestPreparer.java,,134-138,[        {,             public void onException(JMSException e),             {,                 _logger.error("Error setting exception listener for connection", e);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBStoreUpgradeTestPreparer.java,,228-232,[        {,             public void onException(JMSException e),             {,                 _logger.error("Error setting exception listener for connection", e);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/BDBStoreUpgradeTestPreparer.java,,273-277,[        {,             public void onException(JMSException e),             {,                 _logger.error("Error setting exception listener for connection", e);,             }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/store/berkeleydb/BDBUpgradeTest.java,testDurableSubscriptionWithoutSelector,186-186,[            assertEquals("DurableSubscription backing queue should have 1 message on it initially",],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/store/berkeleydb/BDBUpgradeTest.java,testSelectorDurability,129-129,[            assertEquals("DurableSubscription backing queue should have 1 message on it initially",],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/BDBUpgradeTest.java,setUp,97-97,[        directory.mkdirs();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/server/store/berkeleydb/CoalescingCommiter.java,explicitNotify,191-191,[                _lock.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/server/store/berkeleydb/CommitThreadWrapper.java,explicitNotify,184-184,[                _lock.notify();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/replication/BDBHAVirtualHostNodeRestTest.java,testIntruderProtection,287-287,[        environmentPathFile.mkdirs();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/store/berkeleydb/replication/MultiNodeTest.java,testQuorumOverride,392-392,[        assertEquals("Broker has unexpected quorum override", new Integer(0), attributes.get(BDBHAVirtualHostNode.QUORUM_OVERRIDE));],,testQuorumOverride,396-396,[        assertEquals("Broker has unexpected quorum override", new Integer(1), attributes.get(BDBHAVirtualHostNode.QUORUM_OVERRIDE));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/replication/MultiNodeTest.java,testClusterCannotStartWithIntruder,445-445,[        environmentPathFile.mkdirs();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/server/store/berkeleydb/replication/MultiNodeTest.java,assertNoFailoverCompletionWithin,507-507,[            _failoverCompletionLatch.await(delay, TimeUnit.MILLISECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/store/berkeleydb/replication/MultiNodeTest.java,,480-525,[    private final class FailoverAwaitingListener implements ConnectionListener,     {,         private final CountDownLatch _failoverCompletionLatch = new CountDownLatch(1);, ,         @Override,         public boolean preResubscribe(),         {,             return true;,         }, ,         @Override,         public boolean preFailover(boolean redirect),         {,             return true;,         }, ,         public void awaitFailoverCompletion(long delay) throws InterruptedException,         {,             if (!_failoverCompletionLatch.await(delay, TimeUnit.MILLISECONDS)),             {,                 LOGGER.warn("Test thread dump:\n\n" + TestUtils.dumpThreads() + "\n");,             },             assertEquals("Failover did not occur", 0, _failoverCompletionLatch.getCount());,         }, ,         public void assertNoFailoverCompletionWithin(long delay) throws InterruptedException,         {,             _failoverCompletionLatch.await(delay, TimeUnit.MILLISECONDS);,             assertEquals("Failover occurred unexpectedly", 1L, _failoverCompletionLatch.getCount());,         }, ,         @Override,         public void failoverComplete(),         {,             _failoverCompletionLatch.countDown();,         }, ,         @Override,         public void bytesSent(long count),         {,         }, ,         @Override,         public void bytesReceived(long count),         {,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacade.java,<init>,250-250,[        _groupChangeExecutor.submit(new RemoteNodeStateLearner());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,createIntruder,730-730,[        environmentPathFile.mkdirs();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,,613-626,[        {,             @Override,             public void stateChange(StateChangeEvent event) throws RuntimeException,             {,                 ReplicatedEnvironment.State state = event.getState();,                 if (state == ReplicatedEnvironment.State.REPLICA),                 {,                     replicaStateLatch.countDown();,                 },                 if (state == ReplicatedEnvironment.State.MASTER),                 {,                     masterStateLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,,482-496,[        {,             @Override,             public void stateChange(StateChangeEvent stateChangeEvent) throws RuntimeException,             {,                 if (stateChangeEvent.getState() == State.MASTER),                 {,                     masterStateChangeCount.incrementAndGet();,                     masterLatch.countDown();,                 },                 else if (stateChangeEvent.getState() == State.UNKNOWN),                 {,                     unknownStateChangeCount.incrementAndGet();,                     unknownLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,,525-539,[        StateChangeListener stateChangeListener = new StateChangeListener(){, ,             @Override,             public void stateChange(StateChangeEvent event) throws RuntimeException,             {,                 ReplicatedEnvironment.State state = event.getState();,                 if (state == ReplicatedEnvironment.State.REPLICA),                 {,                     firstNodeReplicaStateLatch.countDown();,                 },                 if (state == ReplicatedEnvironment.State.MASTER),                 {,                     firstNodeMasterStateLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,,554-567,[        {,             @Override,             public void stateChange(StateChangeEvent event) throws RuntimeException,             {,                 ReplicatedEnvironment.State state = event.getState();,                 if (state == ReplicatedEnvironment.State.REPLICA),                 {,                     replicaStateLatch.countDown();,                 },                 if (state == ReplicatedEnvironment.State.MASTER),                 {,                     masterStateLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/replication/ReplicatedEnvironmentFacadeTest.java,,584-598,[        StateChangeListener stateChangeListener = new StateChangeListener(){, ,             @Override,             public void stateChange(StateChangeEvent event) throws RuntimeException,             {,                 ReplicatedEnvironment.State state = event.getState();,                 if (state == ReplicatedEnvironment.State.REPLICA),                 {,                     firstNodeReplicaStateLatch.countDown();,                 },                 if (state == ReplicatedEnvironment.State.MASTER),                 {,                     firstNodeMasterStateLatch.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractStoreUpgrade.java,,67-71,[        {,             @Override,             public Long call(Database sourceDatabase, Database targetDatabase, Transaction transaction),             {,                 return sourceDatabase.count();],,
MALICIOUS_CODE,MS_FINAL_PKGPROTECT,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,,67-67,[    public static int[] QUEUE_SIZES = { 1, 1, 10, 3, 0, 0, 0, 1};],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,,65-65,[    public static final String[] QUEUE_NAMES = { "clientid:myDurSubName", "clientid:mySelectorDurSubName", QUEUE_NAME, NON_DURABLE_QUEUE_NAME,],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,,68-68,[    public static int TOTAL_MESSAGE_NUMBER = 16;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,copyStore,121-121,[        storeLocation.mkdirs();],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,call,166-166,[                return new Long(sourceDatabase.count());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/AbstractUpgradeTestCase.java,,161-166,[        {, ,             @Override,             public Long call(Database sourceDatabase, Database targetDatabase, Transaction transaction),             {,                 return new Long(sourceDatabase.count());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/DatabaseTemplate.java,,88-94,[        {, ,             @Override,             public Void call(Database sourceDatabase, Database targetDatabase, Transaction transaction),             {,                 databaseRunnable.run(sourceDatabase, targetDatabase, transaction);,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,169-180,[            {,                 @Override,                 public void processEntry(final Database sourceDatabase, final Database targetDatabase,,                         final Transaction transaction, final DatabaseEntry key, final DatabaseEntry value),                 {,                     QueueRecord record = binding.entryToObject(value);,                     DatabaseEntry newValue = new DatabaseEntry();,                     binding.objectToEntry(record, newValue);,                     targetDatabase.put(transaction, key, newValue);,                     existingQueues.add(record.getNameShortString().asString());,                     sourceDatabase.delete(transaction, key);,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,197-207,[        {,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 PartialBindingRecord record = binding.entryToObject(key);,                 if (exchangeNames.contains(record.getExchangeName()) && record.getQueueName().contains(COLON)),                 {,                     queues.add(record.getQueueName());,                 },             }],,
PERFORMANCE,DM_STRING_TOSTRING,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,processEntry,242-242,[                        UpgradeInteractionResponse response = handler.requireResponse(question.toString(),],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,277-289,[            {,                 @Override,                 public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                         DatabaseEntry key, DatabaseEntry value),                 {,                     QueueEntryKey entryKey = queueEntryKeyBinding.entryToObject(key);,                     Long messageId = entryKey.getMessageId();, ,                     if (messagesToDiscard.contains(messageId)),                     {,                         messagesToDiscard.remove(messageId);,                     },                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,340-351,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 ExchangeRecord record = binding.entryToObject(value);,                 if (AMQShortString.valueOf(ExchangeDefaults.TOPIC_EXCHANGE_CLASS).equals(record.getType())),                 {,                     topicExchanges.add(record.getName());,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,365-388,[            {, ,                 @Override,                 public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                         DatabaseEntry key, DatabaseEntry value),                 {,                     StorableMessageMetaData metaData = binding.entryToObject(value);, ,                     // get message id,                     Long messageId = LongBinding.entryToLong(key);, ,                     // ONLY copy data if message is delivered to existing queue,                     if (messagesToDiscard.contains(messageId)),                     {,                         return;,                     },                     DatabaseEntry newValue = new DatabaseEntry();,                     binding.objectToEntry(metaData, newValue);, ,                     targetDatabase.put(transaction, key, newValue);,                     targetDatabase.put(transaction, key, newValue);,                     deleteCurrent();, ,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,407-446,[            {,                 private long _prevMsgId = -1;,                 private int _bytesSeenSoFar;, ,                 @Override,                 public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                         DatabaseEntry key, DatabaseEntry value),                 {,                     // determine the msgId of the current entry,                     MessageContentKey contentKey = keyBinding.entryToObject(key);,                     long msgId = contentKey.getMessageId();, ,                     // ONLY copy data if message is delivered to existing queue,                     if (messagesToDiscard.contains(msgId)),                     {,                         return;,                     },                     // if this is a new message, restart the byte offset count.,                     if (_prevMsgId != msgId),                     {,                         _bytesSeenSoFar = 0;,                     }, ,                     // determine the content size,                     ByteBuffer content = contentBinding.entryToObject(value);,                     int contentSize = content.limit();, ,                     // create the new key: id + previously seen data count,                     MessageContentKey newKey = new MessageContentKey(msgId, _bytesSeenSoFar);,                     DatabaseEntry newKeyEntry = new DatabaseEntry();,                     keyBinding.objectToEntry(newKey, newKeyEntry);, ,                     DatabaseEntry newValueEntry = new DatabaseEntry();,                     contentBinding.objectToEntry(content, newValueEntry);, ,                     targetDatabase.put(null, newKeyEntry, newValueEntry);, ,                     _prevMsgId = msgId;,                     _bytesSeenSoFar += contentSize;,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4To5.java,,666-690,[            {, ,                 public AMQShortString getExchange(),                 {,                     return exchange;,                 }, ,                 public void setExchange(AMQShortString exchange),                 {, ,                 }, ,                 public boolean isImmediate(),                 {,                     return immediate;,                 }, ,                 public boolean isMandatory(),                 {,                     return mandatory;,                 }, ,                 public AMQShortString getRoutingKey(),                 {,                     return routingKey;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,139-152,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 BindingRecord bindingRecord = bindingTuple.entryToObject(key);, ,                 AMQShortString queueName = bindingRecord.getQueueName();,                 AMQShortString exchangeName = bindingRecord.getExchangeName();,                 AMQShortString routingKey = bindingRecord.getRoutingKey();,                 FieldTable arguments = bindingRecord.getArguments();,                 queueBindings.add(new BindingRecord(exchangeName, queueName, routingKey, arguments));,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,197-209,[        {,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 QueueEntryKey entryKey = queueEntryKeyBinding.entryToObject(key);,                 String thisQueueName = entryKey.getQueueName().asString();,                 if (thisQueueName.equals(queueName)),                 {,                     deliveryCounter.incrementAndGet();,                     messagesForQueue.add(entryKey.getMessageId());,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,224-237,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 Long messageId = LongBinding.entryToLong(key);, ,                 boolean messageIsForTheRightQueue = messageIdsForQueue.contains(messageId);,                 if (messageIsForTheRightQueue),                 {,                     metadataCounter.incrementAndGet();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,250-266,[        {,             private long _prevMsgId = -1;, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 MessageContentKey contentKey = keyBinding.entryToObject(key);,                 long msgId = contentKey.getMessageId();, ,                 if (_prevMsgId != msgId && messageIdsForQueue.contains(msgId)),                 {,                     contentCounter.incrementAndGet();,                 }, ,                 _prevMsgId = msgId;,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,281-290,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 QueueRecord record = binding.entryToObject(value);,                 String queueName = record.getNameShortString().asString();,                 actualQueueNames.add(queueName);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,305-318,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 QueueRecord record = binding.entryToObject(value);,                 String queueName = record.getNameShortString().asString();,                 if (queueName.equals(queueName)),                 {,                     foundQueue.set(true);,                     actualOwner.set(AMQShortString.toString(record.getOwner()));,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom4to5Test.java,,330-340,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction, DatabaseEntry key,,                     DatabaseEntry value),             {,                 long id = LongBinding.entryToLong(key);,                 assertTrue("Unexpected id", id > 0);,                 ByteBuffer content = contentBinding.entryToObject(value);,                 assertNotNull("Unexpected content", content);,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,testPerformXidUpgrade,132-132,[        storeLocation.mkdirs();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,160-166,[        {, ,             @Override,             public void run(Database xidDatabase, Database nullDatabase, Transaction transaction),             {,                 xidDatabase.get(null, key, value, LockMode.DEFAULT);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,194-200,[        {, ,             @Override,             public void run(Database xidDatabase, Database nullDatabase, Transaction transaction),             {,                 xidDatabase.put(null, key, value);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,220-228,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 NewQueueEntryKey newEntryRecord = newBinding.entryToObject(key);,                 assertTrue("Unexpected queue id", configuredObjects.containsKey(newEntryRecord.getQueueId()));,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,240-261,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 CompoundKeyBinding binding = new CompoundKeyBinding();,                 CompoundKey originalCompoundKey = binding.entryToObject(key);,                 int corruptedOffset = originalCompoundKey.getOffset() + 2;,                 CompoundKey corruptedCompoundKey = new CompoundKey(originalCompoundKey.getMessageId(), corruptedOffset);,                 DatabaseEntry newKey = new DatabaseEntry();,                 binding.objectToEntry(corruptedCompoundKey, newKey);, ,                 _logger.info("Deliberately corrupted message id " + originalCompoundKey.getMessageId(),                         + ", changed offset from " + originalCompoundKey.getOffset() + " to ",                         + corruptedCompoundKey.getOffset());, ,                 deleteCurrent();,                 sourceDatabase.put(transaction, newKey, value);, ,                 abort();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,412-420,[        {,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 UUID id = uuidBinding.entryToObject(key);,                 UpgradeConfiguredObjectRecord object = binding.entryToObject(value);,                 configuredObjectsRecords.put(id, object);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom5To6Test.java,,430-440,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 long id = LongBinding.entryToLong(key);,                 assertTrue("Unexpected id", id > 0);,                 byte[] content = contentBinding.entryToObject(value);,                 assertNotNull("Unexpected content", content);,             }],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java,getConfigVersion,261-261,[            cursor.close();],,getConfigVersion,247-247,[        Cursor cursor = null;],,getConfigVersion,250-250,[            cursor = configVersionDb.openCursor(null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8.java,,64-69,[    {{,         put("amq.direct", "direct");,         put("amq.topic", "topic");,         put("amq.fanout", "fanout");,         put("amq.match", "headers");,     }};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8Test.java,,221-229,[        {,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 UUID id = uuidBinding.entryToObject(key);,                 UpgradeConfiguredObjectRecord object = binding.entryToObject(value);,                 configuredObjectsRecords.put(id, object);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgradeFrom7To8Test.java,,242-250,[        {,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction,,                     DatabaseEntry key, DatabaseEntry value),             {,                 UpgradeHierarchyKey hierarchyKey = hierarchyKeyBinding.entryToObject(key);,                 UUID parentId = uuidParentBinding.entryToObject(value);,                 hierarchyRecords.put(hierarchyKey, parentId);,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/upgrade/UpgraderTest.java,testEmptyDatabaseUpgradeDoesNothing,124-124,[            nonExistentStoreLocation.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/server/store/berkeleydb/upgrade/UpgraderTest.java,testEmptyDatabaseUpgradeDoesNothing,107-107,[        nonExistentStoreLocation.mkdir();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/berkeleydb/upgrade/UpgraderTest.java,,132-142,[        {, ,             @Override,             public void processEntry(Database sourceDatabase, Database targetDatabase, Transaction transaction, DatabaseEntry key,,                     DatabaseEntry value),             {,                 long id = LongBinding.entryToLong(key);,                 assertTrue("Unexpected id", id > 0);,                 byte[] content = contentBinding.entryToObject(value);,                 assertNotNull("Unexpected content", content);,             }],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/server/store/derby/AbstractDerbyMessageStore.java,storedSizeChange,149-149,[                long newSize = _totalStoreSize += 3*delta;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/server/store/derby/AbstractDerbyMessageStore.java,,202-202,[            _totalStoreSize = getSizeOnDisk(conn);],,,149-149,[                long newSize = _totalStoreSize += 3*delta;],,,167-167,[                        long oldSize = _totalStoreSize;],,,158-158,[                        _totalStoreSize = getSizeOnDisk(conn);],,,159-159,[                        if(_totalStoreSize > getPersistentSizeHighThreshold())],,,169-169,[                        _totalStoreSize = getSizeOnDisk(conn);],,,170-170,[                        if(oldSize <= _totalStoreSize)],,,178-178,[                        if(_totalStoreSize < getPersistentSizeLowThreshold())],,,175-175,[                            _totalStoreSize = getSizeOnDisk(conn);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/store/derby/AbstractDerbyMessageStore.java,storedSizeChange,189-189,[                    JdbcUtils.closeConnection(conn, getLogger());],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/store/derby/DerbyConfigurationStore.java,,41-193,[public class DerbyConfigurationStore extends AbstractJDBCConfigurationStore,         implements MessageStoreProvider, DurableConfigurationStore, {,     private static final Logger LOGGER = Logger.getLogger(DerbyConfigurationStore.class);, ,     private final AtomicBoolean _configurationStoreOpen = new AtomicBoolean();,     private final ProvidedMessageStore _providedMessageStore = new ProvidedMessageStore();, ,     private String _connectionURL;, ,     private ConfiguredObject<?> _parent;,     private final Class<? extends ConfiguredObject> _rootClass;, ,     public DerbyConfigurationStore(final Class<? extends ConfiguredObject> rootClass),     {,         _rootClass = rootClass;,     }, ,     @Override,     public void openConfigurationStore(ConfiguredObject<?> parent,,                                        final boolean overwrite,,                                        final ConfiguredObjectRecord... initialRecords),             throws StoreException,     {,         if (_configurationStoreOpen.compareAndSet(false,  true)),         {,             _parent = parent;,             DerbyUtils.loadDerbyDriver();, ,             _connectionURL = DerbyUtils.createConnectionUrl(parent.getName(), ((FileBasedSettings)_parent).getStorePath());, ,             createOrOpenConfigurationStoreDatabase(overwrite);, ,             if(hasNoConfigurationEntries()),             {,                 update(true, initialRecords);,             },         },     }, ,     @Override,     public void upgradeStoreStructure() throws StoreException,     {,         checkConfigurationStoreOpen();,         upgradeIfNecessary(_parent);,     }, ,     @Override,     protected Connection getConnection() throws SQLException,     {,         checkConfigurationStoreOpen();,         return DriverManager.getConnection(_connectionURL);,     }, ,     @Override,     public void closeConfigurationStore() throws StoreException,     {,         if (_providedMessageStore.isMessageStoreOpen()),         {,             throw new IllegalStateException("Cannot close the store as the provided message store is still open");,         }, ,         if (_configurationStoreOpen.compareAndSet(true,  false)),         {,             try,             {,                 DerbyUtils.shutdownDatabase(_connectionURL);,             },             catch (SQLException e),             {,                 throw new StoreException("Error closing configuration store", e);,             },         },     }, ,     @Override,     protected String getSqlBlobType(),     {,         return "blob";,     }, ,     @Override,     protected String getSqlVarBinaryType(int size),     {,         return "varchar("+size+") for bit data";,     }, ,     @Override,     protected String getSqlBigIntType(),     {,         return "bigint";,     }, ,     @Override,     protected String getBlobAsString(ResultSet rs, int col) throws SQLException,     {,         return DerbyUtils.getBlobAsString(rs, col);,     }, ,     @Override,     public void onDelete(ConfiguredObject<?> parent),     {,         if (_providedMessageStore.isMessageStoreOpen()),         {,             throw new IllegalStateException("Cannot delete the store as the provided message store is still open");,         }, ,         FileBasedSettings fileBasedSettings = (FileBasedSettings) parent;,         String storePath = fileBasedSettings.getStorePath();, ,         if (!DerbyUtils.MEMORY_STORE_LOCATION.equals(storePath)),         {,             if (storePath != null),             {,                 if (LOGGER.isDebugEnabled()),                 {,                     LOGGER.debug("Deleting store " + storePath);,                 }, ,                 File configFile = new File(storePath);,                 if (!FileUtils.delete(configFile, true)),                 {,                     LOGGER.info("Failed to delete the store at location " + storePath);,                 },             },         },     }, ,     @Override,     public MessageStore getMessageStore(),     {,         return _providedMessageStore;,     }, ,     @Override,     protected boolean tableExists(final String tableName, final Connection conn) throws SQLException,     {,         return DerbyUtils.tableExists(tableName, conn);,     }, ,     @Override,     protected void checkConfigurationStoreOpen(),     {,         if (!_configurationStoreOpen.get()),         {,             throw new IllegalStateException("Configuration store is not open");,         },     }, ,     @Override,     protected Logger getLogger(),     {,         return LOGGER;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java,,51-253,[public class GenericJDBCConfigurationStore extends AbstractJDBCConfigurationStore implements MessageStoreProvider, {,     private static final Charset UTF8_CHARSET = Charset.forName("UTF-8");, ,     private static final Logger LOGGER = Logger.getLogger(GenericJDBCConfigurationStore.class);, ,     private final AtomicBoolean _configurationStoreOpen = new AtomicBoolean();,     private final MessageStore _providedMessageStore = new ProvidedMessageStore();, ,     private String _connectionURL;,     private ConnectionProvider _connectionProvider;, ,     private String _blobType;,     private String _varBinaryType;,     private String _bigIntType;,     private boolean _useBytesMethodsForBlob;, ,     private ConfiguredObject<?> _parent;,     private final Class<? extends ConfiguredObject> _rootClass;, ,     public GenericJDBCConfigurationStore(final Class<? extends ConfiguredObject> rootClass),     {,         _rootClass = rootClass;,     }, ,     @Override,     public void openConfigurationStore(ConfiguredObject<?> parent,,                                        final boolean overwrite,,                                        final ConfiguredObjectRecord... initialRecords),             throws StoreException,     {,         if (_configurationStoreOpen.compareAndSet(false,  true)),         {,             _parent = parent;, ,             JDBCSettings settings = (JDBCSettings)parent;,             _connectionURL = settings.getConnectionUrl();, ,             JDBCDetails details = JDBCDetails.getDetailsForJdbcUrl(_connectionURL, parent);, ,             if (!details.isKnownVendor() && getLogger().isInfoEnabled()),             {,                 getLogger().info("Do not recognize vendor from connection URL: " + _connectionURL,                                 + " Using fallback settings " + details);,             },             if (details.isOverridden() && getLogger().isInfoEnabled()),             {,                 getLogger().info("One or more JDBC details were overridden from context. ",                                +  " Using settings : " + details);,             }, ,             String connectionPoolType = settings.getConnectionPoolType() == null ? DefaultConnectionProviderFactory.TYPE : settings.getConnectionPoolType();, ,             JDBCConnectionProviderFactory connectionProviderFactory =,                     JDBCConnectionProviderFactory.FACTORIES.get(connectionPoolType);,             if(connectionProviderFactory == null),             {,                 LOGGER.warn("Unknown connection pool type: ",                              + connectionPoolType,                              + ".  no connection pooling will be used");,                 connectionProviderFactory = new DefaultConnectionProviderFactory();,             }, ,             try,             {,                 Map<String, String> providerAttributes = new HashMap<>();,                 Set<String> providerAttributeNames = new HashSet<String>(connectionProviderFactory.getProviderAttributeNames());,                 providerAttributeNames.retainAll(parent.getContextKeys(false));,                 for(String attr : providerAttributeNames),                 {,                     providerAttributes.put(attr, parent.getContextValue(String.class, attr));,                 }, ,                 _connectionProvider = connectionProviderFactory.getConnectionProvider(_connectionURL,,                                                                                       settings.getUsername(),,                                                                                       getPlainTextPassword(settings),,                                                                                       providerAttributes);,             },             catch (SQLException e),             {,                 throw new StoreException("Failed to create connection provider for connectionUrl: " + _connectionURL +,                                             " and username: " + settings.getUsername(), e);,             },             _blobType = details.getBlobType();,             _varBinaryType = details.getVarBinaryType();,             _useBytesMethodsForBlob = details.isUseBytesMethodsForBlob();,             _bigIntType = details.getBigintType();, ,             createOrOpenConfigurationStoreDatabase(overwrite);,             if(hasNoConfigurationEntries()),             {,                 update(true, initialRecords);,             },         },     }, ,     @Override,     public void upgradeStoreStructure() throws StoreException,     {,         checkConfigurationStoreOpen();,         upgradeIfNecessary(_parent);,     }, ,     @Override,     protected Connection getConnection() throws SQLException,     {,         return _connectionProvider.getConnection();,     }, ,     @Override,     public void closeConfigurationStore() throws StoreException,     {,         if (_configurationStoreOpen.compareAndSet(true, false)),         {,             try,             {,                 _connectionProvider.close();,             },             catch (SQLException e),             {,                 throw new StoreException("Unable to close connection provider ", e);,             },         },     }, ,     @Override,     protected String getSqlBlobType(),     {,         return _blobType;,     }, ,     @Override,     protected String getSqlVarBinaryType(int size),     {,         return String.format(_varBinaryType, size);,     }, ,     @Override,     public String getSqlBigIntType(),     {,         return _bigIntType;,     }, ,     @Override,     protected String getBlobAsString(ResultSet rs, int col) throws SQLException,     {,         byte[] bytes;,         if(_useBytesMethodsForBlob),         {,             bytes = rs.getBytes(col);,             return new String(bytes,UTF8_CHARSET);,         },         else,         {,             Blob blob = rs.getBlob(col);,             if(blob == null),             {,                 return null;,             },             bytes = blob.getBytes(1, (int)blob.length());,         },         return new String(bytes, UTF8_CHARSET);, ,     }, ,     protected byte[] getBlobAsBytes(ResultSet rs, int col) throws SQLException,     {,         if(_useBytesMethodsForBlob),         {,             return rs.getBytes(col);,         },         else,         {,             Blob dataAsBlob = rs.getBlob(col);,             return dataAsBlob.getBytes(1,(int) dataAsBlob.length());, ,         },     }, ,     @Override,     protected void checkConfigurationStoreOpen(),     {,         if (!_configurationStoreOpen.get()),         {,             throw new IllegalStateException("Configuration store is not open");,         },     }, ,     @Override,     protected Logger getLogger(),     {,         return LOGGER;,     }, ,     @Override,     public MessageStore getMessageStore(),     {,         return _providedMessageStore;,     }, ,     protected String getPlainTextPassword(final JDBCSettings settings),     {,         return Subject.doAs(SecurityManager.getSubjectWithAddedSystemRights(), new PrivilegedAction<String>()],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/jdbc/GenericJDBCConfigurationStore.java,,254-258,[        {,             @Override,             public String run(),             {,                 return settings.getPassword();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/store/jdbc/GenericJDBCMessageStore.java,,183-187,[        {,             @Override,             public String run(),             {,                 return settings.getPassword();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/transport/websocket/WebSocketProvider.java,,224-330,[    private class ConnectionWrapper implements NetworkConnection, Sender<ByteBuffer>,     {,         private final WebSocket.Connection _connection;,         private final SocketAddress _localAddress;,         private final SocketAddress _remoteAddress;,         private Principal _principal;,         private int _maxWriteIdle;,         private int _maxReadIdle;, ,         public ConnectionWrapper(final WebSocket.Connection connection,,                                  final SocketAddress localAddress,,                                  final SocketAddress remoteAddress),         {,             _connection = connection;,             _localAddress = localAddress;,             _remoteAddress = remoteAddress;,         }, ,         @Override,         public Sender<ByteBuffer> getSender(),         {,             return this;,         }, ,         @Override,         public void start(),         {, ,         }, ,         @Override,         public void setIdleTimeout(final int i),         {, ,         }, ,         @Override,         public void send(final ByteBuffer msg),         {,             try,             {,                 _connection.sendMessage(msg.array(),msg.arrayOffset()+msg.position(),msg.remaining());,             },             catch (IOException e),             {,                 close();,             },         }, ,         @Override,         public void flush(),         {, ,         }, ,         @Override,         public void close(),         {,             _connection.close();,         }, ,         @Override,         public SocketAddress getRemoteAddress(),         {,             return _remoteAddress;,         }, ,         @Override,         public SocketAddress getLocalAddress(),         {,             return _localAddress;,         }, ,         @Override,         public void setMaxWriteIdle(final int sec),         {,             _maxWriteIdle = sec;,         }, ,         @Override,         public void setMaxReadIdle(final int sec),         {,             _maxReadIdle = sec;,         }, ,         @Override,         public Principal getPeerPrincipal(),         {,             return _principal;,         }, ,         @Override,         public int getMaxReadIdle(),         {,             return _maxReadIdle;,         }, ,         @Override,         public int getMaxWriteIdle(),         {,             return _maxWriteIdle;,         }, ,         void setPeerPrincipal(final Principal peerPrincipal),         {,             _principal = peerPrincipal;,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/txn/AsyncAutoCommitTransaction.java,,285-293,[            {,                 public void postCommit(),                 {,                     immediatePostTransactionAction.run();,                 }, ,                 public void onRollback(),                 {,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/txn/AutoCommitTransactionTest.java,,392-403,[            {, ,                 @Override,                 public ServerMessage getMessage(),                 {,                     return message;,                 }, ,                 @Override,                 public TransactionLogResource getOwningResource(),                 {,                     return queue;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/txn/LocalTransactionTest.java,,616-627,[            {, ,                 @Override,                 public ServerMessage getMessage(),                 {,                     return message;,                 }, ,                 @Override,                 public TransactionLogResource getOwningResource(),                 {,                     return queue;],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/util/MapJsonSerializerTest.java,testSerializeDeserialize,43-43,[        testMap.put("integer", new Integer(10));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/server/util/MapJsonSerializerTest.java,testSerializeDeserialize,44-44,[        testMap.put("long", new Long(Long.MAX_VALUE));],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/util/StringUtil.java,<clinit>,32-32,[    private static final char[] CHARACTERS = (NUMBERS + LETTERS + LETTERS.toUpperCase() + OTHERS).toCharArray();],,
I18N,DM_CONVERT_CASE,org/apache/qpid/server/util/StringUtilTest.java,assertCharacters,49-49,[        String expectedCharacters = (numbers + letters + letters.toUpperCase() + others);],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/qpid/server/virtualhost/AbstractVirtualHost.java,shouldCreateDLQ,1262-1262,[        boolean autoDelete = MapValueConverter.getEnumAttribute(LifetimePolicy.class,],,shouldCreateDLQ,1268-1268,[        if (!(autoDelete || (arguments != null && arguments.containsKey(Queue.ALTERNATE_EXCHANGE))))],,shouldCreateDLQ,1270-1270,[            boolean dlqArgumentPresent = arguments != null],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/qpid/server/virtualhost/AbstractVirtualHost.java,getSecurityManager,294-294,[        Subject.doAs(getSecurityManager().getSubjectWithAddedSystemRights(), new PrivilegedAction<Void>()],,
STYLE,UC_USELESS_CONDITION,org/apache/qpid/server/virtualhost/AbstractVirtualHost.java,shouldCreateDLQ,1275-1275,[                if (dlqArgumentPresent)],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhost/AbstractVirtualHost.java,doDelete,1143-1164,[        if(_deleted.compareAndSet(false,true)),         {,             String hostName = getName();, ,             close();, ,             MessageStore ms = getMessageStore();,             if (ms != null),             {,                 try,                 {,                     ms.onDelete(this);,                 },                 catch (Exception e),                 {,                     _logger.warn("Exception occurred on message store deletion", e);,                 },             },             deleted();,             setState(State.DELETED);,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhost/AbstractVirtualHost.java,onRestart,1407-1454,[        resetStatistics();, ,         final List<ConfiguredObjectRecord> records = new ArrayList<>();, ,         // Transitioning to STOPPED will have closed all our children.  Now we are transition,         // back to ACTIVE, we need to recover and re-open them., ,         getDurableConfigurationStore().visitConfiguredObjectRecords(new ConfiguredObjectRecordHandler(),         {,             @Override,             public void begin(),             {,             }, ,             @Override,             public boolean handle(final ConfiguredObjectRecord record),             {,                 records.add(record);,                 return true;,             }, ,             @Override,             public void end(),             {,             },         });, ,         new GenericRecoverer(this).recover(records);, ,         Subject.doAs(SecurityManager.getSubjectWithAddedSystemRights(), new PrivilegedAction<Object>(),         {,             @Override,             public Object run(),             {,                 applyToChildren(new Action<ConfiguredObject<?>>(),                 {,                     @Override,                     public void performAction(final ConfiguredObject<?> object),                     {,                         object.open();,                     },                 });,                 return null;,             },         });, ,         onActivate();,     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecoverer.java,,289-300,[                        {, ,                             public void postCommit(),                             {,                                 queue.enqueue(message, null);,                                 ref.release();,                             }, ,                             public void onRollback(),                             {,                                 ref.release();,                             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecoverer.java,,338-348,[                        {, ,                             public void postCommit(),                             {,                                 entry.delete();,                             }, ,                             public void onRollback(),                             {,                                 entry.release();,                             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecoverer.java,,210-226,[                        {,                             @Override,                             public String getName(),                             {,                                 return "<<UNKNOWN>>";,                             }, ,                             @Override,                             public UUID getId(),                             {,                                 return queueId;,                             }, ,                             @Override,                             public MessageDurability getMessageDurability(),                             {,                                 return MessageDurability.DEFAULT;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,86-97,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 handler.handle(storedMessage);,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 handler.handle(queue.getId(), messageId);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,119-135,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 // no message to visit,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 handler.handle(queue.getId(), messageId);,             }, ,             @Override,             public Transaction newTransaction(),             {,                 return transaction;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,158-174,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 handler.handle(storedMessage);,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 handler.handle(queueId, messageId);,             }, ,             @Override,             public Transaction newTransaction(),             {,                 return transaction;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,195-206,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 handler.handle(storedMessage);,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 // No messages instances,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,238-260,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 handler.handle(storedMessage);,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 // No messages instances,             }, ,             @Override,             public void visitDistributedTransactions(DistributedTransactionHandler handler) throws StoreException,             {,                 handler.handle(format, globalId, branchId, enqueues, dequeues);,             }, ,             @Override,             public Transaction newTransaction(),             {,                 return transaction;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,305-329,[        {,             @Override,             public void visitMessages(MessageHandler handler) throws StoreException,             {,                 handler.handle(storedMessage);,             }, ,             @Override,             public void visitMessageInstances(MessageInstanceHandler handler) throws StoreException,             {,                 // We need the message to be enqueued onto the queue so that later the distributed transaction,                 // can dequeue it.,                 handler.handle(queue.getId(), messageId);,             }, ,             @Override,             public void visitDistributedTransactions(DistributedTransactionHandler handler) throws StoreException,             {,                 handler.handle(format, globalId, branchId, enqueues, dequeues);,             }, ,             @Override,             public Transaction newTransaction(),             {,                 return transaction;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,407-419,[    private final class MessageNumberMatcher extends ArgumentMatcher<EnqueueableMessage>,     {,         private final long _messageId;, ,         private MessageNumberMatcher(long messageId),         {,             _messageId = messageId;,         }, ,         @Override,         public boolean matches(Object argument),         {,             return argument instanceof EnqueueableMessage && ((EnqueueableMessage)argument).getMessageNumber() == _messageId;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/virtualhost/SynchronousMessageStoreRecovererTest.java,,396-403,[        {,             _queueId = queueId;,         }, ,         @Override,         public boolean matches(Object argument),         {,             return argument instanceof TransactionLogResource && _queueId.equals( ((TransactionLogResource)argument).getId() );],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNode.java,,49-170,[    private static final Logger LOGGER = Logger.getLogger(AbstractStandardVirtualHostNode.class);, ,     public AbstractStandardVirtualHostNode(Map<String, Object> attributes,,                                            Broker<?> parent),     {,         super(parent, attributes);,     }, ,     @SuppressWarnings({ "rawtypes", "unchecked" }),     @Override,     protected <C extends ConfiguredObject> C addChild(Class<C> childClass, Map<String, Object> attributes,,             ConfiguredObject... otherParents),     {,         if(childClass == VirtualHost.class),         {,             return (C) getObjectFactory().create(VirtualHost.class, attributes, this);,         },         return super.addChild(childClass, attributes, otherParents);,     }, ,     @Override,     protected void activate(),     {,         if (LOGGER.isDebugEnabled()),         {,             LOGGER.debug("Activating virtualhost node " + this);,         }, ,         try,         {,             ConfiguredObjectRecord[] initialRecords = getInitialRecords();,             getConfigurationStore().openConfigurationStore(this, false, initialRecords);,             if(initialRecords != null && initialRecords.length > 0),             {,                 setAttribute(VIRTUALHOST_INITIAL_CONFIGURATION, getVirtualHostInitialConfiguration(), "{}");,             },         },         catch (IOException e),         {,             throw new IllegalConfigurationException("Could not process initial configuration", e);,         }, ,         getConfigurationStore().upgradeStoreStructure();, ,         getEventLogger().message(getConfigurationStoreLogSubject(), ConfigStoreMessages.CREATED());, ,         writeLocationEventLog();, ,         getEventLogger().message(getConfigurationStoreLogSubject(), ConfigStoreMessages.RECOVERY_START());, ,         VirtualHostStoreUpgraderAndRecoverer upgrader = new VirtualHostStoreUpgraderAndRecoverer(this);,         upgrader.perform(getConfigurationStore());, ,         getEventLogger().message(getConfigurationStoreLogSubject(), ConfigStoreMessages.RECOVERY_COMPLETE());, ,         VirtualHost<?,?,?>  host = getVirtualHost();, ,         if (host != null),         {,             final VirtualHost<?,?,?> recoveredHost = host;,             Subject.doAs(SecurityManager.getSubjectWithAddedSystemRights(), new PrivilegedAction<Object>(),             {,                 @Override,                 public Object run(),                 {,                     recoveredHost.open();,                     return null;,                 },             });,         },     }, , ,     @Override,     protected ConfiguredObjectRecord enrichInitialVirtualHostRootRecord(final ConfiguredObjectRecord vhostRecord),     {,         ConfiguredObjectRecord replacementRecord;,         if (vhostRecord.getAttributes().get(ConfiguredObject.NAME) == null),         {,             Map<String, Object> updatedAttributes = new LinkedHashMap<>(vhostRecord.getAttributes());,             updatedAttributes.put(ConfiguredObject.NAME, getName());,             if (!updatedAttributes.containsKey(VirtualHost.MODEL_VERSION)),             {,                 updatedAttributes.put(VirtualHost.MODEL_VERSION, getBroker().getModelVersion());,             },             replacementRecord = new ConfiguredObjectRecordImpl(vhostRecord.getId(),,                                                                vhostRecord.getType(),,                                                                updatedAttributes,,                                                                vhostRecord.getParents());,         },         else if (vhostRecord.getAttributes().get(VirtualHost.MODEL_VERSION) == null),         {,             Map<String, Object> updatedAttributes = new LinkedHashMap<>(vhostRecord.getAttributes());, ,             updatedAttributes.put(VirtualHost.MODEL_VERSION, getBroker().getModelVersion());, ,             replacementRecord = new ConfiguredObjectRecordImpl(vhostRecord.getId(),,                                                                vhostRecord.getType(),,                                                                updatedAttributes,,                                                                vhostRecord.getParents());,         },         else,         {,             replacementRecord = vhostRecord;,         }, ,         return replacementRecord;,     }, , ,     protected abstract void writeLocationEventLog();, ,     @Override,     public String toString(),     {,         return this.getClass().getSimpleName() +  "[id=" + getId() + ", name=" + getName() + ", state=" + getState() + "]";,     }, ,     @Override,     public Collection<RemoteReplicationNode<?>> getRemoteReplicationNodes(),     {,         return Collections.emptyList();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNodeTest.java,,142-142,[        DurableConfigurationStore configStore = new NullMessageStore() {};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhostnode/AbstractStandardVirtualHostNodeTest.java,,367-378,[        return new NullMessageStore(){, ,             @Override,             public void visitConfiguredObjectRecords(ConfiguredObjectRecordHandler handler) throws StoreException,             {,                 handler.begin();,                 if (record != null),                 {,                     handler.handle(record);,                 },                 handler.end();,             }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/server/virtualhostnode/AbstractVirtualHostNode.java,getInitialConfigReader,397-397,[                initialConfigReader =new InputStreamReader(url.openStream());],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHARemoteReplicationNodeImpl.java,doDelete,155-173,[        String nodeName = getName();, ,         getEventLogger().message(_virtualHostNodeLogSubject, HighAvailabilityMessages.DELETED());, ,         try,         {,             _replicatedEnvironmentFacade.removeNodeFromGroup(nodeName);,             setState(State.DELETED);,             deleted();,         },         catch(MasterStateException e),         {,             throw new IllegalStateTransitionException("Node '" + nodeName + "' cannot be deleted when role is a master");,         },         catch (Exception e),         {,             throw new IllegalStateTransitionException("Unexpected exception on node '" + nodeName + "' deletion", e);,         },     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,onMaster,527-527,[        catch (Exception e)],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,postSetDesignatedPrimary,646-668,[        ReplicatedEnvironmentFacade environmentFacade = getReplicatedEnvironmentFacade();,         if (environmentFacade != null),         {,             try,             {,                 environmentFacade.setDesignatedPrimary(_designatedPrimary).get(MUTATE_JE_TIMEOUT_MS, TimeUnit.MILLISECONDS);,                 getEventLogger().message(getVirtualHostNodeLogSubject(),,                         HighAvailabilityMessages.DESIGNATED_PRIMARY_CHANGED(String.valueOf(_designatedPrimary)));,             },             catch (TimeoutException e),             {,                 LOGGER.warn("Change designated primary did not complete within " + MUTATE_JE_TIMEOUT_MS + "ms. New value " + _designatedPrimary + " will become effective once the JE task thread is free.");,             },             catch (InterruptedException e),             {,                 Thread.currentThread().interrupt();,             },             catch (ExecutionException e),             {,                 throw new ServerScopedRuntimeException("Failed to set designated primary to value " + _designatedPrimary + " on " + this, e);,             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,postSetPriority,618-640,[        ReplicatedEnvironmentFacade environmentFacade = getReplicatedEnvironmentFacade();,         if (environmentFacade != null),         {,             try,             {,                 environmentFacade.setPriority(_priority).get(MUTATE_JE_TIMEOUT_MS, TimeUnit.MILLISECONDS);,                 getEventLogger().message(getVirtualHostNodeLogSubject(),,                         HighAvailabilityMessages.PRIORITY_CHANGED(String.valueOf(_priority)));,             },             catch (TimeoutException e),             {,                 LOGGER.warn("Change node priority did not complete within " + MUTATE_JE_TIMEOUT_MS + "ms. New value " + _priority + " will become effective once the JE task thread is free.");,             },             catch (InterruptedException e),             {,                 Thread.currentThread().interrupt();,             },             catch (ExecutionException e),             {,                 throw new ServerScopedRuntimeException("Failed to set priority node to value " + _priority + " on " + this, e);,             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,postSetQuorumOverride,674-696,[        ReplicatedEnvironmentFacade environmentFacade = getReplicatedEnvironmentFacade();,         if (environmentFacade != null),         {,             try,             {,                 environmentFacade.setElectableGroupSizeOverride(_quorumOverride).get(MUTATE_JE_TIMEOUT_MS, TimeUnit.MILLISECONDS);,                 getEventLogger().message(getVirtualHostNodeLogSubject(),,                         HighAvailabilityMessages.QUORUM_OVERRIDE_CHANGED(String.valueOf(_quorumOverride)));,             },             catch (TimeoutException e),             {,                 LOGGER.warn("Change quorum override did not complete within " + MUTATE_JE_TIMEOUT_MS + "ms. New value " + _quorumOverride + " will become effective once the JE task thread is free.");,             },             catch (InterruptedException e),             {,                 Thread.currentThread().interrupt();,             },             catch (ExecutionException e),             {,                 throw new ServerScopedRuntimeException("Failed to set quorum override to value " + _quorumOverride + " on " + this, e);,             },         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,postSetRole,702-727,[        ReplicatedEnvironmentFacade environmentFacade = getReplicatedEnvironmentFacade();,         if (environmentFacade != null),         {,             try,             {,                 getEventLogger().message(getGroupLogSubject(), HighAvailabilityMessages.TRANSFER_MASTER(getName(), getAddress()));,                 environmentFacade.transferMasterToSelfAsynchronously().get(MUTATE_JE_TIMEOUT_MS, TimeUnit.MILLISECONDS);,             },             catch (TimeoutException e),             {,                 LOGGER.warn("Transfer master did not complete within " + MUTATE_JE_TIMEOUT_MS + "ms. Node may still be elected master at a later time.");,             },             catch (InterruptedException e),             {,                 Thread.currentThread().interrupt();,             },             catch (ExecutionException e),             {,                 throw new ServerScopedRuntimeException("Failed to transfer master to " + this, e);,             },         },         else,         {,             // Ignored,         },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,,486-491,[                        {,                             @Override,                             public Object run(),                             {,                                 recoveredHost.open();,                                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,,516-521,[                {,                     @Override,                     public Object run(),                     {,                         recoveredHost.open();,                         return null;],,
CORRECTNESS,EC_UNRELATED_INTERFACES,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeImpl.java,processNodeState,934-934,[                        if (!_permittedNodes.equals(permittedNodes))],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeOperationalLoggingTest.java,,266-274,[        {,             @Override,             public void childAdded(ConfiguredObject<?> object, ConfiguredObject<?> child),             {,                 if (child instanceof BDBHARemoteReplicationNode),                 {,                     remoteNodeAdded.countDown();,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeOperationalLoggingTest.java,,367-407,[        private String _expectedMessageFailureDescription = null;,         private String _expectedHierarchy;,         private String _expectedHierarchyFailureDescription = null;, ,         public LogMessageMatcher(String expectedMessage, String expectedHierarchy),         {,             _expectedMessage = expectedMessage;,             _expectedHierarchy = expectedHierarchy;,         }, ,         @Override,         public boolean matches(Object argument),         {,             LogMessage logMessage = (LogMessage)argument;, ,             boolean expectedMessageMatches = _expectedMessage.equals(logMessage.toString());,             if (!expectedMessageMatches),             {,                 _expectedMessageFailureDescription = "Expected message does not match. Expected: " + _expectedMessage + ", actual: " + logMessage.toString();,             },             boolean expectedHierarchyMatches = _expectedHierarchy.equals(logMessage.getLogHierarchy());,             if (!expectedHierarchyMatches),             {,                 _expectedHierarchyFailureDescription = "Expected hierarchy does not match. Expected: " + _expectedHierarchy + ", actual: " + logMessage.getLogHierarchy();,             }, ,             return expectedMessageMatches && expectedHierarchyMatches;,         }, ,         @Override,         public void describeTo(Description description),         {,             if (_expectedMessageFailureDescription != null),             {,                 description.appendText(_expectedMessageFailureDescription);,             },             if (_expectedHierarchyFailureDescription != null),             {,                 description.appendText(_expectedHierarchyFailureDescription);,             },         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeOperationalLoggingTest.java,,413-439,[        private String _failureDescription = null;, ,         public LogSubjectMatcher(LogSubject logSubject),         {,             _logSubject = logSubject;,         }, ,         @Override,         public boolean matches(Object argument),         {,             final LogSubject logSubject = (LogSubject)argument;,             final boolean foundAMatch = _logSubject.toLogString().equals(logSubject.toLogString());,             if (!foundAMatch),             {,                 _failureDescription = "LogSubject does not match. Expected: " + _logSubject.toLogString() + ", actual : " + logSubject.toLogString();,             },             return foundAMatch;,         }, ,         @Override,         public void describeTo(Description description),         {,             if (_failureDescription != null),             {,                 description.appendText(_failureDescription);,             },         }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeTestHelper.java,tearDown,106-106,[            if (firstException != null)],,tearDown,100-100,[                    if (firstException != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeTestHelper.java,tearDown,100-100,[                    if (firstException != null)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/qpid/server/virtualhostnode/berkeleydb/BDBHAVirtualHostNodeTestHelper.java,tearDown,106-106,[            if (firstException != null)],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/ssl/SSLContextFactoryTest.java,testTrustStoreDoesNotExist,44-44,[            SSLContextFactory.buildClientContext("/path/to/nothing", STORE_PASSWORD, STORE_TYPE, DEFAULT_TRUST_MANAGER_ALGORITHM, CLIENT_KEYSTORE_PATH, STORE_PASSWORD, STORE_TYPE, DEFAULT_KEY_MANAGER_ALGORITHM, null);],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/MessageCompressionTest.java,setUp,56-56,[    }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/disttest/ConfigFileTestHelper.java,getConfigFileReader,38-38,[        Reader reader = new InputStreamReader(inputStream);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/systest/disttest/DistributedTestSystemTestBase.java,,32-70,[public class DistributedTestSystemTestBase extends QpidBrokerTestCase, {,     protected Context _context;, ,     protected Connection _connection;, ,     @Override,     protected void setUp() throws Exception,     {,         super.setUp();, ,         final Properties properties = new Properties();,         properties.load(DistributedTestSystemTestBase.class.getResourceAsStream("perftests.systests.properties"));,         _context = new InitialContext(properties);, ,         _connection = getConnection();,         _connection.start();,     }, ,     @Override,     protected void tearDown() throws Exception,     {,         // no need to close connections - this is done by superclass, ,         super.tearDown();,     }, ,     public Context getContext(),     {,         return _context;,     }, ,     @Override,     public Connection getConnection() throws JMSException, NamingException,     {,         final ConnectionFactory connectionFactory = (ConnectionFactory) _context.lookup("connectionfactory");,         final Connection connection = connectionFactory.createConnection();,         _connections.add(connection);,         return connection;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/systest/disttest/DistributedTestSystemTestBase.java,setUp,44-44,[        properties.load(DistributedTestSystemTestBase.class.getResourceAsStream("perftests.systests.properties"));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/systest/disttest/clientonly/MessageProviderTest.java,testCreateMessageProviderAndSendMessage,81-81,[        messageProperties.put("priority", new SimplePropertyValue(new Integer(9)));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/systest/disttest/controllerandclient/ControllerAndClientTest.java,,244-257,[        {,             @Override,             public void run(),             {,                 try,                 {,                     client.start();,                     client.waitUntilStopped(CLIENT_BACKGROUND_THREAD_WAIT_TIME);,                 },                 finally,                 {,                     LOGGER.debug("Client thread {} finished", clientThreadName);,                 },             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/disttest/endtoend/EndToEndTest.java,createTemporaryCsvDirectory,95-95,[        csvDir.mkdir();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/systest/management/jmx/ManagementActorLoggingTest.java,,101-106,[        {,             public void onException(JMSException e),             {,                 //Failover being attempted.,                 exceptionReceived.countDown();,             }],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/management/jmx/ManagementLoggingTest.java,setUp,56-56,[        setLogMessagePrefix();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/systest/management/jmx/ManagementLoggingTest.java,testManagementUserOpenClose,283-283,[                if (jmxUtils != null)],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,testMoveMessagesBetweenQueuesWithActiveConsumerOnDestinationQueue,561-561,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,testMoveMessagesBetweenQueuesWithActiveConsumerOnSourceQueue,516-516,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,testMoveMessagesBetweenQueuesWithActiveConsumerOnDestinationQueue,561-561,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,testMoveMessagesBetweenQueuesWithActiveConsumerOnSourceQueue,516-516,[        setTestClientSystemProperty(ClientProperties.MAX_PREFETCH_PROP_NAME, new Integer(1).toString());],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,testMoveMessagesBetweenQueuesWithActiveConsumerOnDestinationQueue,580-580,[        allMessagesConsumedLatch.await(5000, TimeUnit.MILLISECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,,742-749,[        {, ,             @Override,             public void onMessage(Message arg0),             {,                 totalConsumed.incrementAndGet();,                 requiredNumberOfMessagesRead.countDown();,             }],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,awaitExpectedNotifications,865-865,[            _notificationReceivedLatch.await(timeout, timeunit);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/systest/management/jmx/QueueManagementTest.java,,832-866,[    private final class RecordingNotificationListener implements NotificationListener,     {,         private final CountDownLatch _notificationReceivedLatch;,         private final AtomicInteger _numberOfNotifications;,         private final AtomicReference<Notification> _lastNotification;, ,         private RecordingNotificationListener(int expectedNumberOfNotifications),         {,             _notificationReceivedLatch = new CountDownLatch(expectedNumberOfNotifications);,             _numberOfNotifications = new AtomicInteger(0);,             _lastNotification = new AtomicReference<Notification>();,         }, ,         @Override,         public void handleNotification(Notification notification, Object handback),         {,             _lastNotification.set(notification);,             _numberOfNotifications.incrementAndGet();,             _notificationReceivedLatch.countDown();,         }, ,         public int getNumberOfNotificationsReceived(),         {,             return _numberOfNotifications.get();,         }, ,         public Notification getLastNotification(),         {,             return _lastNotification.get();,         }, ,         public void awaitExpectedNotifications(long timeout, TimeUnit timeunit) throws InterruptedException,         {,             _notificationReceivedLatch.await(timeout, timeunit);,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/management/jmx/UserManagementTest.java,passwordFileContainsUser,224-224,[            reader = new BufferedReader(new FileReader(_passwordFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/management/jmx/UserManagementTest.java,writePasswordFile,194-194,[            writer = new FileWriter(passwordFile);],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/qpid/systest/management/jmx/UserManagementTest.java,passwordFileContainsUser,239-239,[            reader.close();],,passwordFileContainsUser,221-221,[        BufferedReader reader = null;],,passwordFileContainsUser,224-224,[            reader = new BufferedReader(new FileReader(_passwordFile));],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/qpid/systest/management/jmx/UserManagementTest.java,writePasswordFile,204-204,[            writer.close();],,writePasswordFile,191-191,[        FileWriter writer = null;],,writePasswordFile,194-194,[            writer = new FileWriter(passwordFile);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/systest/management/jmx/UserManagementTest.java,,167-171,[        {,             @Override,             public String getOutput(String username, String password),             {,                 return username + ":" + password;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/AccessControlProviderRestTest.java,testRemovalOfAccessControlProviderInErrorStateUsingManagementMode,243-243,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/AuthenticationProviderRestTest.java,testCreateAndDeletePasswordAuthenticationProviderWithNonExistingFile,274-274,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/AuthenticationProviderRestTest.java,testRemovalOfAuthenticationProviderInErrorStateUsingManagementMode,170-170,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/AuthenticationProviderRestTest.java,testUpdateOfAuthenticationProviderInErrorStateUsingManagementMode,208-208,[            file.delete();],,testUpdateOfAuthenticationProviderInErrorStateUsingManagementMode,256-256,[                principalDatabase.delete();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/BasicAuthRestTest.java,setUp,44-44,[        setSystemProperty("javax.net.debug", "ssl");],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/CompressedResponsesRestTest.java,setUp,46-46,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/systest/rest/GroupProviderRestTest.java,createTemporaryGroupFile,369-369,[        props.store(new FileOutputStream(groupFile), "test group file");],,createTemporaryGroupFile,371-371,[        return groupFile;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/systest/rest/GroupProviderRestTest.java,createTemporaryGroupFile,369-369,[        props.store(new FileOutputStream(groupFile), "test group file");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,tearDown,67-67,[                _groupFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testCreateNewFileGroupProviderForTheSameGroupFileFails,235-235,[            groupFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testCreateNewFileGroupProviderFromExistingGroupFile,168-168,[            groupFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testCreateNewFileGroupProviderFromNonExistingGroupFile,210-210,[            groupFile.delete();],,testCreateNewFileGroupProviderFromNonExistingGroupFile,211-211,[            groupFile.getParentFile().delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testDeleteGroupProvider,262-262,[            groupFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testRemovalOfGroupProviderInErrorStateUsingManagementMode,299-299,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupProviderRestTest.java,testUpdateGroupProviderAttributesFails,288-288,[            groupFile.delete();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/systest/rest/GroupRestTest.java,createTemporaryGroupFile,105-105,[        props.store(new FileOutputStream(groupFile), "test group file");],,createTemporaryGroupFile,107-107,[        return groupFile;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/systest/rest/GroupRestTest.java,createTemporaryGroupFile,105-105,[        props.store(new FileOutputStream(groupFile), "test group file");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/GroupRestTest.java,tearDown,60-60,[                _groupFile.delete();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/KeyStoreRestTest.java,setUp,48-48,[    }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/LogViewerTest.java,testDownloadExistingLogFiles,83-83,[            assertTrue("Unexpected broker log file content", new String(baos.toByteArray()).contains("BRK-1004"));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/MessagesRestTest.java,testGetMessageContent,104-104,[        byte[] messageBytes = "Test".getBytes();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/PreferencesProviderRestTest.java,tearDown,64-64,[                _authenticationProviderFile.delete();],,tearDown,68-68,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/PreferencesRestTest.java,tearDown,54-54,[                _preferencesProviderFile.delete();],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/systest/rest/QpidRestTestCase.java,,37-124,[public class QpidRestTestCase extends QpidBrokerTestCase, {,     public static final String ANONYMOUS_AUTHENTICATION_PROVIDER = "testAnonymous";,     public static final String EXTERNAL_AUTHENTICATION_PROVIDER = "testExternal";, ,     public static final String TEST1_VIRTUALHOST = "test";,     public static final String TEST2_VIRTUALHOST = "test2";,     public static final String TEST3_VIRTUALHOST = "test3";, ,     public static final String[] EXPECTED_VIRTUALHOSTS = { TEST1_VIRTUALHOST, TEST2_VIRTUALHOST, TEST3_VIRTUALHOST};,     public static final String[] EXPECTED_EXCHANGES = { "amq.fanout", "amq.match", "amq.direct","amq.topic" };, ,     private RestTestHelper _restTestHelper = new RestTestHelper(findFreePort());, ,     @Override,     public void setUp() throws Exception,     {,         // use webadmin account to perform tests,         getRestTestHelper().setUsernameAndPassword("webadmin", "webadmin");, ,         //remove the normal 'test' vhost, we will configure the vhosts below,         getBrokerConfiguration(0).removeObjectConfiguration(VirtualHostNode.class, TestBrokerConfiguration.ENTRY_NAME_VIRTUAL_HOST);, ,         // Set up virtualhost config with queues and bindings to the amq.direct,         for (String virtualhost : EXPECTED_VIRTUALHOSTS),         {,             createTestVirtualHostNode(0, virtualhost);,         }, ,         customizeConfiguration();,         super.setUp();,     }, ,     @Override,     protected void tearDown() throws Exception,     {,         try,         {,             super.tearDown();,         },         finally,         {,             getRestTestHelper().tearDown();,         },     }, ,     protected void customizeConfiguration() throws IOException,     {,         TestBrokerConfiguration config = getBrokerConfiguration();,         config.addHttpManagementConfiguration();,         config.setObjectAttribute(Port.class, TestBrokerConfiguration.ENTRY_NAME_HTTP_PORT, Port.PORT, _restTestHelper.getHttpPort());,         config.removeObjectConfiguration(Port.class, TestBrokerConfiguration.ENTRY_NAME_JMX_PORT);,         config.removeObjectConfiguration(Port.class, TestBrokerConfiguration.ENTRY_NAME_RMI_PORT);, ,         Map<String, Object> anonymousProviderAttributes = new HashMap<String, Object>();,         anonymousProviderAttributes.put(AuthenticationProvider.TYPE, AnonymousAuthenticationManager.PROVIDER_TYPE);,         anonymousProviderAttributes.put(AuthenticationProvider.NAME, ANONYMOUS_AUTHENTICATION_PROVIDER);,         config.addObjectConfiguration(AuthenticationProvider.class, anonymousProviderAttributes);, ,         config.setObjectAttribute(AuthenticationProvider.class, TestBrokerConfiguration.ENTRY_NAME_AUTHENTICATION_PROVIDER,,                                   "secureOnlyMechanisms",,                                   "{}");, , ,         // set password authentication provider on http port for the tests,         config.setObjectAttribute(Port.class, TestBrokerConfiguration.ENTRY_NAME_HTTP_PORT, Port.AUTHENTICATION_PROVIDER,,                 TestBrokerConfiguration.ENTRY_NAME_AUTHENTICATION_PROVIDER);,         config.setObjectAttribute(Plugin.class, TestBrokerConfiguration.ENTRY_NAME_HTTP_MANAGEMENT, HttpManagement.HTTP_BASIC_AUTHENTICATION_ENABLED, true);,     }, ,     public RestTestHelper getRestTestHelper(),     {,         return _restTestHelper;,     }, ,     public Map<String, Object> waitForAttributeChanged(String url, String attributeName, Object newValue) throws Exception,     {,         List<Map<String, Object>> nodeAttributes = getRestTestHelper().getJsonAsList(url);,         int timeout = 5000;,         long limit = System.currentTimeMillis() + timeout;,         while(System.currentTimeMillis() < limit && (nodeAttributes.size() == 0 || !newValue.equals(nodeAttributes.get(0).get(attributeName)))),         {,             Thread.sleep(100l);,             nodeAttributes = getRestTestHelper().getJsonAsList(url);,         },         Map<String, Object> nodeData = nodeAttributes.get(0);,         assertEquals("Attribute " + attributeName + " did not reach expected value within permitted timeout "  + timeout + "ms.", newValue, nodeData.get(attributeName));,         return nodeData;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/systest/rest/QpidRestTestCase.java,,47-47,[    public static final String[] EXPECTED_EXCHANGES = { "amq.fanout", "amq.match", "amq.direct","amq.topic" };],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/systest/rest/QpidRestTestCase.java,,46-46,[    public static final String[] EXPECTED_VIRTUALHOSTS = { TEST1_VIRTUALHOST, TEST2_VIRTUALHOST, TEST3_VIRTUALHOST};],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/RestTestHelper.java,createTemporaryPasswdFile,480-480,[            writer = new BufferedWriter(new FileWriter(testFile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/RestTestHelper.java,openManagementConnection,179-179,[            String encoded = new String(new Base64().encode((_username + ":" + _password).getBytes()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/RestTestHelper.java,openManagementConnection,179-179,[            String encoded = new String(new Base64().encode((_username + ":" + _password).getBytes()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/RestTestHelper.java,readConnectionInputStream,223-223,[            LOGGER.trace("RESPONSE:" + new String(baos.toByteArray()));],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/systest/rest/RestTestHelper.java,setUseSsl,436-437,[        _useSsl = useSsl;,     }],,setUseSSL,228-229,[        this.useSSL = useSSL;,     }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/RestTestHelper.java,tearDown,467-467,[                _passwdFile.delete();],,
STYLE,UC_USELESS_OBJECT,org/apache/qpid/systest/rest/RestTestHelper.java,createTestQueues,567-567,[            Map<String, Object> bindingData = new HashMap<String, Object>();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/systest/rest/RestTestHelper.java,,205-205,[        {],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,authenticateUser,319-319,[        os.write(requestParameters.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,configureBase64MD5FilePrincipalDatabase,370-370,[            writer = new FileWriter(passwordFile);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,requestSasServerChallenge,291-291,[        os.write(("mechanism=" + mechanism).getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,testPlainSaslAuthenticationForIncorrectPassword,132-132,[        os.write(parameters.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,testPlainSaslAuthenticationForNonExistingUser,157-157,[        os.write(parameters.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/systest/rest/SaslRestTest.java,testPlainSaslAuthenticationForValidCredentials,107-107,[        os.write(parameters.getBytes());],,testPlainSaslAuthenticationForValidCredentials,110-110,[        int code = getRestTestHelper().submitRequest("/service/sasl", "POST", parameters.getBytes());],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/qpid/systest/rest/SaslRestTest.java,configureBase64MD5FilePrincipalDatabase,375-375,[            writer.close();],,configureBase64MD5FilePrincipalDatabase,367-367,[        FileWriter writer = null;],,configureBase64MD5FilePrincipalDatabase,370-370,[            writer = new FileWriter(passwordFile);],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/TrustStoreRestTest.java,setUp,48-48,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/UserPreferencesRestTest.java,tearDown,59-59,[                _preferencesProviderFile.delete();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/acl/GroupRestACLTest.java,setUp,54-54,[        _groupFile = createTemporaryGroupFile();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/systest/rest/acl/GroupRestACLTest.java,createTemporaryGroupFile,91-91,[        props.store(new FileOutputStream(groupFile), "test group file");],,createTemporaryGroupFile,93-93,[        return groupFile;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/systest/rest/acl/GroupRestACLTest.java,createTemporaryGroupFile,91-91,[        props.store(new FileOutputStream(groupFile), "test group file");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/acl/GroupRestACLTest.java,tearDown,76-76,[                _groupFile.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/acl/UserPreferencesRestACLTest.java,tearDown,69-69,[                _preferencesProviderFile.delete();],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/systest/rest/acl/UserRestACLTest.java,setUp,54-54,[        _groupFile = createTemporaryGroupFile();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/qpid/systest/rest/acl/UserRestACLTest.java,createTemporaryGroupFile,93-93,[        props.store(new FileOutputStream(groupFile), "test group file");],,createTemporaryGroupFile,95-95,[        return groupFile;],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/qpid/systest/rest/acl/UserRestACLTest.java,createTemporaryGroupFile,93-93,[        props.store(new FileOutputStream(groupFile), "test group file");],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/systest/rest/acl/UserRestACLTest.java,tearDown,78-78,[                _groupFile.delete();],,
BAD_PRACTICE,NM_CONFUSING,org/apache/qpid/test/client/DupsOkTest.java,testDupsOK,87-165,[        Connection clientConnection = getConnection();, ,         final Session clientSession = clientConnection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);, ,         MessageConsumer consumer = clientSession.createConsumer(_queue);, ,         assertEquals("The queue should have msgs at start", MSG_COUNT, ((AMQSession) clientSession).getQueueDepth((AMQDestination) _queue));, ,         clientConnection.start();, ,         consumer.setMessageListener(new MessageListener(),         {,             private int _msgCount = 0;, ,             public void onMessage(Message message),             {,                 _msgCount++;,                 if (message == null),                 {,                     fail("Should not get null messages");,                 }, ,                 if (message instanceof TextMessage),                 {,                     try,                     {,                         if (message.getIntProperty("count") == MSG_COUNT),                         {,                             try,                             {,                                 if(_msgCount != MSG_COUNT),                                 {,                                     assertEquals("Wrong number of messages seen.", MSG_COUNT, _msgCount);,                                 },                             },                             finally,                             {,                                 //This is the last message so release test.,                                 _awaitCompletion.countDown();,                             },                         },                     },                     catch (JMSException e),                     {,                         fail("Unable to get int property 'count'");,                     },                 },                 else,                 {,                     fail("Got wrong message type");,                 },             },         });, ,         try,         {,             if (!_awaitCompletion.await(120, TimeUnit.SECONDS)),             {,                 fail("Test did not complete in 120 seconds");,             },         },         catch (InterruptedException e),         {,             fail("Unable to wait for test completion");,             throw e;,         }, ,         //Close consumer to give broker time to process in bound Acks. As The main thread will be released while,         // before the dispatcher has sent the ack back to the broker.,         consumer.close();, ,         clientSession.close();, ,         final Session clientSession2 = clientConnection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);, ,         assertEquals("The queue should have 0 msgs left", 0, ((AMQSession) clientSession2).getQueueDepth((AMQDestination) _queue));, ,         clientConnection.close();,     }],,testDupsOk,168-169,[        testAcking(false, Session.DUPS_OK_ACKNOWLEDGE);,     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/client/QueueBrowserAutoAckTest.java,sendMessages,85-85,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/client/QueueBrowserAutoAckTest.java,validate,293-293,[        catch (Exception e)],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/client/RollbackOrderTest.java,testOrderingAfterRollbackOnMessage,173-173,[        count.await(10l, TimeUnit.SECONDS);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/client/destination/AddressBasedDestinationTest.java,testSubscriptionForSameDestination,872-872,[        catch(Exception e)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/client/destination/AddressBasedDestinationTest.java,testXSubscribeOverrides,950-950,[        catch(Exception e)],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/client/failover/FailoverTest.java,tearDown,95-95,[        catch (Exception e)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/client/message/MessageToStringTest.java,getBytes,235-235,[            byteResults = ((TextMessage) receivedMessage).getText().getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/client/message/MessageToStringTest.java,testBytesMessage,91-91,[        byte[] testBytes = test.toString().getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/client/message/MessageToStringTest.java,testTextMessage,146-146,[        byte[] testBytes = stringValue.getBytes();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/client/message/SelectorTest.java,testRuntimeSelectorError,232-232,[        catch (Exception e)],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/test/unit/ack/Acknowledge2ConsumersTest.java,,37-37,[    protected static int NUM_MESSAGES = 100;],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/test/unit/ack/RecoverTest.java,testOrderingWithAsyncConsumer,432-432,[            lock.wait(8000);],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/test/unit/ack/RecoverTest.java,testOrderingWithAsyncConsumer,432-432,[            lock.wait(8000);],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/ack/RecoverTest.java,onMessage,270-270,[                    lock.notify();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/unit/basic/BytesMessageTest.java,send,122-122,[            byte[] data = ("Message " + i).getBytes();],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/test/unit/basic/BytesMessageTest.java,testModificationAfterSend,318-318,[            assertEquals("Message "+writtenMsgCount+" not of expected size", (long) ((writtenMsgCount + 1)*1024),],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/BytesMessageTest.java,onMessage,250-250,[            received.notify();],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/basic/FieldTableMessageTest.java,test,108-108,[        _waitForCompletion.await(20, TimeUnit.SECONDS);],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/MapMessageTest.java,onMessage,1243-1243,[            received.notify();],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/test/unit/basic/MapMessageTest.java,assertEqual,1202-1227,[        List<String> errors = new ArrayList<String>();,         while (expected.hasNext() && actual.hasNext()),         {,             try,             {,                 assertEqual(expected.next(), actual.next());,             },             catch (Exception e),             {,                 errors.add(e.getMessage());,             },         },         while (expected.hasNext()),         {,             errors.add("Expected " + expected.next() + " but no more actual values.");,         },         while (actual.hasNext()),         {,             errors.add("Found " + actual.next() + " but no more expected values.");,         }, ,         if (!errors.isEmpty()),         {,             throw new RuntimeException(errors.toString());,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/test/unit/basic/MultipleConnectionTest.java,randomize,177-177,[        return in + System.currentTimeMillis();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/MultipleConnectionTest.java,onMessage,125-125,[            notify();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/qpid/test/unit/basic/MultipleConnectionTest.java,,91-109,[            this((AMQConnection) getConnection("guest", "guest"), dest);,         }, ,         Publisher(AMQConnection connection, AMQDestination dest) throws Exception,         {,             _connection = connection;,             _session = _connection.createSession(false, AMQSession.NO_ACKNOWLEDGE);,             _producer = _session.createProducer(dest);,         }, ,         void send(String msg) throws JMSException,         {,             _producer.send(_session.createTextMessage(msg));,         }, ,         void close() throws JMSException,         {,             _connection.close();,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/qpid/test/unit/basic/MultipleConnectionTest.java,,54-79,[            this((AMQConnection) getConnection("guest", "guest"), dest, sessions);,         }, ,         Receiver(AMQConnection connection, AMQDestination dest, int sessions) throws Exception,         {,             _connection = connection;,             _sessions = new AMQSession[sessions];,             _counters = new MessageCounter[sessions];,             for (int i = 0; i < sessions; i++),             {,                 _sessions[i] = _connection.createSession(false, AMQSession.NO_ACKNOWLEDGE);,                 _counters[i] = new MessageCounter(_sessions[i].toString());,                 _sessions[i].createConsumer(dest).setMessageListener(_counters[i]);,             }, ,             _connection.start();,         }, ,         void close() throws JMSException,         {,             _connection.close();,         }, ,         public MessageCounter[] getCounters(),         {,             return _counters;],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/ObjectMessageTest.java,onMessage,225-225,[            received.notify();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/test/unit/basic/ObjectMessageTest.java,,239-255,[        {,             this.data = data;,         }, ,         public int hashCode(),         {,             return data.hashCode();,         }, ,         public boolean equals(Object o),         {,             return (o instanceof Payload) && ((Payload) o).data.equals(data);,         }, ,         public String toString(),         {,             return "Payload[" + data + "]";],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/PropertyValueTest.java,onMessage,360-360,[            received.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/basic/SessionStartTest.java,onMessage,100-100,[        notify();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/test/unit/basic/SessionStartTest.java,test,80-80,[            wait(1000);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/basic/TextMessageTest.java,test,108-108,[        _waitForCompletion.await(20, TimeUnit.SECONDS);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/client/AMQSessionTest.java,testQueueDepthForQueueThatDoesNotExistLegacyBehaviour_08_091,124-124,[        _session = (AMQSession) _connection.createSession(true, AMQSession.SESSION_TRANSACTED);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/client/AMQSessionTest.java,setUp,51-51,[        _connection = (AMQConnection) getConnection();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/client/AMQSessionTest.java,setUp,53-53,[        _queue = new AMQQueue(_connection, "myqueue");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/client/AMQSessionTest.java,setUp,54-54,[        _session = (AMQSession) _connection.createSession(true, AMQSession.SESSION_TRANSACTED);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/client/AMQSessionTest.java,setUp,52-52,[        _topic = new AMQTopic(_connection, "mytopic");],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/test/unit/client/MaxDeliveryCountTest.java,doSynchronousTest,594-605,[                    switch(deliveryMode),                     {,                         case Session.SESSION_TRANSACTED:,                             session.rollback();,                             break;,                         case Session.CLIENT_ACKNOWLEDGE:,                             session.recover();, ,                             //sleep then do a synchronous op to give the broker,                             //time to resend all the messages,                             Thread.sleep(500);,                             ((AMQSession<?,?>) session).sync();],,doSynchronousTest,628-634,[                    switch(deliveryMode),                     {,                         case Session.SESSION_TRANSACTED:,                             session.commit();,                             break;,                         case Session.CLIENT_ACKNOWLEDGE:,                             message.acknowledge();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/test/unit/client/MaxDeliveryCountTest.java,onMessage,456-466,[                        switch(deliveryMode),                         {,                             case Session.SESSION_TRANSACTED:,                                 session.rollback();,                                 break;,                             case Session.CLIENT_ACKNOWLEDGE:,                                 //fall through,                             case Session.DUPS_OK_ACKNOWLEDGE:,                                 //fall through,                             case Session.AUTO_ACKNOWLEDGE:,                                 session.recover();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java,run,55-55,[                catch (Exception e)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/channelclose/CloseWithBlockingReceiveTest.java,,46-58,[        {, ,             public void run(),             {,                 try,                 {,                     Thread.sleep(1000);,                     connection.close();,                 },                 catch (Exception e),                 {,                 },             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/test/unit/client/connection/BrokerClosesClientConnectionTest.java,,151-163,[    private class Listener implements MessageListener,     {,         int _messageCount;, ,         @Override,         public synchronized void onMessage(Message message),         {,             _messageCount++;,         }, ,         public synchronized int getCount(),         {,             return _messageCount;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/client/connection/BrokerClosesClientConnectionTest.java,awaitException,145-145,[            _exceptionReceivedLatch.await(timeoutInMillis, TimeUnit.MILLISECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/test/unit/client/connection/BrokerClosesClientConnectionTest.java,,132-146,[    private final class RecordingExceptionListener implements ExceptionListener,     {,         private final CountDownLatch _exceptionReceivedLatch = new CountDownLatch(1);,         private volatile JMSException _exception;, ,         @Override,         public void onException(JMSException exception),         {,             _exception = exception;,         }, ,         public JMSException awaitException(long timeoutInMillis) throws InterruptedException,         {,             _exceptionReceivedLatch.await(timeoutInMillis, TimeUnit.MILLISECONDS);,             return _exception;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/unit/client/connection/ConnectionFactoryTest.java,testCreateConnectionWithUsernamePassword,53-53,[        catch(Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionFactoryTest.java,testCreateConnectionWithUsernamePassword,53-53,[        catch(Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionStartTest.java,setUp,74-74,[        catch (Exception e)],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testDefaultExchanges,133-133,[            conn.close();],,testDefaultExchanges,72-72,[        AMQConnection conn = null;],,testDefaultExchanges,75-75,[            BrokerDetails broker = getBroker();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testClientIdCannotBeChanged,252-252,[            if (connection != null)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testDefaultExchanges,127-127,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testClientIDVerificationForDifferentUsers,344-344,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testClientIDVerificationForSameUser,318-318,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testExceptionWhenUserPassIsRequired,366-366,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/client/connection/ConnectionTest.java,testUnsupportedSASLMechanism,287-287,[        catch (Exception e)],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java,testExceptionListenerHearsBrokerShutdown,72-72,[        exceptionReceivedLatch.await(10, TimeUnit.SECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/connection/ExceptionListenerTest.java,,217-232,[        {,             @Override,             public void onMessage(Message msg),             {,                 try,                 {,                     Session mlSession = connection.createSession(true, Session.SESSION_TRANSACTED);  // ** Deadlock,                     mlSession.createProducer(unknownQueue).send(msg);,                     mlSession.commit();,                 },                 catch (JMSException je),                 {,                     // Connection is closed by the listener, so exceptions here are expected.,                     LOGGER.debug("Expected exception - message listener got exception", je);,                 },             }],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/qpid/test/unit/client/connectionurl/ConnectionURLTest.java,testSerialization,636-636,[        assertTrue(connectionurl instanceof Serializable);],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,200-205,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,200-205,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,230-235,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,230-235,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,260-265,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,260-265,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,290-295,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,290-295,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,324-329,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,324-329,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
BAD_PRACTICE,SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,353-358,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/destinationurl/DestinationURLTest.java,,353-358,[            {,                 super(url);,             },             public boolean isNameRequired(),             {,                 return false;],,
PERFORMANCE,DM_BOOLEAN_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,134-134,[        bm.writeObject(new Boolean(true));],,testWriteObject,135-135,[        bm.writeObject(new Boolean(false));],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,144-144,[        bm.writeObject(new Double(8.7d));],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,143-143,[        bm.writeObject(new Float(1.7f));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,136-136,[        bm.writeObject(new Byte((byte)2));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,138-138,[        bm.writeObject(new Character('g'));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,140-140,[        bm.writeObject(new Integer(101));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,139-139,[        bm.writeObject(new Short((short) 29));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/BytesMessageTest.java,testWriteObject,141-141,[        bm.writeObject(new Long(50003222L));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,setUp,79-79,[        data = new Serializable[] { a1, a2, b, c, "Hello World!", new Integer(1001) };],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,onMessage,264-264,[            notify();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,,285-302,[        {,             sValue = s;,             iValue = i;,         }, ,         public int hashCode(),         {,             return iValue;,         }, ,         public boolean equals(Object o),         {,             return (o instanceof A) && equals((A) o);,         }, ,         protected boolean equals(A a),         {,             return areEqual(a.sValue, sValue) && (a.iValue == iValue);],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,equals,297-297,[            return (o instanceof A) && equals((A) o);],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,,312-318,[            super(i, s);,             time = System.currentTimeMillis();,         }, ,         protected boolean equals(A a),         {,             return super.equals(a) && (a instanceof B) && (time == ((B) a).time);],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,,322-322,[    private static class C extends HashMap implements Serializable],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/qpid/test/unit/client/message/ObjectMessageTest.java,,322-322,[    private static class C extends HashMap implements Serializable],,
PERFORMANCE,DM_BOOLEAN_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,137-137,[        bm.writeObject(new Boolean(true));],,testWriteObject,138-138,[        bm.writeObject(new Boolean(false));],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,147-147,[        bm.writeObject(new Double(8.7d));],,
PERFORMANCE,DM_FP_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,146-146,[        bm.writeObject(new Float(1.7f));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,139-139,[        bm.writeObject(new Byte((byte)2));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,141-141,[        bm.writeObject(new Character('g'));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,143-143,[        bm.writeObject(new Integer(101));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,142-142,[        bm.writeObject(new Short((short) 29));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,testWriteObject,144-144,[        bm.writeObject(new Long(50003222L));],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/test/unit/client/message/StreamMessageTest.java,checkConversionsFail,446-476,[                switch (conversion),                 {,                     case 0:,                         sm.readBoolean();,                         break;,                     case 1:,                         sm.readByte();,                         break;,                     case 2:,                         sm.readShort();,                         break;,                     case 3:,                         sm.readChar();,                         break;,                     case 4:,                         sm.readInt();,                         break;,                     case 5:,                         sm.readLong();,                         break;,                     case 6:,                         sm.readFloat();,                         break;,                     case 7:,                         sm.readDouble();,                         break;,                     case 8:,                         sm.readString();,                         break;,                     case 9:,                         sm.readBytes(new byte[3]);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/client/protocol/AMQProtocolSessionTest.java,,115-135,[            {, ,                 public void setIdleTimeout(int i),                 {, ,                 }, ,                 public void send(ByteBuffer msg),                 {, ,                 }, ,                 public void flush(),                 {, ,                 }, ,                 public void close(),                 {, ,                 }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/test/unit/close/MessageRequeueTest.java,,44-44,[    protected static AtomicInteger consumerIds = new AtomicInteger(0);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/unit/message/JMSPropertiesTest.java,testQpidExtensionProperties,185-185,[        m.setObjectProperty("foo-bar", "foobar".getBytes());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/test/unit/message/NonQpidMessage.java,getIntProperty,243-243,[                return Integer.valueOf(null);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/qpid/test/unit/message/NonQpidMessage.java,getLongProperty,263-263,[                return Long.valueOf(null);],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/qpid/test/unit/message/NonQpidMessage.java,getByteProperty,203-203,[                return Byte.valueOf(null);],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/qpid/test/unit/message/NonQpidMessage.java,getIntProperty,243-243,[                return Integer.valueOf(null);],,
CORRECTNESS,NP_NULL_PARAM_DEREF_NONVIRTUAL,org/apache/qpid/test/unit/message/NonQpidMessage.java,getShortProperty,223-223,[                return Short.valueOf(null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/unit/message/StreamMessageTest.java,,126-145,[            {, ,                 public void onMessage(Message message),                 {,                     final StreamMessage sm = (StreamMessage) message;,                     try,                     {,                         sm.clearBody();,                         // it is legal to extend a stream message's content,                         sm.writeString("dfgjshfslfjshflsjfdlsjfhdsljkfhdsljkfhsd");,                     },                     catch (Throwable t),                     {,                         listenerCaughtException.set(t);,                     },                     finally,                     {,                         awaitMessages.countDown();,                     },                 }],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java,awaitException,263-263,[            _latch.await(POSITIVE_RECEIVE_TIMEOUT, TimeUnit.MILLISECONDS);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/test/unit/topic/DurableSubscriptionTest.java,,248-269,[    private final class StoringExceptionListener implements ExceptionListener,     {,         private volatile JMSException _exception;,         private CountDownLatch _latch = new CountDownLatch(1);, ,         @Override,         public void onException(JMSException exception),         {,             _exception = exception;,             _logger.info("Exception listener received: " + exception);,             _latch.countDown();,         }, ,         public JMSException awaitException() throws InterruptedException,         {,             _latch.await(POSITIVE_RECEIVE_TIMEOUT, TimeUnit.MILLISECONDS);,             return _exception;,         }, ,         public JMSException getException(),         {,             return _exception;],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/unit/transacted/CommitRollbackTest.java,testCommitWithinOnMessage,410-410,[        cd.await(30, TimeUnit.SECONDS);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,getNewXid,90-90,[            branchQualifier = branchQualifierSt.getBytes();],,getNewXid,91-91,[            globalTransactionID = globalTransactionIDSt.getBytes();],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,,55-55,[    protected static MessageConsumer _consumer = null;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,,60-60,[    protected static TextMessage _message = null;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,,50-50,[    protected static MessageProducer _producer = null;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,,45-45,[    protected static XAResource _xaResource = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,init,101-101,[                _xaResource = session.getXAResource();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,init,121-121,[                _consumer = session.createConsumer(destination);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,init,130-130,[                _message = session.createTextMessage();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,init,110-110,[                _producer = session.createProducer(destination);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/AbstractXATestCase.java,getNewXid,92-92,[            _xidCounter++;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/FaultTest.java,init,116-116,[            _queue = (Queue) getInitialContext().lookup(QUEUENAME);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/FaultTest.java,init,117-117,[            _queueFactory = getConnectionFactory();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/FaultTest.java,init,121-121,[            _nonXASession = _queueConnection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/FaultTest.java,init,120-120,[            _queueConnection = _queueFactory.createQueueConnection("guest","guest");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/FaultTest.java,init,118-118,[            _xaqueueConnection = _queueFactory.createXAQueueConnection("guest", "guest");],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/qpid/test/unit/xa/QueueTest.java,tearDown,110-110,[                fail("Exception thrown when cleaning standard connection: " + e.getStackTrace());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/QueueTest.java,init,126-126,[                _queue = (Queue) getInitialContext().lookup(QUEUENAME);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/QueueTest.java,init,165-165,[                _nonXASession = _queueConnection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/QueueTest.java,init,164-164,[                _queueConnection = _queueFactory.createQueueConnection("guest", "guest");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/QueueTest.java,init,136-136,[                _queueFactory = getConnectionFactory();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/QueueTest.java,init,145-145,[                _xaqueueConnection= getNewQueueXAConnection();],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1592-1592,[                    synchronized (lock)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1626-1626,[                    synchronized (lock)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1639-1639,[            catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/xa/TopicTest.java,testDurSub,479-479,[            catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/xa/TopicTest.java,testMultiMessagesDurSub,596-596,[                catch (Exception e)],,testMultiMessagesDurSub,704-704,[            catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/unit/xa/TopicTest.java,testMultiMessagesDurSubCrash,831-831,[                catch (Exception e)],,testMultiMessagesDurSubCrash,930-930,[                catch (Exception e)],,testMultiMessagesDurSubCrash,1025-1025,[                catch (Exception e)],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,init,126-126,[                _topic = (Topic) getInitialContext().lookup(TOPICNAME);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,init,162-162,[                _nonXASession = _topicConnection.createTopicSession(true, Session.AUTO_ACKNOWLEDGE);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,init,153-153,[                _session = _topicConnection.createXATopicSession();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,init,144-144,[                _topicConnection = getNewTopicXAConnection();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,init,135-135,[                _topicFactory = getConnectionFactory();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1615-1615,[                _xaResource = _session.getXAResource();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1614-1614,[                _session = _topicConnection.createXATopicSession();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/test/unit/xa/TopicTest.java,testMigrateDurableSubscriber,1594-1594,[                        lock.wait();],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/test/unit/xa/TopicTest.java,onMessage,1715-1715,[                synchronized (_lock)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/test/unit/xa/TopicTest.java,onMessage,1725-1725,[                synchronized (_lock)],,
MT_CORRECTNESS,JLM_JSR166_UTILCONCURRENT_MONITORENTER,org/apache/qpid/test/unit/xa/TopicTest.java,onMessage,1734-1734,[                synchronized (_lock)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/test/unit/xa/TopicTest.java,,1697-1739,[        {,             _counter = init;,             _end = end;,             _lock = lock;,         }, ,         public void onMessage(Message message),         {,             long seq = 0;,             try,             {,                 seq = message.getLongProperty(TopicTest._sequenceNumberPropertyName);,             },             catch (JMSException e),             {,                 _logger.error("Error getting long property: " + TopicTest._sequenceNumberPropertyName , e);,                 TopicTest.failure();,                 _lock.set(false);,                 synchronized (_lock),                 {,                     _lock.notifyAll();,                 },             },             if (seq != _counter),             {,                 _logger.info("received message " + seq + " expected " + _counter);,                 TopicTest.failure();,                 _lock.set(false);,                 synchronized (_lock),                 {,                     _lock.notifyAll();,                 },             },             _counter++;,             if (_counter > _end),             {,                 _lock.set(false);,                 synchronized (_lock),                 {,                     _lock.notifyAll();,                 },             },         }],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/test/utils/BrokerCommandHelperTest.java,setUp,44-44,[        when(_logConfigFile.getAbsolutePath()).thenReturn("log Config File");],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/test/utils/FailoverBaseCase.java,,31-93,[public class FailoverBaseCase extends QpidBrokerTestCase, {,     protected static final Logger _logger = LoggerFactory.getLogger(FailoverBaseCase.class);, ,     public static final long DEFAULT_FAILOVER_TIME = 10000L;, ,     protected void setUp() throws java.lang.Exception,     {,         super.setUp();,         startBroker(getFailingPort());,     }, ,     /**,      * We are using failover factories,      *,      * @return a connection ,      * @throws Exception,      */,     @Override,     public AMQConnectionFactory getConnectionFactory() throws NamingException,     {,         _logger.info("get ConnectionFactory");,         if (_connectionFactory == null),         {,             if (Boolean.getBoolean("profile.use_ssl")),             {,                 _connectionFactory = getConnectionFactory("failover.ssl");,             },             else,             {,                 _connectionFactory = getConnectionFactory("failover");,             },         },         return _connectionFactory;,     }, ,     public void tearDown() throws Exception,     {,         try,         {,             super.tearDown();,         },         finally,         {,             // Ensure we shutdown any secondary brokers, even if we are unable,             // to cleanly tearDown the QTC.,             stopBroker(getFailingPort());,             FileUtils.deleteDirectory(System.getProperty("QPID_WORK") + "/" + getFailingPort());,         },     }, ,     public void failBroker(int port),     {,         try,         {,             //TODO: use killBroker instead,             stopBroker(port);,         },         catch (Exception e),         {,             throw new RuntimeException(e);,         },     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/Piper.java,<init>,53-53,[        _in = new BufferedReader(new InputStreamReader(in));],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/qpid/test/utils/Piper.java,await,78-78,[            _latch.await(timeout, unit);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/test/utils/QpidBrokerTestCase.java,stopBrokerSafely,791-791,[                    catch(Exception killException)],,
I18N,DM_CONVERT_CASE,org/apache/qpid/test/utils/QpidBrokerTestCase.java,<init>,161-161,[    protected BrokerType _brokerType = BrokerType.valueOf(System.getProperty(BROKER_TYPE, "").toUpperCase());],,
I18N,DM_CONVERT_CASE,org/apache/qpid/test/utils/QpidBrokerTestCase.java,getPathRelativeToWorkingDirectory,680-680,[                configPath = configPath.toLowerCase();],,getPathRelativeToWorkingDirectory,681-681,[                workingDirectoryPath = workingDirectoryPath.toLowerCase();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/QpidBrokerTestCase.java,createMessage,1367-1367,[        String payload = new String(new byte[messageSize]);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/QpidBrokerTestCase.java,runBare,292-292,[            out = new PrintStream(new FileOutputStream(_outputFile), true);],,runBare,305-305,[                        .format("%s/TEST-%s.broker.out", _output, qname)), true);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/QpidBrokerTestCase.java,runBare,293-293,[            err = new PrintStream(String.format("%s/TEST-%s.err", _output, qname));],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/test/utils/QpidBrokerTestCase.java,,95-1454,[    protected final static String QpidHome = System.getProperty("QPID_HOME");,     private final File _configFile = new File(System.getProperty("broker.config"));,     private File _logConfigFile;,     protected final String _brokerStoreType = System.getProperty("broker.config-store-type", "JSON");,     protected static final Logger _logger = Logger.getLogger(QpidBrokerTestCase.class);,     protected static final int LOGMONITOR_TIMEOUT = 5000;, ,     protected long RECEIVE_TIMEOUT = 1000l;, ,     private Map<String, String> _propertiesSetForBroker = new HashMap<String, String>();, ,     private Map<Integer, TestBrokerConfiguration> _brokerConfigurations;, ,     protected static final String INDEX = "index";,     protected static final String CONTENT = "content";, ,     private static final String DEFAULT_INITIAL_CONTEXT = "org.apache.qpid.jndi.PropertiesFileInitialContextFactory";, ,     static,     {,         String initialContext = System.getProperty(Context.INITIAL_CONTEXT_FACTORY);, ,         if (initialContext == null || initialContext.length() == 0),         {,             System.setProperty(Context.INITIAL_CONTEXT_FACTORY, DEFAULT_INITIAL_CONTEXT);,         },     }, ,     // system properties,     private static final String BROKER_LANGUAGE = "broker.language";,     protected static final String BROKER_TYPE = "broker.type";,     private static final String BROKER_COMMAND = "broker.command";,     private static final String BROKER_COMMAND_PLATFORM = "broker.command." + SystemUtils.getOSConfigSuffix();,     private static final String BROKER_CLEAN_BETWEEN_TESTS = "broker.clean.between.tests";,     private static final String BROKER_VERSION = "broker.version";,     protected static final String BROKER_READY = "broker.ready";,     private static final String BROKER_STOPPED = "broker.stopped";,     private static final String TEST_OUTPUT = "test.output";,     private static final String BROKER_LOG_INTERLEAVE = "broker.log.interleave";,     private static final String BROKER_LOG_PREFIX = "broker.log.prefix";,     private static final String BROKER_PERSITENT = "broker.persistent";,     public static final String PROFILE_USE_SSL = "profile.use_ssl";, ,     public static final int DEFAULT_PORT_VALUE = 5672;,     public static final int DEFAULT_SSL_PORT_VALUE = 5671;,     public static final int DEFAULT_JMXPORT_REGISTRYSERVER = 8999;,     public static final int JMXPORT_CONNECTORSERVER_OFFSET = 100;,     public static final int DEFAULT_HTTP_MANAGEMENT_PORT_VALUE = 8080;,     public static final int DEFAULT_HTTPS_MANAGEMENT_PORT_VALUE = 8443;, ,     public static final String TEST_AMQP_PORT_PROTOCOLS_PROPERTY="test.amqp_port_protocols";, ,     // values,     protected static final String JAVA = "java";,     protected static final String CPP = "cpp";, ,     protected static final String QPID_HOME = "QPID_HOME";, ,     public static final int DEFAULT_PORT = Integer.getInteger("test.port", DEFAULT_PORT_VALUE);,     public static final int FAILING_PORT = Integer.parseInt(System.getProperty("test.port.alt"));,     public static final int DEFAULT_MANAGEMENT_PORT = Integer.getInteger("test.mport", DEFAULT_JMXPORT_REGISTRYSERVER);,     public static final int DEFAULT_HTTP_MANAGEMENT_PORT = Integer.getInteger("test.hport", DEFAULT_HTTP_MANAGEMENT_PORT_VALUE);,     public static final int DEFAULT_HTTPS_MANAGEMENT_PORT = Integer.getInteger("test.hsport", DEFAULT_HTTPS_MANAGEMENT_PORT_VALUE);,     public static final int DEFAULT_SSL_PORT = Integer.getInteger("test.port.ssl", DEFAULT_SSL_PORT_VALUE);, ,     protected String _brokerLanguage = System.getProperty(BROKER_LANGUAGE, JAVA);,     protected BrokerType _brokerType = BrokerType.valueOf(System.getProperty(BROKER_TYPE, "").toUpperCase());, ,     private static final String BROKER_COMMAND_TEMPLATE = System.getProperty(BROKER_COMMAND_PLATFORM, System.getProperty(BROKER_COMMAND));,     protected BrokerCommandHelper _brokerCommandHelper = new BrokerCommandHelper(BROKER_COMMAND_TEMPLATE);, ,     private Boolean _brokerCleanBetweenTests = Boolean.getBoolean(BROKER_CLEAN_BETWEEN_TESTS);,     private final Protocol _brokerProtocol = Protocol.valueOf("AMQP_" + System.getProperty(BROKER_VERSION, " ").substring(1));,     protected String _output = System.getProperty(TEST_OUTPUT, System.getProperty("java.io.tmpdir"));,     protected Boolean _brokerPersistent = Boolean.getBoolean(BROKER_PERSITENT);, ,     protected static String _brokerLogPrefix = System.getProperty(BROKER_LOG_PREFIX,"BROKER: ");,     protected static boolean _interleaveBrokerLog = Boolean.valueOf(System.getProperty(BROKER_LOG_INTERLEAVE,"true"));, ,     protected File _outputFile;, ,     protected PrintStream _testcaseOutputStream;, ,     protected Map<Integer, BrokerHolder> _brokers = new HashMap<Integer, BrokerHolder>();, ,     protected InitialContext _initialContext;,     protected AMQConnectionFactory _connectionFactory;, ,     // the connections created for a given test,     protected List<Connection> _connections = new ArrayList<Connection>();,     public static final String QUEUE = "queue";,     public static final String TOPIC = "topic";,     public static final String MANAGEMENT_MODE_PASSWORD = "mm_password";, ,     /** Map to hold test defined environment properties */,     private Map<String, String> _env;, ,     /** Ensure our messages have some sort of size */,     protected static final int DEFAULT_MESSAGE_SIZE = 1024;, ,     /** Size to create our message*/,     private int _messageSize = DEFAULT_MESSAGE_SIZE;,     /** Type of message*/,     protected enum MessageType,     {,         BYTES,,         MAP,,         OBJECT,,         STREAM,,         TEXT,     },     private MessageType _messageType  = MessageType.TEXT;, ,     public QpidBrokerTestCase(),     {,         super();,         _brokerConfigurations = new HashMap<Integer, TestBrokerConfiguration>();,         initialiseLogConfigFile();,     }, ,     public TestBrokerConfiguration getBrokerConfiguration(int port),     {,         int actualPort = getPort(port);, ,         synchronized (_brokerConfigurations),         {,             TestBrokerConfiguration configuration = _brokerConfigurations.get(actualPort);,             if (configuration == null),             {,                 configuration = createBrokerConfiguration(actualPort);,             },             return configuration;,         },     }, ,     public TestBrokerConfiguration getBrokerConfiguration(),     {,         return getBrokerConfiguration(DEFAULT_PORT);,     }, ,     public TestBrokerConfiguration createBrokerConfiguration(int port),     {,         int actualPort = getPort(port);,         if(_taskExecutor == null),         {,             _taskExecutor = new TaskExecutorImpl();,             _taskExecutor.start();,         },         TestBrokerConfiguration  configuration = new TestBrokerConfiguration(_brokerStoreType, _configFile.getAbsolutePath(), _taskExecutor);,         synchronized (_brokerConfigurations),         {,             _brokerConfigurations.put(actualPort, configuration);,         },         if (actualPort != DEFAULT_PORT),         {,             configuration.setObjectAttribute(Port.class, TestBrokerConfiguration.ENTRY_NAME_AMQP_PORT, Port.PORT, actualPort);,             configuration.setObjectAttribute(Port.class, TestBrokerConfiguration.ENTRY_NAME_RMI_PORT, Port.PORT, getManagementPort(actualPort));,             configuration.setObjectAttribute(Port.class, TestBrokerConfiguration.ENTRY_NAME_JMX_PORT, Port.PORT, getManagementPort(actualPort) + JMXPORT_CONNECTORSERVER_OFFSET);, ,             String workDir = System.getProperty("QPID_WORK") + File.separator + TestBrokerConfiguration.ENTRY_NAME_VIRTUAL_HOST + File.separator + actualPort;,             configuration.setObjectAttribute(VirtualHostNode.class, TestBrokerConfiguration.ENTRY_NAME_VIRTUAL_HOST, JsonVirtualHostNode.STORE_PATH, workDir);,         }, ,         return configuration;,     }, ,     private void initialiseLogConfigFile(),     {,         _logConfigFile = new File(LOG4J_CONFIG_FILE_PATH);,         if(!_logConfigFile.exists()),         {,             throw new RuntimeException("Log config file " + _logConfigFile.getAbsolutePath() + " does not exist");,         },     }, ,     public Logger getLogger(),     {,         return QpidBrokerTestCase._logger;,     }, ,     @Override,     public void runBare() throws Throwable,     {,         String qname = getClass().getName() + "." + getName();, ,         // Initialize this for each test run,         _env = new HashMap<String, String>();, ,         PrintStream oldOut = System.out;,         PrintStream oldErr = System.err;,         PrintStream out = null;,         PrintStream err = null;, ,         boolean redirected = _output != null && _output.length() > 0;,         if (redirected),         {,             _outputFile = new File(String.format("%s/TEST-%s.out", _output, qname));,             out = new PrintStream(new FileOutputStream(_outputFile), true);,             err = new PrintStream(String.format("%s/TEST-%s.err", _output, qname));, ,             System.setOut(out);,             System.setErr(err);, ,             if (_interleaveBrokerLog),             {,                 _testcaseOutputStream = out;,             },             else,             {,                 _testcaseOutputStream = new PrintStream(new FileOutputStream(String,                         .format("%s/TEST-%s.broker.out", _output, qname)), true);,             },         }, ,         try,         {,             super.runBare();,         },         catch (Exception e),         {,             _logger.error("exception", e);,             throw e;,         },         finally,         {,             stopAllBrokers();, ,             // reset properties used in the test,             revertSystemProperties();,             revertLoggingLevels();, ,             if(_brokerCleanBetweenTests),             {,                 final String qpidWork = System.getProperty("QPID_WORK");,                 cleanBrokerWork(qpidWork);,                 createBrokerWork(qpidWork);,             }, ,             _logger.info("==========  stop " + getTestName() + " ==========");, ,             if (redirected),             {,                 System.setErr(oldErr);,                 System.setOut(oldOut);,                 err.close();,                 out.close();,                 if (!_interleaveBrokerLog),                 {,                     _testcaseOutputStream.close();,                 },             },         },     }, ,     @Override,     protected void setUp() throws Exception,     {,         super.setUp();,         _taskExecutor = new TaskExecutorImpl();,         _taskExecutor.start();,         if (!_configFile.exists()),         {,             fail("Unable to test without config file:" + _configFile);,         }, ,         startBroker();,     }, ,     /**,      * Return the management port in use by the broker on this main port,      *,      * @param mainPort the broker's main port.,      *,      * @return the management port that corresponds to the broker on the given port,      */,     protected int getManagementPort(int mainPort),     {,         return mainPort + (DEFAULT_MANAGEMENT_PORT - DEFAULT_PORT);,     }, ,     /**,      * The returned set of port numbers is only a guess because it assumes no ports have been overridden,      * using system properties.,      */,     protected Set<Integer> guessAllPortsUsedByBroker(int mainPort),     {,         Set<Integer> ports = new HashSet<Integer>();,         int managementPort = getManagementPort(mainPort);,         int connectorServerPort = managementPort + JMXPORT_CONNECTORSERVER_OFFSET;, ,         ports.add(mainPort);,         ports.add(managementPort);,         ports.add(connectorServerPort);,         ports.add(DEFAULT_SSL_PORT);, ,         return ports;,     }, ,     /**,      * Get the Port that is use by the current broker,      *,      * @return the current port,      */,     protected int getPort(),     {,         return getPort(0);,     }, ,     protected int getPort(int port),     {,         if (!_brokerType.equals(BrokerType.EXTERNAL)),         {,             return port == 0 ? DEFAULT_PORT : port;,         },         else,         {,             return port;,         },     }, ,     public void startBroker() throws Exception,     {,         startBroker(0);,     }, ,     public void startBroker(int port) throws Exception,     {,         startBroker(port, false);,     }, ,     public void startBroker(int port, boolean managementMode) throws Exception,     {,         int actualPort = getPort(port);,         TestBrokerConfiguration configuration = getBrokerConfiguration(actualPort);,         startBroker(actualPort, configuration, managementMode);,     }, ,     protected File getBrokerCommandLog4JFile(),     {,         return _logConfigFile;,     }, ,     protected void setBrokerCommandLog4JFile(File file),     {,         _logConfigFile = file;,         _logger.info("Modified log config file to: " + file);,     }, ,     public void startBroker(int port, TestBrokerConfiguration testConfiguration) throws Exception,     {,         startBroker(port, testConfiguration, false);,     }, ,     public void startBroker(int port, TestBrokerConfiguration testConfiguration, boolean managementMode) throws Exception,     {,         port = getPort(port);, ,         if(_brokers.get(port) != null),         {,             throw new IllegalStateException("There is already an existing broker running on port " + port);,         }, ,         Set<Integer> portsUsedByBroker = guessAllPortsUsedByBroker(port);,         String testConfig = saveTestConfiguration(port, testConfiguration);, ,         if (_brokerType.equals(BrokerType.INTERNAL) && !existingInternalBroker()),         {,             setSystemProperty(BrokerProperties.PROPERTY_USE_CUSTOM_RMI_SOCKET_FACTORY, "false");,             BrokerOptions options = new BrokerOptions();, ,             options.setConfigurationStoreType(_brokerStoreType);,             options.setConfigurationStoreLocation(testConfig);,             options.setManagementMode(managementMode);,             if (managementMode),             {,                 options.setManagementModePassword(MANAGEMENT_MODE_PASSWORD);,             }, ,             //Set the log config file, relying on the log4j.configuration system property,             //set on the JVM by the JUnit runner task in module.xml.,             options.setLogConfigFileLocation(_logConfigFile.getAbsolutePath());, ,             Broker broker = new Broker();,             _logger.info("Starting internal broker (same JVM)");,             broker.startup(options);, ,             _brokers.put(port, new InternalBrokerHolder(broker, System.getProperty("QPID_WORK"), portsUsedByBroker));,         },         else if (!_brokerType.equals(BrokerType.EXTERNAL)),         {,             // Add the port to QPID_WORK to ensure unique working dirs for multi broker tests,             final String qpidWork = getQpidWork(_brokerType, port);, ,             String[] cmd = _brokerCommandHelper.getBrokerCommand(port, testConfig, _brokerStoreType, _logConfigFile);,             if (managementMode),             {,                 String[] newCmd = new String[cmd.length + 3];,                 System.arraycopy(cmd, 0, newCmd, 0, cmd.length);,                 newCmd[cmd.length] = "-mm";,                 newCmd[cmd.length + 1] = "-mmpass";,                 newCmd[cmd.length + 2] = MANAGEMENT_MODE_PASSWORD;,                 cmd = newCmd;,             },             _logger.info("Starting spawn broker using command: " + StringUtils.join(cmd, ' '));,             ProcessBuilder pb = new ProcessBuilder(cmd);,             pb.redirectErrorStream(true);,             Map<String, String> processEnv = pb.environment();,             String qpidHome = System.getProperty(QPID_HOME);,             processEnv.put(QPID_HOME, qpidHome);,             //Augment Path with bin directory in QPID_HOME.,             boolean foundPath = false;,             final String pathEntry = qpidHome + File.separator + "bin";,             for(Map.Entry<String,String> entry : processEnv.entrySet()),             {,                 if(entry.getKey().equalsIgnoreCase("path")),                 {,                     entry.setValue(entry.getValue().concat(File.pathSeparator + pathEntry));,                     foundPath = true;,                 },             },             if(!foundPath),             {,                 processEnv.put("PATH", pathEntry);, ,             },             //Add the test name to the broker run.,             // DON'T change PNAME, qpid.stop needs this value.,             processEnv.put("QPID_PNAME", "-DPNAME=QPBRKR -DTNAME=\"" + getTestName() + "\"");,             processEnv.put("QPID_WORK", qpidWork);, ,             // Use the environment variable to set amqj.logging.level for the broker,             // The value used is a 'server' value in the test configuration to,             // allow a differentiation between the client and broker logging levels.,             if (System.getProperty("amqj.server.logging.level") != null),             {,                 setBrokerEnvironment("AMQJ_LOGGING_LEVEL", System.getProperty("amqj.server.logging.level"));,             }, ,             // Add all the environment settings the test requested,             if (!_env.isEmpty()),             {,                 for (Map.Entry<String, String> entry : _env.entrySet()),                 {,                     processEnv.put(entry.getKey(), entry.getValue());,                 },             }, ,             String qpidOpts = "";, ,             // a synchronized hack to avoid adding into QPID_OPTS the values,             // of JVM properties "test.virtualhosts" and "test.config" set by a concurrent startup process,             synchronized (_propertiesSetForBroker),             {,                 // Add default test logging levels that are used by the log4j-test,                 // Use the convenience methods to push the current logging setting,                 // in to the external broker's QPID_OPTS string.,                 setSystemProperty("amqj.protocol.logging.level");,                 setSystemProperty("root.logging.level");, ,                 setSystemProperty("test.port");,                 setSystemProperty("test.mport");,                 setSystemProperty("test.cport");,                 setSystemProperty("test.hport");,                 setSystemProperty("test.hsport");,                 setSystemProperty("test.port.ssl");,                 setSystemProperty("test.port.alt");,                 setSystemProperty("test.port.alt.ssl");,                 setSystemProperty("test.amqp_port_protocols");, ,                 setSystemProperty("virtualhostnode.type");,                 setSystemProperty("virtualhostnode.context.blueprint");, ,                 // Add all the specified system properties to QPID_OPTS,                 if (!_propertiesSetForBroker.isEmpty()),                 {,                     for (String key : _propertiesSetForBroker.keySet()),                     {,                         qpidOpts += " -D" + key + "=" + _propertiesSetForBroker.get(key);,                     },                 },             },             if (processEnv.containsKey("QPID_OPTS")),             {,                 qpidOpts = processEnv.get("QPID_OPTS") + qpidOpts;,             },             processEnv.put("QPID_OPTS", qpidOpts);, ,             // cpp broker requires that the work directory is created,             createBrokerWork(qpidWork);, ,             Process process = pb.start();, ,             Piper p = new Piper(process.getInputStream(),,                                 _testcaseOutputStream,,                                 System.getProperty(BROKER_READY),,                                 System.getProperty(BROKER_STOPPED),,                                 _interleaveBrokerLog ? _brokerLogPrefix : null);, ,             p.start();,             StringBuilder cmdLine = new StringBuilder(cmd[0]);,             for(int i = 1; i< cmd.length; i++),             {,                 cmdLine.append(' ');,                 cmdLine.append(cmd[i]);,             }, ,             SpawnedBrokerHolder holder = new SpawnedBrokerHolder(process, qpidWork, portsUsedByBroker, cmdLine.toString());,             if (!p.await(30, TimeUnit.SECONDS)),             {,                 _logger.info("broker failed to become ready (" + p.getReady() + "):" + p.getStopLine());,                 String threadDump = holder.dumpThreads();,                 if (!threadDump.isEmpty()),                 {,                     _logger.info("the result of a try to capture thread dump:" + threadDump);,                 },                 //Ensure broker has stopped,                 process.destroy();,                 cleanBrokerWork(qpidWork);,                 throw new RuntimeException("broker failed to become ready:",                                            + p.getStopLine());,             }, ,             try,             {,                 //test that the broker is still running and hasn't exited unexpectedly,                 int exit = process.exitValue();,                 _logger.info("broker aborted: " + exit);,                 cleanBrokerWork(qpidWork);,                 throw new RuntimeException("broker aborted: " + exit);,             },             catch (IllegalThreadStateException e),             {,                 // this is expect if the broker started successfully,             }, ,             _brokers.put(port, holder);,         },     }, ,     private boolean existingInternalBroker(),     {,         for(BrokerHolder holder : _brokers.values()),         {,             if(holder instanceof InternalBrokerHolder),             {,                 return true;,             },         }, ,         return false;,     }, ,     private String getQpidWork(BrokerType broker, int port),     {,         if (!broker.equals(BrokerType.EXTERNAL)),         {,             return System.getProperty("QPID_WORK")+ "/" + port;,         }, ,         return System.getProperty("QPID_WORK");,     }, ,     public String getTestConfigFile(),     {,         return getTestConfigFile(getPort());,     }, ,     public String getTestConfigFile(int port),     {,         return _output + File.separator + getTestQueueName() + "-" + port + "-config";,     }, ,     protected String getPathRelativeToWorkingDirectory(String file),     {,         File configLocation = new File(file);,         File workingDirectory = new File(System.getProperty("user.dir"));, ,         _logger.debug("Converting path to be relative to working directory: " + file);, ,         try,         {,             String configPath = configLocation.getAbsolutePath();,             String workingDirectoryPath = workingDirectory.getCanonicalPath();,             if (SystemUtils.isWindows()),             {,                 configPath = configPath.toLowerCase();,                 workingDirectoryPath = workingDirectoryPath.toLowerCase();,             },             if(!configPath.startsWith(workingDirectoryPath)),             {,                 throw new RuntimeException("Provided path is not a child of the working directory: " + workingDirectoryPath);,             }, ,             String substring = configPath.replace(workingDirectoryPath, "").substring(1);,             _logger.debug("Converted relative path: " + substring);, ,             return substring;,         },         catch (IOException e),         {,             throw new RuntimeException("Problem while converting to relative path", e);,         },     }, ,     protected String saveTestConfiguration(int port, TestBrokerConfiguration testConfiguration),     {,         String testConfig = getTestConfigFile(port);,         String relative = getPathRelativeToWorkingDirectory(testConfig);,         if (testConfiguration != null && !testConfiguration.isSaved()),         {,             _logger.info("Saving test broker configuration at: " + testConfig);,             testConfiguration.save(new File(testConfig));,             testConfiguration.setSaved(true);,         },         return relative;,     }, ,     protected void cleanBrokerWork(final String qpidWork),     {,         if (qpidWork != null),         {,             _logger.info("Cleaning broker work dir: " + qpidWork);, ,             File file = new File(qpidWork);,             if (file.exists()),             {,                 final boolean success = FileUtils.delete(file, true);,                 if(!success),                 {,                     throw new RuntimeException("Failed to recursively delete beneath : " + file);,                 },             },         },     }, ,     protected void createBrokerWork(final String qpidWork),     {,         if (qpidWork != null),         {,             final File dir = new File(qpidWork);,             dir.mkdirs();,             if (!dir.isDirectory()),             {,                 throw new RuntimeException("Failed to created Qpid work directory : " + qpidWork);,             },         },     }, ,     public void stopBroker(),     {,         stopBroker(0);,     }, ,     public void stopAllBrokers(),     {,         boolean exceptionOccured = false;,         Set<Integer> runningBrokerPorts = new HashSet<Integer>(getBrokerPortNumbers());,         for (int brokerPortNumber : runningBrokerPorts),         {,             if (!stopBrokerSafely(brokerPortNumber)),             {,                 exceptionOccured = true;,             },         },         if (exceptionOccured),         {,             throw new RuntimeException("Exception occurred on stopping of test broker. Please, examine logs for details");,         },     }, ,     protected boolean stopBrokerSafely(int brokerPortNumber),     {,         boolean success = true;,         BrokerHolder broker = _brokers.get(brokerPortNumber);,         try,         {,             stopBroker(brokerPortNumber);,         },         catch(Exception e),         {,             success = false;,             _logger.error("Failed to stop broker " + broker + " at port " + brokerPortNumber, e);,             if (broker != null),             {,                 // save the thread dump in case of dead locks,                 try,                 {,                     _logger.error("Broker " + broker + " thread dump:" + broker.dumpThreads());,                 },                 finally,                 {,                     // try to kill broker,                     try,                     {,                         broker.kill();,                     },                     catch(Exception killException),                     {,                         // ignore,                     },                 },             },         },         return success;,     }, ,     public void stopBroker(int port),     {,         if (isBrokerPresent(port)),         {,             port = getPort(port);, ,             _logger.info("stopping broker on port : " + port);,             BrokerHolder broker = _brokers.remove(port);,             broker.shutdown();,         },     }, ,     public void killBroker(),     {,         killBroker(0);,     }, ,     public void killBroker(int port),     {,         if (isBrokerPresent(port)),         {,             port = getPort(port);, ,             _logger.info("killing broker on port : " + port);,             BrokerHolder broker = _brokers.remove(port);,             broker.kill();,         },     }, ,     public boolean isBrokerPresent(int port),     {,         port = getPort(port);, ,         return _brokers.containsKey(port);,     }, ,     public BrokerHolder getBroker(int port) throws Exception,     {,         port = getPort(port);,         return _brokers.get(port);,     }, ,     public Set<Integer> getBrokerPortNumbers(),     {,         return new HashSet<Integer>(_brokers.keySet());,     }, ,     /**,      * Creates a new virtual host node in broker configuration for given broker port,      * @param brokerPort broker port,      * @param virtualHostNodeName virtual host node name,      */,     protected void createTestVirtualHostNode(int brokerPort, String virtualHostNodeName, boolean withBlueprint),     {,         String storeType = getTestProfileVirtualHostNodeType();,         String storeDir = null;, ,         if (System.getProperty("profile", "").startsWith("java-dby-mem")),         {,             storeDir = ":memory:";,         },         else if (!MemoryConfigurationStore.TYPE.equals(storeType)),         {,             storeDir = "${QPID_WORK}" + File.separator + virtualHostNodeName + File.separator + brokerPort;,         }, ,         // add new virtual host node with vhost blueprint configuration to the broker store,         Map<String, Object> attributes = new HashMap<String, Object>();,         attributes.put(VirtualHostNode.NAME, virtualHostNodeName);,         attributes.put(VirtualHostNode.TYPE, storeType);,         if (storeDir != null),         {,             attributes.put(JsonVirtualHostNode.STORE_PATH, storeDir);,         }, ,         if (withBlueprint),         {,             final String blueprint = getTestProfileVirtualHostNodeBlueprint();, ,             attributes.put(ConfiguredObject.CONTEXT,,                            Collections.singletonMap(AbstractVirtualHostNode.VIRTUALHOST_BLUEPRINT_CONTEXT_VAR,,                                                     blueprint));,         }, ,         int port = getPort(brokerPort);,         getBrokerConfiguration(port).addObjectConfiguration(VirtualHostNode.class, attributes);,     }, ,     protected void createTestVirtualHostNode(int brokerPort, String virtualHostNodeName),     {,         createTestVirtualHostNode(brokerPort, virtualHostNodeName, true);,     }, ,     /**,      * Set a System property that is to be applied only to the external test,      * broker.,      *,      * This is a convenience method to enable the setting of a -Dproperty=value,      * entry in QPID_OPTS,      *,      * This is only useful for the External Java Broker tests.,      *,      * @param property the property name,      * @param value the value to set the property to,      */,     protected void setBrokerOnlySystemProperty(String property, String value),     {,         synchronized (_propertiesSetForBroker),         {,             if (!_propertiesSetForBroker.containsKey(property)),             {,                 _propertiesSetForBroker.put(property, value);,             },         },     }, ,     /**,      * Set a System (-D) property for this test run.,      *,      * This convenience method copies the current VMs System Property,      * for the external VM Broker.,      *,      * @param property the System property to set,      */,     protected void setSystemProperty(String property),     {,         String value = System.getProperty(property);,         if (value != null),         {,             setSystemProperty(property, value);,         },     }, ,     /**,      * Set a System property for the duration of this test.,      *,      * When the test run is complete the value will be reverted.,      *,      * The values set using this method will also be propagated to the external,      * Java Broker via a -D value defined in QPID_OPTS.,      *,      * If the value should not be set on the broker then use,      * setTestClientSystemProperty().,      *,      * @param property the property to set,      * @param value    the new value to use,      */,     protected void setSystemProperty(String property, String value),     {,         synchronized(_propertiesSetForBroker),         {,             // Record the value for the external broker,             if (value == null),             {,                 _propertiesSetForBroker.remove(property);,             },             else,             {,                 _propertiesSetForBroker.put(property, value);,             },         },         //Set the value for the test client vm aswell.,         setTestClientSystemProperty(property, value);,     }, ,     /**,      * Set a System  property for the client (and broker if using the same vm) of this test.,      *,      * @param property The property to set,      * @param value the value to set it to.,      */,     protected void setTestClientSystemProperty(String property, String value),     {,         setTestSystemProperty(property, value);,     }, ,     /**,      * Restore the System property values that were set before this test run.,      */,     protected void revertSystemProperties(),     {,         revertTestSystemProperties();, ,         // We don't change the current VMs settings for Broker only properties,         // so we can just clear this map,         _propertiesSetForBroker.clear();,     }, ,     /**,      * Add an environment variable for the external broker environment,      *,      * @param property the property to set,      * @param value    the value to set it to,      */,     protected void setBrokerEnvironment(String property, String value),     {,         _env.put(property, value);,     }, ,     /**,      * Check whether the broker is an 0.8,      *,      * @return true if the broker is an 0_8 version, false otherwise.,      */,     public boolean isBroker08(),     {,         return _brokerProtocol.equals(Protocol.AMQP_0_8);,     }, ,     public boolean isBroker010(),     {,         return _brokerProtocol.equals(Protocol.AMQP_0_10);,     }, ,     public Protocol getBrokerProtocol(),     {,         return _brokerProtocol;,     }, ,     protected boolean isJavaBroker(),     {,         return _brokerLanguage.equals("java");,     }, ,     protected boolean isCppBroker(),     {,         return _brokerLanguage.equals("cpp");,     }, ,     protected boolean isExternalBroker(),     {,         return !isInternalBroker();,     }, ,     protected boolean isInternalBroker(),     {,         return _brokerType.equals(BrokerType.INTERNAL);,     }, ,     protected boolean isBrokerStorePersistent(),     {,         return _brokerPersistent;,     }, ,     public void restartBroker() throws Exception,     {,         restartBroker(0);,     }, ,     public void restartBroker(int port) throws Exception,     {,         stopBroker(port);,         startBroker(port);,     }, ,     /**,      * we assume that the environment is correctly set,      * i.e. -Djava.naming.provider.url="..//example010.properties",      *,      * @return an initial context,      *,      * @throws NamingException if there is an error getting the context,      */,     public InitialContext getInitialContext() throws NamingException,     {,         if (_initialContext == null),         {,             _initialContext = new InitialContext();,         },         return _initialContext;,     }, ,     /**,      * Get the default connection factory for the currently used broker,      * Default factory is "local",      *,      * @return A connection factory,      *,      * @throws Exception if there is an error getting the factory,      */,     public AMQConnectionFactory getConnectionFactory() throws NamingException,     {,         if (_connectionFactory == null),         {,             if (Boolean.getBoolean(PROFILE_USE_SSL)),             {,                 _connectionFactory = getConnectionFactory("default.ssl");,             },             else,             {,                 _connectionFactory = getConnectionFactory("default");,             },         },         return _connectionFactory;,     }, ,     /**,      * Get a connection factory for the currently used broker,      *,      * @param factoryName The factory name,      *,      * @return A connection factory,      *,      * @throws Exception if there is an error getting the factory,      */,     public AMQConnectionFactory getConnectionFactory(String factoryName) throws NamingException,     {,         return (AMQConnectionFactory) getInitialContext().lookup(factoryName);,     }, ,     public Connection getConnection() throws JMSException, NamingException,     {,         return getConnection(GUEST_USERNAME, GUEST_PASSWORD);,     }, ,     public Connection getConnectionWithOptions(Map<String, String> options),                 throws URLSyntaxException, NamingException, JMSException,     {,         ConnectionURL curl = new AMQConnectionURL(getConnectionFactory().getConnectionURLString());,         for(Map.Entry<String,String> entry : options.entrySet()),         {,             curl.setOption(entry.getKey(), entry.getValue());,         },         curl = new AMQConnectionURL(curl.toString());, ,         curl.setUsername(GUEST_USERNAME);,         curl.setPassword(GUEST_PASSWORD);,         return getConnection(curl);,     }, , ,     public Connection getConnection(ConnectionURL url) throws JMSException,     {,         _logger.debug("get connection for " + url.getURL());,         Connection connection = new AMQConnectionFactory(url).createConnection(url.getUsername(), url.getPassword());, ,         _connections.add(connection);, ,         return connection;,     }, ,     /**,      * Get a connection (remote or in-VM),      *,      * @param username The user name,      * @param password The user password,      *,      * @return a newly created connection,      *,      * @throws Exception if there is an error getting the connection,      */,     public Connection getConnection(String username, String password) throws JMSException, NamingException,     {,         _logger.debug("get connection for username " + username);,         Connection con = getConnectionFactory().createConnection(username, password);,         //add the connection in the list of connections,         _connections.add(con);,         return con;,     }, ,     protected Connection getClientConnection(String username, String password, String id) throws JMSException, URLSyntaxException, AMQException, NamingException,     {,         _logger.debug("get connection for id " + id);,         Connection con = getConnectionFactory().createConnection(username, password, id);,         //add the connection in the list of connections,         _connections.add(con);,         return con;,     }, ,     /**,      * Useful, for example, to avoid the connection being automatically closed in {@link #tearDown()},      * if it has deliberately been put into an error state already.,      */,     protected void forgetConnection(Connection connection),     {,         _logger.debug("Forgetting about connection " + connection);,         boolean removed = _connections.remove(connection);,         assertTrue(,                 "The supplied connection " + connection + " should have been one that I already know about",,                 removed);,     }, ,     /**,      * Return a uniqueName for this test.,      * In this case it returns a queue Named by the TestCase and TestName,      *,      * @return String name for a queue,      */,     protected String getTestQueueName(),     {,         return getClass().getSimpleName() + "-" + getName();,     }, ,     /**,      * Return a Queue specific for this test.,      * Uses getTestQueueName() as the name of the queue,      * @return,      */,     public Queue getTestQueue(),     {,         return new AMQQueue(ExchangeDefaults.DIRECT_EXCHANGE_NAME, getTestQueueName());,     }, ,     /**,      * Return a Topic specific for this test.,      * Uses getTestQueueName() as the name of the topic,      * @return,      */,     public Topic getTestTopic(),     {,         return new AMQTopic(AMQShortString.valueOf(ExchangeDefaults.TOPIC_EXCHANGE_NAME), getTestQueueName());,     }, ,     @Override,     protected void tearDown() throws java.lang.Exception,     {,         super.tearDown();, ,         // close all the connections used by this test.,         for (Connection c : _connections),         {,             c.close();,         },         if(_taskExecutor != null),         {,             _taskExecutor.stop();,         },     }, ,     /**,      * Consume all the messages in the specified queue. Helper to ensure,      * persistent tests don't leave data behind.,      *,      * @param queue the queue to purge,      *,      * @return the count of messages drained,      *,      * @throws Exception if a problem occurs,      */,     protected int drainQueue(Queue queue) throws Exception,     {,         Connection connection = getConnection();, ,         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);, ,         MessageConsumer consumer = session.createConsumer(queue);, ,         connection.start();, ,         int count = 0;,         while (consumer.receive(1000) != null),         {,             count++;,         }, ,         connection.close();, ,         return count;,     }, ,     /**,      * Send messages to the given destination.,      *,      * If session is transacted then messages will be committed before returning,      *,      * @param session the session to use for sending,      * @param destination where to send them to,      * @param count no. of messages to send,      *,      * @return the sent messages,      *,      * @throws Exception,      */,     public List<Message> sendMessage(Session session, Destination destination,,                                      int count) throws Exception,     {,         return sendMessage(session, destination, count, 0, 0);,     }, ,     /**,      * Send messages to the given destination.,      *,      * If session is transacted then messages will be committed before returning,      *,      * @param session the session to use for sending,      * @param destination where to send them to,      * @param count no. of messages to send,      *,      * @param batchSize the batchSize in which to commit, 0 means no batching,,      * but a single commit at the end,      * @return the sent message,      *,      * @throws Exception,      */,     public List<Message> sendMessage(Session session, Destination destination,,                                      int count, int batchSize) throws Exception,     {,         return sendMessage(session, destination, count, 0, batchSize);,     }, ,     /**,      * Send messages to the given destination.,      *,      * If session is transacted then messages will be committed before returning,      *,      * @param session the session to use for sending,      * @param destination where to send them to,      * @param count no. of messages to send,      *,      * @param offset offset allows the INDEX value of the message to be adjusted.,      * @param batchSize the batchSize in which to commit, 0 means no batching,,      * but a single commit at the end,      * @return the sent message,      *,      * @throws Exception,      */,     public List<Message> sendMessage(Session session, Destination destination,,                                      int count, int offset, int batchSize) throws Exception,     {,         List<Message> messages = new ArrayList<Message>(count);, ,         MessageProducer producer = session.createProducer(destination);, ,         int i = offset;,         for (; i < (count + offset); i++),         {,             Message next = createNextMessage(session, i);, ,             producer.send(next);, ,             if (session.getTransacted() && batchSize > 0),             {,                 if (i % batchSize == 0),                 {,                     session.commit();,                 }, ,             }, ,             messages.add(next);,         }, ,         // Ensure we commit the last messages,         // Commit the session if we are transacted and,         // we have no batchSize or,         // our count is not divible by batchSize.,         if (session.getTransacted() &&,             ( batchSize == 0 || (i-1) % batchSize != 0)),         {,             session.commit();,         }, ,         return messages;,     }, ,     public Message createNextMessage(Session session, int msgCount) throws JMSException,     {,         Message message = createMessage(session, _messageSize);,         message.setIntProperty(INDEX, msgCount);, ,         return message;, ,     }, ,     public Message createMessage(Session session, int messageSize) throws JMSException,     {,         String payload = new String(new byte[messageSize]);, ,         Message message;, ,         switch (_messageType),         {,             case BYTES:,                 message = session.createBytesMessage();,                 ((BytesMessage) message).writeUTF(payload);,                 break;,             case MAP:,                 message = session.createMapMessage();,                 ((MapMessage) message).setString(CONTENT, payload);,                 break;,             default: // To keep the compiler happy,             case TEXT:,                 message = session.createTextMessage();,                 ((TextMessage) message).setText(payload);,                 break;,             case OBJECT:,                 message = session.createObjectMessage();,                 ((ObjectMessage) message).setObject(payload);,                 break;,             case STREAM:,                 message = session.createStreamMessage();,                 ((StreamMessage) message).writeString(payload);,                 break;,         }, ,         return message;,     }, ,     protected int getMessageSize(),     {,         return _messageSize;,     }, ,     protected void setMessageSize(int byteSize),     {,         _messageSize = byteSize;,     }, ,     public BrokerDetails getBroker(),     {,         try,         {,             if (getConnectionFactory().getConnectionURL().getBrokerCount() > 0),             {,                 return getConnectionFactory().getConnectionURL().getBrokerDetails(0);,             },             else,             {,                 fail("No broker details are available.");,             },         },         catch (NamingException e),         {,             fail(e.getMessage());,         }, ,         //keep compiler happy,         return null;,     }, ,     protected int getFailingPort(),     {,         return FAILING_PORT;,     }, ,     public int getHttpManagementPort(int mainPort),     {,         return mainPort + (DEFAULT_HTTP_MANAGEMENT_PORT - DEFAULT_PORT);,     }, ,     public void assertProducingConsuming(final Connection connection) throws Exception,     {,         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);,         Destination destination = session.createQueue(getTestQueueName());,         MessageConsumer consumer = session.createConsumer(destination);,         sendMessage(session, destination, 1);,         session.commit();,         connection.start();,         Message m1 = consumer.receive(RECEIVE_TIMEOUT);,         assertNotNull("Message 1 is not received", m1);,         assertEquals("Unexpected first message received", 0, m1.getIntProperty(INDEX));,         session.commit();,         session.close();,     }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/test/utils/QpidBrokerTestCase.java,,171-171,[    protected static String _brokerLogPrefix = System.getProperty(BROKER_LOG_PREFIX,"BROKER: ");],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/qpid/test/utils/QpidBrokerTestCase.java,,172-172,[    protected static boolean _interleaveBrokerLog = Boolean.valueOf(System.getProperty(BROKER_LOG_INTERLEAVE,"true"));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/test/utils/QpidBrokerTestCase.java,createBrokerWork,735-735,[            dir.mkdirs();],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/qpid/test/utils/QpidBrokerTestCase.java,startBroker,572-572,[                        qpidOpts += " -D" + key + "=" + _propertiesSetForBroker.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/test/utils/QpidBrokerTestCase.java,startBroker,572-572,[                        qpidOpts += " -D" + key + "=" + _propertiesSetForBroker.get(key);],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/test/utils/QpidClientConnection.java,,42-287,[    private static final Logger _logger = LoggerFactory.getLogger(QpidClientConnection.class);, ,     private boolean transacted = true;,     private int ackMode = Session.CLIENT_ACKNOWLEDGE;,     private Connection connection;, ,     private String virtualHost;,     private String brokerlist;,     private int prefetch;,     protected Session session;,     protected boolean connected;, ,     public QpidClientConnection(String broker),     {,         super();,         setVirtualHost("/test");,         setBrokerList(broker);,         setPrefetch(5000);,     }, , ,     public Connection getConnection(),     {,         return connection;,     }, ,     public void connect() throws JMSException,     {,         if (!connected),         {,             /*,              * amqp://[user:pass@][clientid]/virtualhost?,              * brokerlist='[transport://]host[:port][?option='value'[&option='value']];',              * [&failover='method[?option='value'[&option='value']]'],              * [&option='value']",              */,             String brokerUrl = "amqp://guest:guest@" + virtualHost + "?brokerlist='" + brokerlist + "'";,             try,             {,                 _logger.info("connecting to Qpid :" + brokerUrl);,                 connection = getConnection("guest", "guest") ;,                 // register exception listener,                 connection.setExceptionListener(this);, ,                 session = ((AMQConnection) connection).createSession(transacted, ackMode, prefetch);, ,                 _logger.info("starting connection");,                 connection.start();, ,                 connected = true;,             },             catch (Exception e),             {,                 throw new JMSAMQException("URL syntax error in [" + brokerUrl + "]: " + e.getMessage(), e);,             },         },     }, ,     public void disconnect() throws Exception,     {,         if (connected),         {,             session.commit();,             session.close();,             connection.close();,             connected = false;,             _logger.info("disconnected");,         },     }, ,     public void disconnectWithoutCommit() throws JMSException,     {,         if (connected),         {,             session.close();,             connection.close();,             connected = false;,             _logger.info("disconnected without commit");,         },     }, ,     public String getBrokerList(),     {,         return brokerlist;,     }, ,     public void setBrokerList(String brokerlist),     {,         this.brokerlist = brokerlist;,     }, ,     public String getVirtualHost(),     {,         return virtualHost;,     }, ,     public void setVirtualHost(String virtualHost),     {,         this.virtualHost = virtualHost;,     }, ,     public void setPrefetch(int prefetch),     {,         this.prefetch = prefetch;,     }, ,     /** override as necessary */,     public void onException(JMSException exception),     {,         _logger.info("ExceptionListener event: error " + exception.getErrorCode() + ", message: " + exception.getMessage());,     }, ,     public boolean isConnected(),     {,         return connected;,     }, ,     public Session getSession(),     {,         return session;,     }, ,     /**,      * Put a String as a text messages, repeat n times. A null payload will result in a null message.,      *,      * @param queueName The queue name to put to,      * @param payload   the content of the payload,      * @param copies    the number of messages to put,      *,      * @throws javax.jms.JMSException any exception that occurs,      */,     public void put(String queueName, String payload, int copies) throws JMSException,     {,         if (!connected),         {,             connect();,         }, ,         _logger.info("putting to queue " + queueName);,         Queue queue = session.createQueue(queueName);, ,         final MessageProducer sender = session.createProducer(queue);, ,         for (int i = 0; i < copies; i++),         {,             Message m = session.createTextMessage(payload + i);,             m.setIntProperty("index", i + 1);,             sender.send(m);,         }, ,         session.commit();,         sender.close();,         _logger.info("put " + copies + " copies");,     }, ,     /**,      * GET the top message on a queue. Consumes the message. Accepts timeout value.,      *,      * @param queueName   The quename to get from,      * @param readTimeout The timeout to use,      *,      * @return the content of the text message if any,      *,      * @throws javax.jms.JMSException any exception that occured,      */,     public Message getNextMessage(String queueName, long readTimeout) throws JMSException,     {,         if (!connected),         {,             connect();,         }, ,         Queue queue = session.createQueue(queueName);, ,         final MessageConsumer consumer = session.createConsumer(queue);, ,         Message message = consumer.receive(readTimeout);,         session.commit();,         consumer.close();, ,         Message result;, ,         // all messages we consume should be TextMessages,         if (message instanceof TextMessage),         {,             result = ((TextMessage) message);,         },         else if (null == message),         {,             result = null;,         },         else,         {,             _logger.info("warning: received non-text message");,             result = message;,         }, ,         return result;,     }, ,     /**,      * GET the top message on a queue. Consumes the message.,      *,      * @param queueName The Queuename to get from,      *,      * @return The string content of the text message, if any received,      *,      * @throws javax.jms.JMSException any exception that occurs,      */,     public Message getNextMessage(String queueName) throws JMSException,     {,         return getNextMessage(queueName, 0);,     }, ,     /**,      * Completely clears a queue. For readTimeout behaviour see Javadocs for javax.jms.MessageConsumer.,      *,      * @param queueName   The Queue name to consume from,      * @param readTimeout The timeout for each consume,      *,      * @throws javax.jms.JMSException Any exception that occurs during the consume,      * @throws InterruptedException   If the consume thread was interrupted during a consume.,      */,     public void consume(String queueName, int readTimeout) throws JMSException, InterruptedException,     {,         if (!connected),         {,             connect();,         }, ,         _logger.info("consuming queue " + queueName);,         Queue queue = session.createQueue(queueName);, ,         final MessageConsumer consumer = session.createConsumer(queue);,         int messagesReceived = 0;, ,         _logger.info("consuming...");,         while ((consumer.receive(readTimeout)) != null),         {,             messagesReceived++;,         }, ,         session.commit();,         consumer.close();,         _logger.info("consumed: " + messagesReceived);,     }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/test/utils/QpidClientConnection.java,connect,93-93,[            catch (Exception e)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/QpidTestCase.java,<clinit>,93-93,[                    try(FileReader fileReader = new FileReader(file))],,
CORRECTNESS,IJU_NO_TESTS,org/apache/qpid/test/utils/QpidTestCase.java,,45-287,[    public static final String QPID_HOME = System.getProperty("QPID_HOME");,     public static final String TEST_RESOURCES_DIR = QPID_HOME + "/../test-profiles/test_resources/";,     public static final String TEST_PROFILES_DIR = QPID_HOME + "/../test-profiles/";,     public static final String TMP_FOLDER = System.getProperty("java.io.tmpdir");,     public static final String LOG4J_CONFIG_FILE_PATH = System.getProperty("log4j.configuration.file");, ,     private static final Logger _logger = Logger.getLogger(QpidTestCase.class);, ,     private final Map<Logger, Level> _loggerLevelSetForTest = new HashMap<Logger, Level>();,     private final Map<String, String> _propertiesSetForTest = new HashMap<String, String>();, ,     private String _testName;, ,     /**,      * Some tests are excluded when the property test.excludes is set to true.,      * An exclusion list is either a file (prop test.excludesfile) which contains one test name,      * to be excluded per line or a String (prop test.excludeslist) where tests to be excluded are,      * separated by " ". Excluded tests are specified following the format:,      * className#testName where className is the class of the test to be,      * excluded and testName is the name of the test to be excluded.,      * className#* excludes all the tests of the specified class.,      */,     static,     {,         if (Boolean.getBoolean("test.exclude")),         {,             _logger.info("Some tests should be excluded, building the exclude list");,             String exclusionListURIs = System.getProperty(TEST_EXCLUDEFILES, "");,             String exclusionListString = System.getProperty(TEST_EXCLUDELIST, "");,             String testExcludes = System.getProperty(TEST_EXCLUDES);, ,             //For the maven build, process the test.excludes property,             if(testExcludes != null && "".equals(exclusionListURIs)),             {,                 for (String exclude : testExcludes.split("\\s+")),                 {,                     exclusionListURIs += TEST_PROFILES_DIR + "/" + exclude + ";";,                 },             }, ,             List<String> exclusionList = new ArrayList<String>();, ,             for (String uri : exclusionListURIs.split(";\\s*")),             {,                 File file = new File(uri);,                 if (file.exists()),                 {,                     _logger.info("Using exclude file: " + uri);,                     try(FileReader fileReader = new FileReader(file)),                     {,                         try(BufferedReader in = new BufferedReader(fileReader)),                         {,                             String excludedTest = in.readLine();,                             do,                             {,                                 exclusionList.add(excludedTest);,                                 excludedTest = in.readLine();,                             },                             while (excludedTest != null);,                         },                     },                     catch (IOException e),                     {,                         _logger.warn("Exception when reading exclusion list", e);,                     },                 },                 else,                 {,                     _logger.info("Specified exclude file does not exist: " + uri);,                 },             }, ,             if (!exclusionListString.equals("")),             {,                 _logger.info("Using excludeslist: " + exclusionListString);,                 for (String test : exclusionListString.split("\\s+")),                 {,                     exclusionList.add(test);,                 },             }, ,             _exclusionList = exclusionList;,         },     }, ,     private static List<String> _exclusionList;, ,     public QpidTestCase(),     {,         super();,     }, ,     public void run(TestResult testResult),     {,         if (_exclusionList != null && (_exclusionList.contains(getClass().getPackage().getName() + ".*") ||,                                        _exclusionList.contains(getClass().getName() + "#*") ||,                                        _exclusionList.contains(getClass().getName() + "#" + getName()))),         {,             _logger.info("Test: " + getName() + " is excluded");,             testResult.endTest(this);,         },         else,         {,             super.run(testResult);,         },     }, ,     public String getTestProfileVirtualHostNodeType(),     {,         final String storeType = System.getProperty(VIRTUAL_HOST_NODE_TYPE);, ,         if (_logger.isDebugEnabled()),         {,             _logger.debug(VIRTUAL_HOST_NODE_TYPE + "=" + storeType);,         }, ,         return storeType != null ? storeType : "TestMemory";,     }, ,     public String getTestProfileVirtualHostNodeBlueprint(),     {,         return System.getProperty(VIRTUAL_HOST_NODE_CONTEXT_BLUEPRINT);,     }, , ,     /**,      * Gets the next available port starting at a port.,      *,      * @param fromPort the port to scan for availability,      * @throws NoSuchElementException if there are no ports available,      */,     public int getNextAvailable(int fromPort),     {,         return new PortHelper().getNextAvailable(fromPort);,     }, ,     public int findFreePort(),     {,         return new PortHelper().getNextAvailable();,     }, ,     /**,      * Set a System property for duration of this test only. The tearDown will,      * guarantee to reset the property to its previous value after the test,      * completes.,      *,      * @param property The property to set,      * @param value the value to set it to, if null, the property will be cleared,      */,     protected void setTestSystemProperty(final String property, final String value),     {,         if (!_propertiesSetForTest.containsKey(property)),         {,             // Record the current value so we can revert it later.,             _propertiesSetForTest.put(property, System.getProperty(property));,         }, ,         if (value == null),         {,             System.clearProperty(property);,         },         else,         {,             System.setProperty(property, value);,         }, ,         _logger.info("Set system property \"" + property + "\" to: \"" + value + "\"");,     }, ,     /**,      * Restore the System property values that were set by this test run.,      */,     protected void revertTestSystemProperties(),     {,         if(!_propertiesSetForTest.isEmpty()),         {,             _logger.debug("reverting " + _propertiesSetForTest.size() + " test properties");,             for (String key : _propertiesSetForTest.keySet()),             {,                 String value = _propertiesSetForTest.get(key);,                 if (value != null),                 {,                     System.setProperty(key, value);,                 },                 else,                 {,                     System.clearProperty(key);,                 },             }, ,             _propertiesSetForTest.clear();,         },     }, ,     /**,      * Adjust the VMs Log4j Settings just for this test run,      *,      * @param logger the logger to change,      * @param level the level to set,      */,     protected void setLoggerLevel(Logger logger, Level level),     {,         assertNotNull("Cannot set level of null logger", logger);,         assertNotNull("Cannot set Logger("+logger.getName()+") to null level.",level);, ,         if (!_loggerLevelSetForTest.containsKey(logger)),         {,             // Record the current value so we can revert it later.,             _loggerLevelSetForTest.put(logger, logger.getLevel());,         }, ,         logger.setLevel(level);,     }, ,     /**,      * Restore the logging levels defined by this test.,      */,     protected void revertLoggingLevels(),     {,         for (Logger logger : _loggerLevelSetForTest.keySet()),         {,             logger.setLevel(_loggerLevelSetForTest.get(logger));,         }, ,         _loggerLevelSetForTest.clear();,     }, ,     protected void tearDown() throws java.lang.Exception,     {,         _logger.info("========== tearDown " + _testName + " ==========");,         revertTestSystemProperties();,         revertLoggingLevels();,     }, ,     protected void setUp() throws Exception,     {,         _testName = getClass().getSimpleName() + "." + getName();,         _logger.info("========== start " + _testName + " ==========");,     }, ,     protected String getTestName(),     {,         return _testName;],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/qpid/test/utils/QpidTestCase.java,<clinit>,81-81,[                    exclusionListURIs += TEST_PROFILES_DIR + "/" + exclude + ";";],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/test/utils/QpidTestCase.java,revertLoggingLevels,266-266,[            logger.setLevel(_loggerLevelSetForTest.get(logger));],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/test/utils/QpidTestCase.java,revertTestSystemProperties,224-224,[                String value = _propertiesSetForTest.get(key);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/qpid/test/utils/ReflectionUtils.java,callMethodOverridingIllegalAccess,116-116,[            m.setAccessible(true);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/qpid/test/utils/ReflectionUtils.java,getDeclaredField,238-238,[                field.setAccessible(true);],,
I18N,DM_CONVERT_CASE,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,doWindowsKill,120-120,[                                .toLowerCase()],,doWindowsKill,121-121,[                                .contains(_brokerCommand.toLowerCase()))],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,consumeAllOutput,153-153,[        try(InputStreamReader inputStreamReader = new InputStreamReader(p.getInputStream()))],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,doWindowsKill,88-88,[            try(BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream())))],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,dumpThreads,281-281,[        return new String(baos.toByteArray());],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,doWindowsKill,92-92,[                int processIdOffset = headers.indexOf(" ProcessId") + 1;],,
STYLE,RV_DONT_JUST_NULL_CHECK_READLINE,org/apache/qpid/test/utils/SpawnedBrokerHolder.java,consumeAllOutput,157-157,[                while (reader.readLine() != null)],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/TestBrokerConfiguration.java,<init>,125-125,[                reader = new FileReader(initialStoreLocation);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/test/utils/TestBrokerConfiguration.java,<init>,120-120,[                    reader = new InputStreamReader(urlStream);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/test/utils/TestBrokerConfiguration.java,removeObjectConfiguration,261-261,[        return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/utils/TestBrokerConfiguration.java,,131-131,[            _store = new AbstractMemoryStore(Broker.class){};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/test/utils/TestBrokerConfiguration.java,,226-244,[        {,             @Override,             public void begin(),             {, ,             }, ,             @Override,             public boolean handle(final ConfiguredObjectRecord record),             {,                 initialRecords.add(record);,                 return true;,             }, ,             @Override,             public void end(),             {, ,             }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/test/utils/TestFileUtils.java,copy,213-213,[                dst.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/test/utils/TestFileUtils.java,createTestDirectory,60-60,[        testDir.mkdirs();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/testkit/Client.java,,48-48,[    private NumberFormat nf = new DecimalFormat("##.00");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/qpid/testkit/Receiver.java,,76-76,[	private boolean jmsDurableSub = Boolean.getBoolean("jms_durable_sub");],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/testkit/Sender.java,,85-85,[    protected NumberFormat nf = new DecimalFormat("##.00");],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/testkit/TestLauncher.java,serializeStackTrace,324-324,[    	return bOut.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/testkit/TestLauncher.java,serializeStackTrace,321-321,[    	PrintStream printStream = new PrintStream(bOut);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/testkit/TestLauncher.java,,151-151,[            statusSender = controlSession.createProducer(controlDest);],,,310-310,[			statusSender.send(errorMsg);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/testkit/TestLauncher.java,setUpControlChannel,154-154,[        catch (Exception e)],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/testkit/TestLauncher.java,start,215-215,[        catch (Exception e)],,
STYLE,RV_CHECK_FOR_POSITIVE_INDEXOF,org/apache/qpid/testkit/TestLauncher.java,modifySubject,338-338,[        if (addr.indexOf("/") > 0)],,modifySubject,344-344,[        else if (addr.indexOf(";") > 0)],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/testkit/TestLauncher.java,,85-85,[    protected boolean durable = false;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/testkit/TestLauncher.java,,93-93,[    protected NumberFormat nf = new DecimalFormat("##.00");],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/qpid/testkit/TestLauncher.java,,98-98,[       testName = System.getProperty("test_name","UNKNOWN");],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/testkit/TestLauncher.java,,225-238,[        {,             public void run(),             {,                try ,                {,             	   Receiver rcv = new Receiver(con,addr);, 				   rcv.setErrorHandler(h);, 				   rcv.run();, 				}, 	            catch (Exception e) , 	            {, 					h.handleError("Error Starting Receiver", e);, 				},             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/testkit/TestLauncher.java,,258-271,[        {,             public void run(),             {,                try ,                {,             	   Sender sender = new Sender(con, addr);,             	   sender.setErrorHandler(h);,             	   sender.run();, 				}, 	            catch (Exception e) , 	            {, 					h.handleError("Error Starting Sender", e);, 				},             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/thread/ThreadFactoryTest.java,,96-100,[        Runnable r = new Runnable(){, ,             public void run(){, ,             }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/tools/JNDICheck.java,printEntries,154-154,[            String name = type.substring(0, 1).toUpperCase() + type.substring(1, type.length() - 1);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/tools/MercuryBase.java,<init>,93-93,[        catch (Exception e)],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/tools/MercuryBase.java,,114-114,[        sendToController = controllerSession.createProducer(controllerQueue);],,,150-150,[        sendToController.send(m);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/tools/MercuryProducerController.java,,156-160,[            {,                 public void run(),                 {,                     controller.run();,                 }],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/tools/MercuryTestController.java,setUp,133-133,[            writer = new FileWriter("stats-csv.log");],,
STYLE,ICAST_IDIV_CAST_TO_DOUBLE,org/apache/qpid/tools/MercuryTestController.java,calcStats,237-237,[        totalSystemThroughput = (totalMsgCount*Clock.convertToSecs()/totalTestTime);],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/qpid/tools/MercuryTestController.java,run,383-383,[                long timeLimit = duration * 60 * 1000;  // duration is in mins.],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,calcStats,235-235,[        report.log("Total test time     : " + totalTestTime + " in " + Clock.getPrecision());],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,onMessage,309-309,[            report.log("\n---------Controller Received Code : " + code);],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,printResults,242-242,[        report.log(new StringBuilder("Total Msgs Received : ").append(totalMsgCount).toString());],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,sendMessageToNodes,284-284,[        report.log("\nController: Sending code " + code);],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,setUp,136-136,[        report.log("\nController: " + producerCount + " producers are expected");],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,startTest,157-157,[        report.log("\nController Starting test......");],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,tearDown,413-413,[        report.log("Controller: Completed the test......\n");],,
CORRECTNESS,NP_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,warmup,146-146,[        report.log("Controller initiating warm up sequence......");],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/tools/MercuryTestController.java,calcStats,208-208,[        catch(Exception e)],,calcStats,225-225,[        catch(Exception e)],,
CORRECTNESS,UWF_UNWRITTEN_FIELD,org/apache/qpid/tools/MercuryTestController.java,,136-136,[        report.log("\nController: " + producerCount + " producers are expected");],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/tools/MessageFactory.java,createBytesMessage,35-35,[        msg.writeBytes(createMessagePayload(size).getBytes());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/tools/QpidBench.java,main,433-469,[        switch (opts.mode),         {,         case CONSUME:,         case BOTH:,             Runnable r = new Runnable(),             {,                 public void run(),                 {,                     try,                     {,                         if (opts.jms_consume),                         {,                             jms_consumer(opts);,                         },                         else,                         {,                             native_consumer(opts);,                         },                     },                     catch (Exception e),                     {,                         throw new RuntimeException(e);,                     },                     System.out.println("Consumer Completed");,                 },             };,            ,             Thread t;,             try,             {,                 t = Threading.getThreadFactory().createThread(r);                      ,             },             catch(Exception e),             {,                 throw new Error("Error creating consumer thread",e);,             },             t.start();],,main,473-508,[        switch (opts.mode),         {,         case PUBLISH:,         case BOTH:,             Runnable r = new Runnable(),             {,                 public void run(),                 {,                     try,                     {,                         if (opts.jms_publish),                         {,                             jms_publisher(opts);,                         },                         else,                         {,                             native_publisher(opts);,                         },                     },                     catch (Exception e),                     {,                         throw new RuntimeException(e);,                     },                     System.out.println("Producer Completed");,                 },             };,             Thread t;,             try,             {,                 t = Threading.getThreadFactory().createThread(r);                      ,             },             catch(Exception e),             {,                 throw new Error("Error creating publisher thread",e);,             },             t.start();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/tools/QpidBench.java,jms_consumer,682-682,[            done.wait();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/qpid/tools/QpidBench.java,native_consumer,894-894,[            done.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/tools/QpidBench.java,jms_consumer,682-682,[            done.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/tools/QpidBench.java,native_consumer,894-894,[            done.wait();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/tools/QpidBench.java,onMessage,673-673,[                        done.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/tools/QpidBench.java,message,726-726,[                    echos.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/tools/QpidBench.java,message,872-872,[                        done.notify();],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/qpid/tools/QpidBench.java,usage,86-86,[            usage.append(String.format("\n  %-15s%-14s %s", name, defval, description));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/tools/QpidSend.java,createPayload,159-159,[			return MessageFactory.createMessagePayload(size).getBytes();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/qpid/transport/Connection.java,closed,594-594,[            catch(Exception e)],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/transport/Connection.java,close,657-657,[                    while (w.hasTime() && sender != null && error == null)],,close,667-667,[                    if (sender != null)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/Connection.java,,844-850,[                                    {,                                         @Override,                                         public void setMaxFrameSize(final int frameSize),                                         {,                                             currentObserver.setMaxFrameSize(frameSize);,                                             frameSizeObserver.setMaxFrameSize(frameSize);,                                         }],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/transport/ConnectionClose.java,,38-192,[        return TYPE;,     }, ,     public final int getSizeWidth() {,         return 0;,     }, ,     public final int getPackWidth() {,         return 2;,     }, ,     public final boolean hasPayload() {,         return false;,     }, ,     public final byte getEncodedTrack() {,         return Frame.L1;,     }, ,     public final boolean isConnectionControl(),     {,         return true;,     }, ,     private short packing_flags = 0;,     private ConnectionCloseCode replyCode;,     private String replyText;, , ,     public ConnectionClose() {}, , ,     public ConnectionClose(ConnectionCloseCode replyCode, String replyText, Option ... _options) {,         if(replyCode != null) {,             setReplyCode(replyCode);,         },         if(replyText != null) {,             setReplyText(replyText);,         }, ,         for (int i=0; i < _options.length; i++) {,             switch (_options[i]) {,             case SYNC: this.setSync(true); break;,             case BATCH: this.setBatch(true); break;,             case UNRELIABLE: this.setUnreliable(true); break;,             case NONE: break;,             default: throw new IllegalArgumentException("invalid option: " + _options[i]);,             },         }, ,     }, ,     public <C> void dispatch(C context, MethodDelegate<C> delegate) {,         delegate.connectionClose(context, this);,     }, , ,     public final boolean hasReplyCode() {,         return (packing_flags & 256) != 0;,     }, ,     public final ConnectionClose clearReplyCode() {,         packing_flags &= ~256;,         this.replyCode = null;,         setDirty(true);,         return this;,     }, ,     public final ConnectionCloseCode getReplyCode() {,         return replyCode;,     }, ,     public final ConnectionClose setReplyCode(ConnectionCloseCode value) {,         this.replyCode = value;,         packing_flags |= 256;,         setDirty(true);,         return this;,     }, ,     public final ConnectionClose replyCode(ConnectionCloseCode value) {,         return setReplyCode(value);,     }, ,     public final boolean hasReplyText() {,         return (packing_flags & 512) != 0;,     }, ,     public final ConnectionClose clearReplyText() {,         packing_flags &= ~512;,         this.replyText = null;,         setDirty(true);,         return this;,     }, ,     public final String getReplyText() {,         return replyText;,     }, ,     public final ConnectionClose setReplyText(String value) {,         this.replyText = value;,         packing_flags |= 512;,         setDirty(true);,         return this;,     }, ,     public final ConnectionClose replyText(String value) {,         return setReplyText(value);,     }, , , , ,     public void write(Encoder enc),     {,         enc.writeUint16(packing_flags);,         if ((packing_flags & 256) != 0),         {,             enc.writeUint16(this.replyCode.getValue());,         },         if ((packing_flags & 512) != 0),         {,             enc.writeStr8(this.replyText);,         }, ,     }, ,     public void read(Decoder dec),     {,         packing_flags = (short) dec.readUint16();,         if ((packing_flags & 256) != 0),         {,             this.replyCode = ConnectionCloseCode.get(dec.readUint16());,         },         if ((packing_flags & 512) != 0),         {,             this.replyText = dec.readStr8();,         }, ,     }, ,     public Map<String,Object> getFields(),     {,         Map<String,Object> result = new LinkedHashMap<String,Object>();, ,         if ((packing_flags & 256) != 0),         {,             result.put("replyCode", getReplyCode());,         },         if ((packing_flags & 512) != 0),         {,             result.put("replyText", getReplyText());,         }, , ,         return result;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/ConnectionTest.java,,94-106,[            {,                 public void run(),                 {,                     try,                     {,                         sleep(3000);,                     },                     catch (InterruptedException e),                     {,                         throw new RuntimeException(e);,                     },                     ssn.getConnection().close();,                 }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/ConnectionTest.java,,161-173,[        {,             public void opened(Connection conn) {},             public void exception(Connection conn, ConnectionException exc),             {,                 exc.printStackTrace();,             },             public void closed(Connection conn),             {,                 if (closed != null),                 {,                     closed.countDown();,                 },             }],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/qpid/transport/ExecutionException.java,,38-394,[        return TYPE;,     }, ,     public final int getSizeWidth() {,         return 0;,     }, ,     public final int getPackWidth() {,         return 2;,     }, ,     public final boolean hasPayload() {,         return false;,     }, ,     public final byte getEncodedTrack() {,         return Frame.L4;,     }, ,     public final boolean isConnectionControl(),     {,         return false;,     }, ,     private short packing_flags = 0;,     private ExecutionErrorCode errorCode;,     private int commandId;,     private short classCode;,     private short commandCode;,     private short fieldIndex;,     private String description;,     private Map<String,Object> errorInfo;, , ,     public ExecutionException() {}, , ,     public ExecutionException(ExecutionErrorCode errorCode, int commandId, short classCode, short commandCode, short fieldIndex, String description, Map<String,Object> errorInfo, Option ... _options) {,         if(errorCode != null) {,             setErrorCode(errorCode);,         },         setCommandId(commandId);,         setClassCode(classCode);,         setCommandCode(commandCode);,         setFieldIndex(fieldIndex);,         if(description != null) {,             setDescription(description);,         },         if(errorInfo != null) {,             setErrorInfo(errorInfo);,         }, ,         for (int i=0; i < _options.length; i++) {,             switch (_options[i]) {,             case SYNC: this.setSync(true); break;,             case BATCH: this.setBatch(true); break;,             case UNRELIABLE: this.setUnreliable(true); break;,             case NONE: break;,             default: throw new IllegalArgumentException("invalid option: " + _options[i]);,             },         }, ,     }, ,     public <C> void dispatch(C context, MethodDelegate<C> delegate) {,         delegate.executionException(context, this);,     }, , ,     public final boolean hasErrorCode() {,         return (packing_flags & 256) != 0;,     }, ,     public final ExecutionException clearErrorCode() {,         packing_flags &= ~256;,         this.errorCode = null;,         setDirty(true);,         return this;,     }, ,     public final ExecutionErrorCode getErrorCode() {,         return errorCode;,     }, ,     public final ExecutionException setErrorCode(ExecutionErrorCode value) {,         this.errorCode = value;,         packing_flags |= 256;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException errorCode(ExecutionErrorCode value) {,         return setErrorCode(value);,     }, ,     public final boolean hasCommandId() {,         return (packing_flags & 512) != 0;,     }, ,     public final ExecutionException clearCommandId() {,         packing_flags &= ~512;,         this.commandId = 0;,         setDirty(true);,         return this;,     }, ,     public final int getCommandId() {,         return commandId;,     }, ,     public final ExecutionException setCommandId(int value) {,         this.commandId = value;,         packing_flags |= 512;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException commandId(int value) {,         return setCommandId(value);,     }, ,     public final boolean hasClassCode() {,         return (packing_flags & 1024) != 0;,     }, ,     public final ExecutionException clearClassCode() {,         packing_flags &= ~1024;,         this.classCode = 0;,         setDirty(true);,         return this;,     }, ,     public final short getClassCode() {,         return classCode;,     }, ,     public final ExecutionException setClassCode(short value) {,         this.classCode = value;,         packing_flags |= 1024;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException classCode(short value) {,         return setClassCode(value);,     }, ,     public final boolean hasCommandCode() {,         return (packing_flags & 2048) != 0;,     }, ,     public final ExecutionException clearCommandCode() {,         packing_flags &= ~2048;,         this.commandCode = 0;,         setDirty(true);,         return this;,     }, ,     public final short getCommandCode() {,         return commandCode;,     }, ,     public final ExecutionException setCommandCode(short value) {,         this.commandCode = value;,         packing_flags |= 2048;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException commandCode(short value) {,         return setCommandCode(value);,     }, ,     public final boolean hasFieldIndex() {,         return (packing_flags & 4096) != 0;,     }, ,     public final ExecutionException clearFieldIndex() {,         packing_flags &= ~4096;,         this.fieldIndex = 0;,         setDirty(true);,         return this;,     }, ,     public final short getFieldIndex() {,         return fieldIndex;,     }, ,     public final ExecutionException setFieldIndex(short value) {,         this.fieldIndex = value;,         packing_flags |= 4096;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException fieldIndex(short value) {,         return setFieldIndex(value);,     }, ,     public final boolean hasDescription() {,         return (packing_flags & 8192) != 0;,     }, ,     public final ExecutionException clearDescription() {,         packing_flags &= ~8192;,         this.description = null;,         setDirty(true);,         return this;,     }, ,     public final String getDescription() {,         return description;,     }, ,     public final ExecutionException setDescription(String value) {,         this.description = value;,         packing_flags |= 8192;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException description(String value) {,         return setDescription(value);,     }, ,     public final boolean hasErrorInfo() {,         return (packing_flags & 16384) != 0;,     }, ,     public final ExecutionException clearErrorInfo() {,         packing_flags &= ~16384;,         this.errorInfo = null;,         setDirty(true);,         return this;,     }, ,     public final Map<String,Object> getErrorInfo() {,         return errorInfo;,     }, ,     public final ExecutionException setErrorInfo(Map<String,Object> value) {,         this.errorInfo = value;,         packing_flags |= 16384;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException errorInfo(Map<String,Object> value) {,         return setErrorInfo(value);,     }, , , , ,     public void write(Encoder enc),     {,         enc.writeUint16(packing_flags);,         if ((packing_flags & 256) != 0),         {,             enc.writeUint16(this.errorCode.getValue());,         },         if ((packing_flags & 512) != 0),         {,             enc.writeSequenceNo(this.commandId);,         },         if ((packing_flags & 1024) != 0),         {,             enc.writeUint8(this.classCode);,         },         if ((packing_flags & 2048) != 0),         {,             enc.writeUint8(this.commandCode);,         },         if ((packing_flags & 4096) != 0),         {,             enc.writeUint8(this.fieldIndex);,         },         if ((packing_flags & 8192) != 0),         {,             enc.writeStr16(this.description);,         },         if ((packing_flags & 16384) != 0),         {,             enc.writeMap(this.errorInfo);,         }, ,     }, ,     public void read(Decoder dec),     {,         packing_flags = (short) dec.readUint16();,         if ((packing_flags & 256) != 0),         {,             this.errorCode = ExecutionErrorCode.get(dec.readUint16());,         },         if ((packing_flags & 512) != 0),         {,             this.commandId = dec.readSequenceNo();,         },         if ((packing_flags & 1024) != 0),         {,             this.classCode = dec.readUint8();,         },         if ((packing_flags & 2048) != 0),         {,             this.commandCode = dec.readUint8();,         },         if ((packing_flags & 4096) != 0),         {,             this.fieldIndex = dec.readUint8();,         },         if ((packing_flags & 8192) != 0),         {,             this.description = dec.readStr16();,         },         if ((packing_flags & 16384) != 0),         {,             this.errorInfo = dec.readMap();,         }, ,     }, ,     public Map<String,Object> getFields(),     {,         Map<String,Object> result = new LinkedHashMap<String,Object>();, ,         if ((packing_flags & 256) != 0),         {,             result.put("errorCode", getErrorCode());,         },         if ((packing_flags & 512) != 0),         {,             result.put("commandId", getCommandId());,         },         if ((packing_flags & 1024) != 0),         {,             result.put("classCode", getClassCode());,         },         if ((packing_flags & 2048) != 0),         {,             result.put("commandCode", getCommandCode());,         },         if ((packing_flags & 4096) != 0),         {,             result.put("fieldIndex", getFieldIndex());,         },         if ((packing_flags & 8192) != 0),         {,             result.put("description", getDescription());,         },         if ((packing_flags & 16384) != 0),         {,             result.put("errorInfo", getErrorInfo());,         }, , ,         return result;],,
CORRECTNESS,IJU_SETUP_NO_SUPER,org/apache/qpid/transport/MaxFrameSizeTest.java,setUp,78-78,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/MaxFrameSizeTest.java,,114-124,[                                {, ,                                     @Override,                                     public void evaluate(final Socket socket, final List<AMQFrame> frames),                                     {,                                         if(!socket.isClosed()),                                         {,                                             AMQFrame lastFrame = frames.get(frames.size() - 1);,                                             assertTrue("Connection should not be possible with a frame size < " + Constant.MIN_MAX_FRAME_SIZE, lastFrame.getBodyFrame() instanceof ConnectionCloseBody);,                                         },                                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/MaxFrameSizeTest.java,,163-173,[                                {, ,                                     @Override,                                     public void evaluate(final Socket socket, final List<AMQFrame> frames),                                     {,                                         if(!socket.isClosed()),                                         {,                                             AMQFrame lastFrame = frames.get(frames.size() - 1);,                                             assertTrue("Connection should not be possible with a frame size larger than the broker requested", lastFrame.getBodyFrame() instanceof ConnectionCloseBody);,                                         },                                     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/MaxFrameSizeTest.java,,245-250,[        {,             @Override,             public AMQBody createBody(final MarkableDataInput in, final long bodySize),                     throws AMQFrameDecodingException, IOException,             {,                 return methodRegistry_0_91.convertToBody(in, bodySize);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/MaxFrameSizeTest.java,,278-299,[            {,                 @Override,                 public void handle(final Callback[] callbacks) throws IOException, UnsupportedCallbackException,                 {,                     for (int i = 0; i < callbacks.length; i++),                     {,                         Callback cb = callbacks[i];,                         if (cb instanceof NameCallback),                         {,                             ((NameCallback)cb).setName(GUEST_USERNAME);,                         },                         else if (cb instanceof PasswordCallback),                         {,                             ((PasswordCallback)cb).setPassword(GUEST_PASSWORD.toCharArray());,                         },                         else,                         {,                             throw new UnsupportedCallbackException(cb);,                         },                     }, ,                 }],,
BAD_PRACTICE,IT_NO_SUCH_ELEMENT,org/apache/qpid/transport/Range.java,next,295-297,[            Range range = atFirst ? Range.this : null;,             atFirst = false;,             return range;],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/qpid/transport/Session.java,closed,1102-1102,[                        result.notifyAll();],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/qpid/transport/Session.java,notifyFailoverRequired,1201-1201,[                    result.notifyAll();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/qpid/transport/ExecutionException.java,,38-394,[        return TYPE;,     }, ,     public final int getSizeWidth() {,         return 0;,     }, ,     public final int getPackWidth() {,         return 2;,     }, ,     public final boolean hasPayload() {,         return false;,     }, ,     public final byte getEncodedTrack() {,         return Frame.L4;,     }, ,     public final boolean isConnectionControl(),     {,         return false;,     }, ,     private short packing_flags = 0;,     private ExecutionErrorCode errorCode;,     private int commandId;,     private short classCode;,     private short commandCode;,     private short fieldIndex;,     private String description;,     private Map<String,Object> errorInfo;, , ,     public ExecutionException() {}, , ,     public ExecutionException(ExecutionErrorCode errorCode, int commandId, short classCode, short commandCode, short fieldIndex, String description, Map<String,Object> errorInfo, Option ... _options) {,         if(errorCode != null) {,             setErrorCode(errorCode);,         },         setCommandId(commandId);,         setClassCode(classCode);,         setCommandCode(commandCode);,         setFieldIndex(fieldIndex);,         if(description != null) {,             setDescription(description);,         },         if(errorInfo != null) {,             setErrorInfo(errorInfo);,         }, ,         for (int i=0; i < _options.length; i++) {,             switch (_options[i]) {,             case SYNC: this.setSync(true); break;,             case BATCH: this.setBatch(true); break;,             case UNRELIABLE: this.setUnreliable(true); break;,             case NONE: break;,             default: throw new IllegalArgumentException("invalid option: " + _options[i]);,             },         }, ,     }, ,     public <C> void dispatch(C context, MethodDelegate<C> delegate) {,         delegate.executionException(context, this);,     }, , ,     public final boolean hasErrorCode() {,         return (packing_flags & 256) != 0;,     }, ,     public final ExecutionException clearErrorCode() {,         packing_flags &= ~256;,         this.errorCode = null;,         setDirty(true);,         return this;,     }, ,     public final ExecutionErrorCode getErrorCode() {,         return errorCode;,     }, ,     public final ExecutionException setErrorCode(ExecutionErrorCode value) {,         this.errorCode = value;,         packing_flags |= 256;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException errorCode(ExecutionErrorCode value) {,         return setErrorCode(value);,     }, ,     public final boolean hasCommandId() {,         return (packing_flags & 512) != 0;,     }, ,     public final ExecutionException clearCommandId() {,         packing_flags &= ~512;,         this.commandId = 0;,         setDirty(true);,         return this;,     }, ,     public final int getCommandId() {,         return commandId;,     }, ,     public final ExecutionException setCommandId(int value) {,         this.commandId = value;,         packing_flags |= 512;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException commandId(int value) {,         return setCommandId(value);,     }, ,     public final boolean hasClassCode() {,         return (packing_flags & 1024) != 0;,     }, ,     public final ExecutionException clearClassCode() {,         packing_flags &= ~1024;,         this.classCode = 0;,         setDirty(true);,         return this;,     }, ,     public final short getClassCode() {,         return classCode;,     }, ,     public final ExecutionException setClassCode(short value) {,         this.classCode = value;,         packing_flags |= 1024;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException classCode(short value) {,         return setClassCode(value);,     }, ,     public final boolean hasCommandCode() {,         return (packing_flags & 2048) != 0;,     }, ,     public final ExecutionException clearCommandCode() {,         packing_flags &= ~2048;,         this.commandCode = 0;,         setDirty(true);,         return this;,     }, ,     public final short getCommandCode() {,         return commandCode;,     }, ,     public final ExecutionException setCommandCode(short value) {,         this.commandCode = value;,         packing_flags |= 2048;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException commandCode(short value) {,         return setCommandCode(value);,     }, ,     public final boolean hasFieldIndex() {,         return (packing_flags & 4096) != 0;,     }, ,     public final ExecutionException clearFieldIndex() {,         packing_flags &= ~4096;,         this.fieldIndex = 0;,         setDirty(true);,         return this;,     }, ,     public final short getFieldIndex() {,         return fieldIndex;,     }, ,     public final ExecutionException setFieldIndex(short value) {,         this.fieldIndex = value;,         packing_flags |= 4096;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException fieldIndex(short value) {,         return setFieldIndex(value);,     }, ,     public final boolean hasDescription() {,         return (packing_flags & 8192) != 0;,     }, ,     public final ExecutionException clearDescription() {,         packing_flags &= ~8192;,         this.description = null;,         setDirty(true);,         return this;,     }, ,     public final String getDescription() {,         return description;,     }, ,     public final ExecutionException setDescription(String value) {,         this.description = value;,         packing_flags |= 8192;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException description(String value) {,         return setDescription(value);,     }, ,     public final boolean hasErrorInfo() {,         return (packing_flags & 16384) != 0;,     }, ,     public final ExecutionException clearErrorInfo() {,         packing_flags &= ~16384;,         this.errorInfo = null;,         setDirty(true);,         return this;,     }, ,     public final Map<String,Object> getErrorInfo() {,         return errorInfo;,     }, ,     public final ExecutionException setErrorInfo(Map<String,Object> value) {,         this.errorInfo = value;,         packing_flags |= 16384;,         setDirty(true);,         return this;,     }, ,     public final ExecutionException errorInfo(Map<String,Object> value) {,         return setErrorInfo(value);,     }, , , , ,     public void write(Encoder enc),     {,         enc.writeUint16(packing_flags);,         if ((packing_flags & 256) != 0),         {,             enc.writeUint16(this.errorCode.getValue());,         },         if ((packing_flags & 512) != 0),         {,             enc.writeSequenceNo(this.commandId);,         },         if ((packing_flags & 1024) != 0),         {,             enc.writeUint8(this.classCode);,         },         if ((packing_flags & 2048) != 0),         {,             enc.writeUint8(this.commandCode);,         },         if ((packing_flags & 4096) != 0),         {,             enc.writeUint8(this.fieldIndex);,         },         if ((packing_flags & 8192) != 0),         {,             enc.writeStr16(this.description);,         },         if ((packing_flags & 16384) != 0),         {,             enc.writeMap(this.errorInfo);,         }, ,     }, ,     public void read(Decoder dec),     {,         packing_flags = (short) dec.readUint16();,         if ((packing_flags & 256) != 0),         {,             this.errorCode = ExecutionErrorCode.get(dec.readUint16());,         },         if ((packing_flags & 512) != 0),         {,             this.commandId = dec.readSequenceNo();,         },         if ((packing_flags & 1024) != 0),         {,             this.classCode = dec.readUint8();,         },         if ((packing_flags & 2048) != 0),         {,             this.commandCode = dec.readUint8();,         },         if ((packing_flags & 4096) != 0),         {,             this.fieldIndex = dec.readUint8();,         },         if ((packing_flags & 8192) != 0),         {,             this.description = dec.readStr16();,         },         if ((packing_flags & 16384) != 0),         {,             this.errorInfo = dec.readMap();,         }, ,     }, ,     public Map<String,Object> getFields(),     {,         Map<String,Object> result = new LinkedHashMap<String,Object>();, ,         if ((packing_flags & 256) != 0),         {,             result.put("errorCode", getErrorCode());,         },         if ((packing_flags & 512) != 0),         {,             result.put("commandId", getCommandId());,         },         if ((packing_flags & 1024) != 0),         {,             result.put("classCode", getClassCode());,         },         if ((packing_flags & 2048) != 0),         {,             result.put("commandCode", getCommandCode());,         },         if ((packing_flags & 4096) != 0),         {,             result.put("fieldIndex", getFieldIndex());,         },         if ((packing_flags & 8192) != 0),         {,             result.put("description", getDescription());,         },         if ((packing_flags & 16384) != 0),         {,             result.put("errorInfo", getErrorInfo());,         }, , ,         return result;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/transport/SessionTimeoutTest.java,,76-78,[        {,             super(connection, name, expiry);,         }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/transport/Struct.java,encoded,86-86,[        return !packed() || !isBit(f) && f.has(this);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/transport/Struct.java,getPaddWidth,96-98,[        int pw = getPackWidth() - getFlagWidth();,         assert pw > 0;,         return pw;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/qpid/transport/Struct.java,getReservedFlagCount,108-108,[        return getFlagCount() - getFields().size();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/transport/codec/AbstractDecoder.java,read,452-452,[            return new String(readBytes(t));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/codec/AbstractDecoder.java,,49-52,[    {,         @Override protected boolean removeEldestEntry(Map.Entry<Binary,String> me),         {,             return size() > 4*1024;],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/transport/codec/AbstractEncoder.java,write,608-609,[            writeBytes(t, coerce(byte[].class, value));,             break;],,write,615-615,[            writeBytes(t, coerce(byte[].class, value));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/transport/codec/AbstractEncoder.java,write,587-587,[            writeBytes(t, coerce(String.class, value).getBytes());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/transport/codec/AbstractEncoder.java,,69-72,[    {,         @Override protected boolean removeEldestEntry(Map.Entry<String,byte[]> me),         {,             return size() > 4*1024;],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/transport/codec/BBEncoder.java,writeMagicNumber,365-365,[		out.put("AM2".getBytes());],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/transport/network/InputHandler.java,<init>,74-80,[        switch (state),         {,         case PROTO_HDR:,             needed = 8;,             break;,         case FRAME_HDR:,             needed = Frame.HEADER_SIZE;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/qpid/transport/network/io/IoNetworkTransport.java,,153-299,[    private class AcceptingThread extends Thread,     {,         private volatile boolean _closed = false;,         private NetworkTransportConfiguration _config;,         private ProtocolEngineFactory _factory;,         private SSLContext _sslContext;,         private ServerSocket _serverSocket;,         private int _timeout;, ,         private AcceptingThread(NetworkTransportConfiguration config,,                                 ProtocolEngineFactory factory,,                                 SSLContext sslContext) throws IOException,         {,             _config = config;,             _factory = factory;,             _sslContext = sslContext;,             _timeout = TIMEOUT;, ,             InetSocketAddress address = config.getAddress();, ,             if(sslContext == null),             {,                 _serverSocket = new ServerSocket();,             },             else,             {,                 SSLServerSocketFactory socketFactory = _sslContext.getServerSocketFactory();,                 _serverSocket = socketFactory.createServerSocket();, ,                 if(config.needClientAuth()),                 {,                     ((SSLServerSocket)_serverSocket).setNeedClientAuth(true);,                 },                 else if(config.wantClientAuth()),                 {,                     ((SSLServerSocket)_serverSocket).setWantClientAuth(true);,                 },             }, ,             _serverSocket.setReuseAddress(true);,             _serverSocket.bind(address);,         }, , ,         /**,             Close the underlying ServerSocket if it has not already been closed.,          */,         public void close(),         {,             LOGGER.debug("Shutting down the Acceptor");,             _closed = true;, ,             if (!_serverSocket.isClosed()),             {,                 try,                 {,                     _serverSocket.close();,                 },                 catch (IOException e),                 {,                     throw new TransportException(e);,                 },             },         }, ,         @Override,         public void run(),         {,             try,             {,                 while (!_closed),                 {,                     Socket socket = null;,                     try,                     {,                         socket = _serverSocket.accept();,                         socket.setTcpNoDelay(_config.getTcpNoDelay());,                         socket.setSoTimeout(1000 * HANSHAKE_TIMEOUT);, ,                         final Integer sendBufferSize = _config.getSendBufferSize();,                         final Integer receiveBufferSize = _config.getReceiveBufferSize();, ,                         socket.setSendBufferSize(sendBufferSize);,                         socket.setReceiveBufferSize(receiveBufferSize);, ,                         ProtocolEngine engine = _factory.newProtocolEngine();, ,                         final IdleTimeoutTicker ticker = new IdleTimeoutTicker(engine, TIMEOUT);,                         NetworkConnection connection = new IoNetworkConnection(socket, engine, sendBufferSize, receiveBufferSize, _timeout,,                                                                                ticker);, ,                         connection.setMaxReadIdle(HANSHAKE_TIMEOUT);, ,                         ticker.setConnection(connection);, ,                         engine.setNetworkConnection(connection, connection.getSender());, ,                         connection.start();,                     },                     catch(RuntimeException e),                     {,                         LOGGER.error("Error in Acceptor thread on address " + _config.getAddress(), e);,                         closeSocketIfNecessary(socket);,                     },                     catch(IOException e),                     {,                         if(!_closed),                         {,                             LOGGER.error("Error in Acceptor thread on address " + _config.getAddress(), e);,                             closeSocketIfNecessary(socket);,                             try,                             {,                                 //Delay to avoid tight spinning the loop during issues such as too many open files,                                 Thread.sleep(1000);,                             },                             catch (InterruptedException ie),                             {,                                 LOGGER.debug("Stopping acceptor due to interrupt request");,                                 _closed = true;,                             },                         },                     },                 },             },             finally,             {,                 if(LOGGER.isDebugEnabled()),                 {,                     LOGGER.debug("Acceptor exiting, no new connections will be accepted on address " + _config.getAddress());,                 },             },         }, ,         private void closeSocketIfNecessary(final Socket socket),         {,             if(socket != null),             {,                 try,                 {,                     socket.close();,                 },                 catch (IOException e),                 {,                     LOGGER.debug("Exception while closing socket", e);,                 },             },         }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/transport/network/io/IoReceiver.java,run,213-213,[        catch (Exception t)],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/transport/network/io/IoSender.java,close,210-210,[                notEmpty.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/transport/network/io/IoSender.java,flush,189-189,[                notEmpty.notify();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/qpid/transport/network/io/IoSender.java,run,313-313,[                    notFull.notify();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/qpid/transport/network/security/SecurityLayerFactory.java,<init>,89-89,[            catch (Exception e)],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/qpid/transport/network/security/ssl/SSLBufferingSender.java,,62-62,[        _hostname = hostname;],,,247-247,[                    if (_hostname != null)],,,249-249,[                        SSLUtil.verifyHostname(engine, _hostname);],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/transport/network/security/ssl/SSLBufferingSender.java,doSend,249-253,[                        SSLUtil.verifyHostname(engine, _hostname);,                     }, ,                 case NOT_HANDSHAKING:,                     break; //do  nothing],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/transport/network/security/ssl/SSLReceiver.java,received,166-169,[                        handshakeStatus = engine.getHandshakeStatus();, ,                     case FINISHED:,                         if (_hostname != null)],,received,171-176,[                            SSLUtil.verifyHostname(engine, _hostname);,                         },                             ,                     case NEED_WRAP:                        ,                     case NOT_HANDSHAKING:,                         synchronized(_sslStatus.getSslLock())],,
STYLE,SF_SWITCH_FALLTHROUGH,org/apache/qpid/transport/network/security/ssl/SSLSender.java,send,246-250,[                        SSLUtil.verifyHostname(engine, _hostname);,                     },                     ,                 case NOT_HANDSHAKING:,                     break; //do  nothing],,
I18N,DM_CONVERT_CASE,org/apache/qpid/transport/network/security/ssl/SSLUtil.java,verifyHostname,108-108,[            final String hostName = hostnameExpected.trim().toLowerCase();],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/transport/network/security/ssl/SSLUtilTest.java,getSSLEngineAfterHandshake,193-213,[            switch (clientStatus),             {,                 case NEED_TASK:,                     clientEngine.getDelegatedTask().run();,                     break;,                 case NEED_WRAP:,                     ByteBuffer dst = ByteBuffer.allocate(1024*1024);,                     clientEngine.wrap(ByteBuffer.allocate(0), dst);,                     dst.flip();,                     byte[] output = new byte[clientOutput.length+dst.remaining()];,                     System.arraycopy(clientOutput,0,output,0,clientOutput.length);,                     dst.get(output, clientOutput.length, dst.remaining());,                     clientOutput = output;,                     break;,                 case NEED_UNWRAP:,                     ByteBuffer unwrapDst = ByteBuffer.allocate(1024*1024);,                     ByteBuffer src = ByteBuffer.wrap(clientInput);,                     clientEngine.unwrap(src, unwrapDst);,                     byte[] input = new byte[src.remaining()];,                     src.get(input,0,src.remaining());,                     clientInput = input;],,getSSLEngineAfterHandshake,219-241,[            switch (serverStatus),             {,                 case NEED_TASK:,                     serverEngine.getDelegatedTask().run();,                     break;,                 case NEED_WRAP:,                     ByteBuffer dst = ByteBuffer.allocate(1024*1024);,                     serverEngine.wrap(ByteBuffer.allocate(0), dst);,                     dst.flip();,                     byte[] serverOutput = new byte[clientInput.length+dst.remaining()];,                     System.arraycopy(clientInput,0,serverOutput,0,clientInput.length);,                     dst.get(serverOutput, clientInput.length, dst.remaining());,                     clientInput = serverOutput;,                     break;, ,                 case NOT_HANDSHAKING:,                 case NEED_UNWRAP:,                     ByteBuffer unwrapDst = ByteBuffer.allocate(1024*1024);,                     ByteBuffer src = ByteBuffer.wrap(clientOutput);,                     serverEngine.unwrap(src, unwrapDst);,                     byte[] input = new byte[src.remaining()];,                     src.get(input,0,src.remaining());,                     clientOutput = input;],,
CORRECTNESS,INT_BAD_COMPARISON_WITH_SIGNED_BYTE,org/apache/qpid/transport/util/Functions.java,str,75-75,[            if (c > 31 && c < 127 && c != '\\')],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/qpid/transport/util/Waiter.java,await,54-54,[            lock.wait(timeout - elapsed);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/qpid/typedmessage/TypedBytesContentReader.java,readObject,547-601,[            switch (wireType),             {,                 case BOOLEAN_TYPE:,                     checkAvailable(1);,                     result = readBooleanImpl();,                     break;,                 case BYTE_TYPE:,                     checkAvailable(1);,                     result = readByteImpl();,                     break;,                 case BYTEARRAY_TYPE:,                     checkAvailable(4);,                     int size = _data.getInt();,                     if (size == -1),                     {,                         result = null;,                     },                     else,                     {,                         _byteArrayRemaining = size;,                         byte[] bytesResult = new byte[size];,                         readBytesImpl(bytesResult);,                         result = bytesResult;,                     },                     break;,                 case SHORT_TYPE:,                     checkAvailable(2);,                     result = readShortImpl();,                     break;,                 case CHAR_TYPE:,                     checkAvailable(2);,                     result = readCharImpl();,                     break;,                 case INT_TYPE:,                     checkAvailable(4);,                     result = readIntImpl();,                     break;,                 case LONG_TYPE:,                     checkAvailable(8);,                     result = readLongImpl();,                     break;,                 case FLOAT_TYPE:,                     checkAvailable(4);,                     result = readFloatImpl();,                     break;,                 case DOUBLE_TYPE:,                     checkAvailable(8);,                     result = readDoubleImpl();,                     break;,                 case NULL_STRING_TYPE:,                     result = null;,                     break;,                 case STRING_TYPE:,                     checkAvailable(1);,                     result = readStringImpl();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/qpid/url/BindingURLParser.java,next,160-161,[                _index++; // skip '?',                 return BindingURLParserState.PROPERTY_NAME;],,next,176-177,[                _index++; // skip '&',                 return BindingURLParserState.PROPERTY_NAME;],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/qpid/url/BindingURLParser.java,processOptions,410-410,[            if (_options.get(key) instanceof String)],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/qpid/util/ByteBufferInputStreamTest.java,testAvailable,86-86,[        _inputStream.read(readBytes);],,
BAD_PRACTICE,SR_NOT_CHECKED,org/apache/qpid/util/ByteBufferInputStreamTest.java,testSkip,70-70,[        _inputStream.skip(3);],,
BAD_PRACTICE,DM_EXIT,org/apache/qpid/util/CommandLineParser.java,processCommandLine,628-628,[            System.exit(1);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/util/CommandLineParserTest.java,testGetErrorsReturnsStringOnErrors,129-129,[            !((parser.getErrors() == null) || "".equals(parser.getErrors())));],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/util/CommandLineParserTest.java,testGetOptionsInForceReturnsNonEmptyStringAfterParsing,170-170,[            !((parser.getOptionsInForce() == null) || "".equals(parser.getOptionsInForce())));],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/qpid/util/CommandLineParserTest.java,testGetUsageReturnsString,189-189,[            !((parser.getUsage() == null) || "".equals(parser.getUsage())));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/FileUtils.java,readStreamAsString,130-130,[                String s = new String(data, 0, read);],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/FileUtils.java,searchFile,389-389,[        BufferedReader reader = new BufferedReader(new FileReader(file));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/qpid/util/FileUtils.java,searchFile,395-395,[                if (line.contains(search))],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtils.java,copyRecursive,360-360,[        for (File file : source.listFiles())],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtils.java,deleteDirectory,276-276,[            if (directory.listFiles().length == 0)],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtils.java,copy,233-233,[                dst.createNewFile();],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/qpid/util/FileUtilsTest.java,testOpenFileOrDefaultResourceOpensDefaultResource,362-362,[        final File fileThatDoesNotExist = new File("/does/not/exist.properties");],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/FileUtilsTest.java,createTestFile,227-227,[            writer = new BufferedWriter(new FileWriter(test));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/FileUtilsTest.java,prepareFileForSearchTest,688-688,[        BufferedWriter writer = new BufferedWriter(new FileWriter(logfile));],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testCopyFile,67-67,[            int afterCopy = test.getAbsoluteFile().getParentFile().listFiles().length;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testCopyFile,69-69,[            int afterCopyFromCopy = new File(fileNameCopy).getAbsoluteFile().getParentFile().listFiles().length;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testCopyFile,58-58,[            int beforeCopy = beforeCopyFileList.length;],,testCopyFile,57-57,[            beforeCopyFileList = test.getAbsoluteFile().getParentFile().listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testDeleteFile,283-283,[        int fileCountCreated = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles().length;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testDeleteFile,293-293,[        int fileCountAfter = filesAfter.length;],,testDeleteFile,292-292,[        File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testDeleteFile,266-266,[        int fileCountBefore = filesBefore.length;],,testDeleteFile,265-265,[        File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testEmptyDirectoryDelete,492-492,[        int fileCountAfter = filesAfter.length;],,testEmptyDirectoryDelete,491-491,[        File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testEmptyDirectoryDelete,476-476,[        int fileCountBefore = filesBefore.length;],,testEmptyDirectoryDelete,475-475,[        File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testNonEmptyDirectoryDelete,544-544,[        int fileCountAfter = filesAfter.length;],,testNonEmptyDirectoryDelete,543-543,[        File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testNonEmptyDirectoryDelete,510-510,[        int fileCountBefore = filesBefore.length;],,testNonEmptyDirectoryDelete,509-509,[        File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testNonRecursiveNonEmptyDirectoryDeleteFails,461-461,[        int fileCountAfter = filesAfter.length;],,testNonRecursiveNonEmptyDirectoryDeleteFails,460-460,[        File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testNonRecursiveNonEmptyDirectoryDeleteFails,426-426,[        int fileCountBefore = filesBefore.length;],,testNonRecursiveNonEmptyDirectoryDeleteFails,425-425,[        File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testRecursiveDelete,583-583,[        int fileCountAfter = filesAfter.length;],,testRecursiveDelete,582-582,[        File[] filesAfter = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/qpid/util/FileUtilsTest.java,testRecursiveDelete,562-562,[        int fileCountBefore = filesBefore.length;],,testRecursiveDelete,561-561,[        File[] filesBefore = new File(path.substring(0, path.lastIndexOf(File.separator))).listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,createSubDir,616-616,[                subFile.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,createSubDir,601-601,[            subDir.mkdir();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,createTestFile,215-215,[            test.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testDeleteFile,270-270,[            test.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testEmptyDirectoryDelete,480-480,[        test.mkdir();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testNonEmptyDirectoryDelete,519-519,[            subFile.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testNonEmptyDirectoryDelete,512-512,[        test.mkdir();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testNonRecursiveNonEmptyDirectoryDeleteFails,437-437,[            subFile.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testNonRecursiveNonEmptyDirectoryDeleteFails,430-430,[        test.mkdir();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/qpid/util/FileUtilsTest.java,testRecursiveDelete,564-564,[        test.mkdir();],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/util/GZIPUtils.java,compressBufferToArray,78-78,[        return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/util/GZIPUtils.java,uncompressBufferToArray,92-92,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/qpid/util/GZIPUtils.java,uncompressStreamToArray,117-117,[        return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/util/GZIPUtilsTest.java,,53-57,[        {,             @Override,             public int read() throws IOException,             {,                 throw new IOException();],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/LogMonitor.java,countLinesInFile,302-302,[            br = new BufferedReader(new FileReader(_logfile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/LogMonitor.java,findMatches,145-145,[        LineNumberReader reader = new LineNumberReader(new FileReader(_logfile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/LogMonitor.java,findMatches,173-173,[        LineNumberReader reader = new LineNumberReader(new FileReader(_logfile));],,
I18N,DM_DEFAULT_ENCODING,org/apache/qpid/util/LogMonitor.java,waitForMessage,218-218,[            reader = new LineNumberReader(new FileReader(_logfile));],,
STYLE,RV_DONT_JUST_NULL_CHECK_READLINE,org/apache/qpid/util/LogMonitor.java,countLinesInFile,303-303,[            while(br.readLine() != null)],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/util/LogMonitorTest.java,,256-270,[        {, ,             public void run(),             {,                 try,                 {,                     Thread.sleep(delay);,                 },                 catch (InterruptedException e),                 {,                     //ignore,                 }, ,                 Logger.getRootLogger().warn(message);,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/qpid/util/StringsTest.java,,37-41,[                                                                           {,                                                                                {,                                                                                    put("\\", "\\\\");,                                                                                    put("\"", "\\\"");,                                                                                }],,
I18N,DM_CONVERT_CASE,org/apache/qpid/util/SystemUtils.java,<clinit>,42-42,[    private static final boolean _isWindows = _osName.toLowerCase().contains("windows");],,
I18N,DM_CONVERT_CASE,org/apache/qpid/util/SystemUtils.java,getOSConfigSuffix,72-72,[            return _osName.substring(0, _osName.indexOf(' ')).toLowerCase();],,
