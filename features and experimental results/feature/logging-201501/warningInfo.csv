BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/log4j/BasicConfigurationFactory.java,,54-67,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             setName("BasicConfiguration");,             final String levelName = System.getProperty(DEFAULT_LEVEL);,             final Level level = (levelName != null && Level.getLevel(levelName) != null) ? Level.getLevel(levelName),                     : Level.DEBUG;,             root.setLevel(level);,         }, ,         @Override,         protected void doConfigure() {,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/log4j/BasicConfigurationFactory.java,,54-67,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             setName("BasicConfiguration");,             final String levelName = System.getProperty(DEFAULT_LEVEL);,             final Level level = (levelName != null && Level.getLevel(levelName) != null) ? Level.getLevel(levelName),                     : Level.DEBUG;,             root.setLevel(level);,         }, ,         @Override,         protected void doConfigure() {,         }],,
I18N,DM_CONVERT_CASE,org/apache/log4j/Level.java,toLevel,178-178,[        final String s = sArg.toUpperCase();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/Level.java,readObject,225-225,[        if (levelStr == null) {],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testALL,210-210,[        assertTrue(Level.ALL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testDEBUG,194-194,[        assertTrue(Level.DEBUG instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testERROR,170-170,[        assertTrue(Level.ERROR instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testFATAL,162-162,[        assertTrue(Level.FATAL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testINFO,186-186,[        assertTrue(Level.INFO instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testOFF,154-154,[        assertTrue(Level.OFF instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testTRACE,202-202,[        assertTrue(Level.TRACE instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testWARN,178-178,[        assertTrue(Level.WARN instanceof Level);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testDEBUG,194-195,[        assertTrue(Level.DEBUG instanceof Level);,     }],,testDebug,204-242,[        currentLevel = Level.DEBUG;, ,         currentEvent = events[0];,         debug("Hello");,         debug(null, "Hello");,         currentEvent = events[1];,         debug(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         debug("Hello", t);,         debug(null, "Hello", t);,         currentEvent = events[3];,         debug(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         debug(obj);,         currentEvent = events[5];,         debug(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         debug(obj, t);,         debug(null, obj, t);,         currentEvent = events[7];,         debug(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         debug(pattern, p1, p2);,         currentEvent = events[9];,         debug(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         debug(simple);,         debug(null, simple);,         debug(null, simple, null);,         currentEvent = events[11];,         debug(simple, t);,         debug(null, simple, t);,         currentEvent = events[12];,         debug(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         debug(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         debug(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testERROR,170-171,[        assertTrue(Level.ERROR instanceof Level);,     }],,testError,246-284,[        currentLevel = Level.ERROR;, ,         currentEvent = events[0];,         error("Hello");,         error(null, "Hello");,         currentEvent = events[1];,         error(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         error("Hello", t);,         error(null, "Hello", t);,         currentEvent = events[3];,         error(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         error(obj);,         currentEvent = events[5];,         error(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         error(obj, t);,         error(null, obj, t);,         currentEvent = events[7];,         error(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         error(pattern, p1, p2);,         currentEvent = events[9];,         error(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         error(simple);,         error(null, simple);,         error(null, simple, null);,         currentEvent = events[11];,         error(simple, t);,         error(null, simple, t);,         currentEvent = events[12];,         error(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         error(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         error(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testFATAL,162-163,[        assertTrue(Level.FATAL instanceof Level);,     }],,testFatal,94-95,[        assertTrue(Priority.FATAL instanceof Level);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testINFO,186-187,[        assertTrue(Level.INFO instanceof Level);,     }],,testInfo,330-368,[        currentLevel = Level.INFO;, ,         currentEvent = events[0];,         info("Hello");,         info(null, "Hello");,         currentEvent = events[1];,         info(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         info("Hello", t);,         info(null, "Hello", t);,         currentEvent = events[3];,         info(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         info(obj);,         currentEvent = events[5];,         info(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         info(obj, t);,         info(null, obj, t);,         currentEvent = events[7];,         info(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         info(pattern, p1, p2);,         currentEvent = events[9];,         info(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         info(simple);,         info(null, simple);,         info(null, simple, null);,         currentEvent = events[11];,         info(simple, t);,         info(null, simple, t);,         currentEvent = events[12];,         info(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         info(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         info(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testTRACE,202-203,[        assertTrue(Level.TRACE instanceof Level);,     }],,testTrace,390-410,[        final ListAppender appender = new ListAppender("List");,         appender.start();,         final Logger root = Logger.getRootLogger();,         root.getLogger().addAppender(appender);,         root.setLevel(Level.INFO);, ,         final Logger tracer = Logger.getLogger("com.example.Tracer");,         tracer.setLevel(Level.TRACE);, ,         tracer.trace("Message 1");,         root.trace("Discarded Message");,         root.trace("Discarded Message");, ,         final List<LogEvent> msgs = appender.getEvents();,         assertEquals(1, msgs.size());,         final LogEvent event = msgs.get(0);,         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());,         assertEquals("Message 1", event.getMessage().getFormat());,         appender.stop();,         root.getLogger().removeAppender(appender);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testWARN,178-179,[        assertTrue(Level.WARN instanceof Level);,     }],,testWarn,666-704,[        currentLevel = Level.WARN;, ,         currentEvent = events[0];,         warn("Hello");,         warn(null, "Hello");,         currentEvent = events[1];,         warn(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         warn("Hello", t);,         warn(null, "Hello", t);,         currentEvent = events[3];,         warn(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         warn(obj);,         currentEvent = events[5];,         warn(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         warn(obj, t);,         warn(null, obj, t);,         currentEvent = events[7];,         warn(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         warn(pattern, p1, p2);,         currentEvent = events[9];,         warn(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         warn(simple);,         warn(null, simple);,         warn(null, simple, null);,         currentEvent = events[11];,         warn(simple, t);,         warn(null, simple, t);,         currentEvent = events[12];,         warn(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         warn(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         warn(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LoggerTest.java,tearDown,76-80,[        final LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();,         ctx.reconfigure();,         a1 = null;,         a2 = null;,     }],,teardown,93-102,[        final Map<String, Appender> map = root.getAppenders();,         for (final Map.Entry<String, Appender> entry : map.entrySet()) {,             final Appender app = entry.getValue();,             root.removeAppender(app);,             app.stop();,         },         tcpCount = 0;,         udpCount = 0;,         list.clear();,     }],,
PERFORMANCE,DM_STRING_CTOR,org/apache/log4j/VelocityTest.java,testVelocity,54-54,[        vContext.put("name", new String("Velocity"));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,119-119,[            final FileInputStream is = new FileInputStream(witnessFile);],,assertStreamEquals,120-120,[            final int bytesRead = is.read(expected);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,147-147,[            final FileOutputStream os = new FileOutputStream(witnessFile);],,assertStreamEquals,148-148,[            os.write(actual);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/util/StringsTest.java,testEMPTY,33-35,[        Assert.assertEquals("", Strings.EMPTY);,         Assert.assertEquals(0, Strings.EMPTY.length());,     }],,testEmpty,70-79,[        final File file = new File("target/fileRename/fileRename.log");,         final PrintStream pos = new PrintStream(file);,         pos.close();, ,         final File dest = new File("target/fileRename/newFile.log");,         final FileRenameAction action = new FileRenameAction(file, dest, false);,         action.execute();,         assertTrue("Renamed file does not exist", !dest.exists());,         assertTrue("Old file does not exist", !file.exists());,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,108-108,[                final BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,109-109,[                final PrintWriter out = new PrintWriter(socket.getOutputStream());],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,90-90,[                    notifyAll();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,101-101,[                    if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,123-123,[        } catch (final Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,stop,155-155,[            serverSocket.close();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,271-271,[                server.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,271-271,[                server.wait();],,
I18N,DM_CONVERT_CASE,org/apache/logging/dumbster/smtp/SmtpRequest.java,createRequest,191-191,[            final String su = s.toUpperCase();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/AbstractLoggerTest.java,,39-43,[        public LogEvent(final String markerName, final Message data, final Throwable t) {,             this.markerName = markerName;,             this.data = data;,             this.t = t;,         }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testDebug,204-204,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testError,246-246,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testFatal,288-288,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testInfo,330-330,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogDebug,372-372,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogError,414-414,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogFatal,456-456,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogInfo,498-498,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogTrace,540-540,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogWarn,582-582,[        currentLevel = Level.WARN;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testTrace,624-624,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testWarn,666-666,[        currentLevel = Level.WARN;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/EventLoggerTest.java,setup,40-41,[        results.clear();,     }],,setUp,43-47,[        final Log4jJsonObjectMapper log4jObjectMapper = new Log4jJsonObjectMapper();,         writer = log4jObjectMapper.writer();,         reader = log4jObjectMapper.reader(Log4jMarker.class);,         MarkerManager.clear();,     }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,log4j2,126-126,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,logback,116-116,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/FormatterLoggerManualExample.java,,37-37,[    public static Logger logger = LogManager.getFormatterLogger("Foo");],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/Level.java,valueOf,282-282,[        final String levelName = name.toUpperCase();],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/LoggerTest.java,mdc,324-324,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/LoggerTest.java,mdc,324-324,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/MarkerManager.java,getParents,224-224,[                return null;],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testNameOnly,54-54,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testOneParent,65-65,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,testTwoParents,90-90,[        final Marker actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/MarkerMixInTest.java,writeValueAsString,75-75,[        final String str = writer.writeValueAsString(expected);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getByteBuffer,185-185,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getBytes,191-191,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,111-111,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j,127-127,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j2,146-146,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,logback,136-136,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToChannel,174-174,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToStream,165-165,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToWriter,156-156,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,105-105,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,106-106,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,111-111,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,112-112,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getByteBuffer,127-127,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getBytes,133-133,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,72-72,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToChannel,116-116,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToStream,107-107,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToWriter,98-98,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/PerformanceRun.java,,46-46,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,66-66,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,67-67,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,72-72,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,73-73,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,logMessage,81-81,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,logMessage,80-80,[            t.printStackTrace(new PrintStream(baos));],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/logging/log4j/ThreadContext.java,init,227-246,[        if (contextMap == null && ProviderUtil.hasProviders()) {,             final String factoryClassName = LogManager.getFactory().getClass().getName();,             for (final Provider provider : ProviderUtil.getProviders()) {,                 if (factoryClassName.equals(provider.getClassName())) {,                     final Class<? extends ThreadContextMap> clazz = provider.loadThreadContextMap();,                     if (clazz != null) {,                         try {,                             contextMap = clazz.newInstance();,                             break;,                         } catch (final Exception e) {,                             LOGGER.error("Unable to locate or load configured ThreadContextMap {}",,                                 provider.getThreadContextMap(), e);,                             contextMap = new DefaultThreadContextMap(useMap);,                         },                     },                 },             },         },         if (contextMap == null) {,             contextMap = new DefaultThreadContextMap(useMap);],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/logging/log4j/ThreadContext.java,init,245-246,[        if (contextMap == null) {,             contextMap = new DefaultThreadContextMap(useMap);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextInheritanceTest.java,,200-213,[        public TestThread(final StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             final String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clearMap();,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextTest.java,,180-193,[        public TestThread(final StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             final String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clearMap();,         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/AppenderRefLevelJsonTest.java,,40-40,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/AppenderRefLevelTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/BasicConfigurationFactory.java,getSupportedTypes,40-40,[        return null;],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/BasicConfigurationFactory.java,,53-60,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             final String l = System.getProperty(DEFAULT_LEVEL);,             final Level level = (l != null && Level.getLevel(l) != null) ? Level.getLevel(l) : Level.ERROR;,             root.setLevel(level);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/BasicConfigurationFactory.java,,53-60,[        public BasicConfiguration() {,             super(ConfigurationSource.NULL_SOURCE);, ,             final LoggerConfig root = getRootLogger();,             final String l = System.getProperty(DEFAULT_LEVEL);,             final Level level = (l != null && Level.getLevel(l) != null) ? Level.getLevel(l) : Level.ERROR;,             root.setLevel(level);,         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/CollectionLoggingTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ExtendedLevelTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/ExtendedLevelTest.java,testLevelLogging,55-55,[        List<LogEvent> events = list1.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/ExtendedLevelTest.java,testLevelLogging,63-63,[        events = list2.getEvents();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/FileConfigTest.java,,39-39,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/FileConfigTest.java,testReconfiguration,55-55,[        file.setLastModified(newTime);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/FileConfigTest.java,,45-45,[        app = context.getListAppender("List").clear();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/HostNameTest.java,,44-44,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/HostNameTest.java,testHostname,56-56,[        final List<String> msgs = host.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/HostNameTest.java,testHostname,60-60,[        assertNotNull("No Host FileAppender file name", hostFile.getFileName());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LateConfigTest.java,testReconfiguration,64-64,[        context = (LoggerContext) LogManager.getContext(false);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LevelTest.java,,51-51,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LogEventFactoryTest.java,,80-80,[    }).around(context);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/LogEventFactoryTest.java,,80-80,[    }).around(context);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LogEventFactoryTest.java,testEvent,91-91,[        final List<LogEvent> events = app.getEvents();],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/Logger.java,getLevel,189-189,[        return config.level;],,setLevel,103-106,[        if (level != null) {,             config = new PrivateConfig(config, level);,         },     }],,
BAD_PRACTICE,SE_INNER_CLASS,org/apache/logging/log4j/core/Logger.java,,252-348,[    protected class PrivateConfig implements Serializable {,         private static final long serialVersionUID = 1L;,         // config fields are public to make them visible to Logger subclasses,         public final LoggerConfig loggerConfig;,         public final Configuration config;,         private final Level level;,         private final int intLevel;,         private final Logger logger;, ,         public PrivateConfig(final Configuration config, final Logger logger) {,             this.config = config;,             this.loggerConfig = config.getLoggerConfig(getName());,             this.level = this.loggerConfig.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final Level level) {,             this.config = pc.config;,             this.loggerConfig = pc.loggerConfig;,             this.level = level;,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final LoggerConfig lc) {,             this.config = pc.config;,             this.loggerConfig = lc;,             this.level = lc.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         // LOG4J2-151: changed visibility to public,         public void logEvent(final LogEvent event) {,             config.getConfigurationMonitor().checkConfiguration();,             loggerConfig.log(event);,         }, ,         boolean filter(final Level level, final Marker marker, final String msg) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, p1);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/logging/log4j/core/Logger.java,,252-348,[    protected class PrivateConfig implements Serializable {,         private static final long serialVersionUID = 1L;,         // config fields are public to make them visible to Logger subclasses,         public final LoggerConfig loggerConfig;,         public final Configuration config;,         private final Level level;,         private final int intLevel;,         private final Logger logger;, ,         public PrivateConfig(final Configuration config, final Logger logger) {,             this.config = config;,             this.loggerConfig = config.getLoggerConfig(getName());,             this.level = this.loggerConfig.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final Level level) {,             this.config = pc.config;,             this.loggerConfig = pc.loggerConfig;,             this.level = level;,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final LoggerConfig lc) {,             this.config = pc.config;,             this.loggerConfig = lc;,             this.level = lc.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         // LOG4J2-151: changed visibility to public,         public void logEvent(final LogEvent event) {,             config.getConfigurationMonitor().checkConfiguration();,             loggerConfig.log(event);,         }, ,         boolean filter(final Level level, final Marker marker, final String msg) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, p1);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             },             return level != null && intLevel >= level.intLevel();],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/logging/log4j/core/LoggerContext.java,,56-467,[public class LoggerContext extends AbstractLifeCycle implements org.apache.logging.log4j.spi.LoggerContext, ConfigurationListener {, ,     private static final long serialVersionUID = 1L;, ,     public static final String PROPERTY_CONFIG = "config";,     private static final Configuration NULL_CONFIGURATION = new NullConfiguration();, ,     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();,     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();, ,     /**,      * The Configuration is volatile to guarantee that initialization of the,      * Configuration has completed before the reference is updated.,      */,     private volatile Configuration config = new DefaultConfiguration();,     private Object externalContext;,     private final String name;,     private URI configLocation;,     private Cancellable shutdownCallback;, ,     private final Lock configLock = new ReentrantLock();, ,     /**,      * Constructor taking only a name.,      * @param name The context name.,      */,     public LoggerContext(final String name) {,         this(name, null, (URI) null);,     }, ,     /**,      * Constructor taking a name and a reference to an external context.,      * @param name The context name.,      * @param externalContext The external context.,      */,     public LoggerContext(final String name, final Object externalContext) {,         this(name, externalContext, (URI) null);,     }, ,     /**,      * Constructor taking a name, external context and a configuration URI.,      * @param name The context name.,      * @param externalContext The external context.,      * @param configLocn The location of the configuration as a URI.,      */,     public LoggerContext(final String name, final Object externalContext, final URI configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         this.configLocation = configLocn;,     }, ,     /**,      * Constructor taking a name external context and a configuration location,      * String. The location must be resolvable to a File.,      *,      * @param name The configuration location.,      * @param externalContext The external context.,      * @param configLocn The configuration location.,      */,     public LoggerContext(final String name, final Object externalContext, final String configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         if (configLocn != null) {,             URI uri;,             try {,                 uri = new File(configLocn).toURI();,             } catch (final Exception ex) {,                 uri = null;,             },             configLocation = uri;,         } else {,             configLocation = null;,         },     }, ,     @Override,     public void start() {,         LOGGER.debug("Starting LoggerContext[name={}, {}]...", getName(), this);,         if (configLock.tryLock()) {,             try {,                 if (this.isInitialized() || this.isStopped()) {,                     this.setStarting();,                     reconfigure();,                     if (this.config.isShutdownHookEnabled()) {,                         setUpShutdownHook();,                     },                     this.setStarted();,                 },             } finally {,                 configLock.unlock();,             },         },         LOGGER.debug("LoggerContext[name={}, {}] started OK.", getName(), this);,     }, ,     /**,      * Start with a specific configuration.,      * @param config The new Configuration.,      */,     public void start(final Configuration config) {,         LOGGER.debug("Starting LoggerContext[name={}, {}] with configuration {}...", getName(), this, config);,         if (configLock.tryLock()) {,             try {,                 if (this.isInitialized() || this.isStopped()) {,                     if (this.config.isShutdownHookEnabled()) {,                         setUpShutdownHook();,                     },                     this.setStarted();,                 },             } finally {,                 configLock.unlock();,             },         },         setConfiguration(config);,         LOGGER.debug("LoggerContext[name={}, {}] started OK with configuration {}.", getName(), this, config);,     }, ,     private void setUpShutdownHook() {,         if (shutdownCallback == null) {,             final LoggerContextFactory factory = LogManager.getFactory();,             if (factory instanceof ShutdownCallbackRegistry) {,                 LOGGER.debug(SHUTDOWN_HOOK_MARKER, "Shutdown hook enabled. Registering a new one.");,                 try {,                     this.shutdownCallback = ((ShutdownCallbackRegistry) factory).addShutdownCallback(new Runnable() {,                         @Override,                         public void run() {,                             final LoggerContext context = LoggerContext.this;,                             LOGGER.debug(SHUTDOWN_HOOK_MARKER, "Stopping LoggerContext[name={}, {}]", context.getName(),,                                 context);,                             context.stop();,                         }, ,                         @Override,                         public String toString() {,                             return "Shutdown callback for LoggerContext[name=" + LoggerContext.this.getName() + ']';,                         },                     });,                 } catch (final IllegalStateException ise) {,                     LOGGER.fatal(SHUTDOWN_HOOK_MARKER, "Unable to register shutdown hook because JVM is shutting down.");,                 } catch (final SecurityException se) {,                     LOGGER.error(SHUTDOWN_HOOK_MARKER, "Unable to register shutdown hook due to security restrictions");,                 },             },         },     }, ,     @Override,     public void stop() {,         LOGGER.debug("Stopping LoggerContext[name={}, {}]...", getName(), this);,         configLock.lock();,         try {,             if (this.isStopped()) {,                 return;,             }, ,             this.setStopping();,             try {,                 Server.unregisterLoggerContext(getName()); // LOG4J2-406, LOG4J2-500,             } catch (final Exception ex) {,                 LOGGER.error("Unable to unregister MBeans", ex);,             },             if (shutdownCallback != null) {,                 shutdownCallback.cancel();,                 shutdownCallback = null;,             },             final Configuration prev = config;,             config = NULL_CONFIGURATION;,             updateLoggers();,             prev.stop();,             externalContext = null;,             LogManager.getFactory().removeContext(this);,             this.setStopped();,         } finally {,             configLock.unlock();,         },         LOGGER.debug("Stopped LoggerContext[name={}, {}]...", getName(), this);,     }, ,     /**,      * Gets the name.,      *,      * @return the name.,      */,     public String getName() {,         return name;,     }, ,     /**,      * Set the external context.,      * @param context The external context.,      */,     public void setExternalContext(final Object context) {,         this.externalContext = context;,     }, ,     /**,      * Returns the external context.,      * @return The external context.,      */,     @Override,     public Object getExternalContext() {,         return this.externalContext;,     }, ,     /**,      * Obtain a Logger from the Context.,      * @param name The name of the Logger to return.,      * @return The Logger.,      */,     @Override,     public Logger getLogger(final String name) {,         return getLogger(name, null);,     }, ,     /**,      * Gets a collection of the current loggers.,      * <p>,      * Whether this collection is a copy of the underlying collection or not is undefined. Therefore, modify this collection at your own,      * risk.,      * </p>,      *,      * @return a collection of the current loggers.,      */,     public Collection<Logger> getLoggers() {,         return loggers.values();,     }, ,     /**,      * Obtain a Logger from the Context.,      * @param name The name of the Logger to return.,      * @param messageFactory The message factory is used only when creating a,      *            logger, subsequent use does not change the logger but will log,      *            a warning if mismatched.,      * @return The Logger.,      */,     @Override,     public Logger getLogger(final String name, final MessageFactory messageFactory) {,         Logger logger = loggers.get(name);,         if (logger != null) {,             AbstractLogger.checkMessageFactory(logger, messageFactory);,             return logger;,         }, ,         logger = newInstance(this, name, messageFactory);,         final Logger prev = loggers.putIfAbsent(name, logger);,         return prev == null ? logger : prev;,     }, ,     /**,      * Determine if the specified Logger exists.,      * @param name The Logger name to search for.,      * @return True if the Logger exists, false otherwise.,      */,     @Override,     public boolean hasLogger(final String name) {,         return loggers.containsKey(name);,     }, ,     /**,      * Returns the current Configuration. The Configuration will be replaced,      * when a reconfigure occurs.,      *,      * @return The Configuration.,      */,     public Configuration getConfiguration() {,         return config;,     }, ,     /**,      * Add a Filter to the Configuration. Filters that are added through the API will be lost,      * when a reconfigure occurs.,      * @param filter The Filter to add.,      */,     public void addFilter(final Filter filter) {,         config.addFilter(filter);,     }, ,     /**,      * Removes a Filter from the current Configuration.,      * @param filter The Filter to remove.,      */,     public void removeFilter(final Filter filter) {,         config.removeFilter(filter);,     }, ,     /**,      * Set the Configuration to be used.,      * @param config The new Configuration.,      * @return The previous Configuration.,      */,     private synchronized Configuration setConfiguration(final Configuration config) {,         Assert.requireNonNull(config, "No Configuration was provided");,         final Configuration prev = this.config;,         config.addListener(this);,         final ConcurrentMap<String, String> map = config.getComponent(Configuration.CONTEXT_PROPERTIES);, ,         try { // LOG4J2-719 network access may throw android.os.NetworkOnMainThreadException,             map.putIfAbsent("hostName", NetUtils.getLocalHostname());,         } catch (final Exception ex) {,             LOGGER.debug("Ignoring {}, setting hostName to 'unknown'", ex.toString());,             map.putIfAbsent("hostName", "unknown");,         },         map.putIfAbsent("contextName", name);,         config.start();,         this.config = config;,         updateLoggers();,         if (prev != null) {,             prev.removeListener(this);,             prev.stop();,         }, ,         firePropertyChangeEvent(new PropertyChangeEvent(this, PROPERTY_CONFIG, prev, config));, ,         try {,             Server.reregisterMBeansAfterReconfigure();,         } catch (final Throwable t) {,             // LOG4J2-716: Android has no java.lang.management,             LOGGER.error("Could not reconfigure JMX", t);,         },         return prev;,     }, ,     private void firePropertyChangeEvent(final PropertyChangeEvent event) {,         for (final PropertyChangeListener listener : propertyChangeListeners) {,             listener.propertyChange(event);,         },     }, ,     public void addPropertyChangeListener(final PropertyChangeListener listener) {,         propertyChangeListeners.add(Assert.requireNonNull(listener, "listener"));,     }, ,     public void removePropertyChangeListener(final PropertyChangeListener listener) {,         propertyChangeListeners.remove(listener);,     }, ,     /**,      * Returns the initial configuration location or {@code null}. The returned value may not be the location of the,      * current configuration. Use,      * {@link #getConfiguration()}.{@link Configuration#getConfigurationSource() getConfigurationSource()}.{@link,      * ConfigurationSource#getLocation() getLocation()} to get the actual source of the current configuration.,      * @return the initial configuration location or {@code null},      */,     public synchronized URI getConfigLocation() {,         return configLocation;,     }, ,     /**,      * Sets the configLocation to the specified value and reconfigures this context.,      * @param configLocation the location of the new configuration,      */,     public synchronized void setConfigLocation(final URI configLocation) {,         this.configLocation = configLocation;,         reconfigure();,     }, ,     /**,      * Reconfigure the context.,      */,     public synchronized void reconfigure() {,         final ClassLoader cl = ClassLoader.class.isInstance(externalContext) ? (ClassLoader) externalContext : null;,         LOGGER.debug("Reconfiguration started for context[name={}] at {} ({}) with optional ClassLoader: {}", name,,             configLocation, this, cl);,         final Configuration instance = ConfigurationFactory.getInstance().getConfiguration(name, configLocation, cl);,         setConfiguration(instance);,         /*,          * instance.start(); Configuration old = setConfiguration(instance);,          * updateLoggers(); if (old != null) { old.stop(); },          */, ,         LOGGER.debug("Reconfiguration complete for context[name={}] at {} ({}) with optional ClassLoader: {}", name,,             configLocation, this, cl);,     }, ,     /**,      * Cause all Loggers to be updated against the current Configuration.,      */,     public void updateLoggers() {,         updateLoggers(this.config);,     }, ,     /**,      * Cause all Logger to be updated against the specified Configuration.,      * @param config The Configuration.,      */,     public void updateLoggers(final Configuration config) {,         for (final Logger logger : loggers.values()) {,             logger.updateConfiguration(config);,         },     }, ,     /**,      * Cause a reconfiguration to take place when the underlying configuration,      * file changes.,      *,      * @param reconfigurable The Configuration that can be reconfigured.,      */,     @Override,     public synchronized void onChange(final Reconfigurable reconfigurable) {,         LOGGER.debug("Reconfiguration started for context {} ({})", name, this);,         final Configuration newConfig = reconfigurable.reconfigure();,         if (newConfig != null) {,             setConfiguration(newConfig);,             LOGGER.debug("Reconfiguration completed for {} ({})", name, this);,         } else {,             LOGGER.debug("Reconfiguration failed for {} ({})", name, this);,         },     }, ,     // LOG4J2-151: changed visibility from private to protected,     protected Logger newInstance(final LoggerContext ctx, final String name, final MessageFactory messageFactory) {,         return new Logger(ctx, name, messageFactory);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerDateTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LoggerDateTest.java,testFileName,48-48,[        final String name = fileApp.getFileName();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerTest.java,,53-53,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/LoggerTest.java,testReconfiguration,204-204,[        file.setLastModified(newTime);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LoggerUpdateTest.java,,41-41,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/LoggerUpdateTest.java,resetLevel,52-52,[        List<LogEvent> events = app.getEvents();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/LookupTest.java,,35-35,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ShutdownDisabledTest.java,,34-34,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabled,74-74,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabledByLevel,87-87,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugLogger,100-100,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,setupClass,60-60,[        System.gc();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/StrictXmlConfigTest.java,,43-43,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/ThreadedTest.java,,68-68,[    }).around(context);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,115-115,[            for (final File file : files) {],,deleteDir,114-114,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,116-116,[                file.delete();],,deleteDir,118-118,[            dir.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedTest.java,,99-108,[        public StateSettingRunnable(final State state) {,             this.state = state;,         },         @Override,         public void run() {,             for (int i=0; i < LOOP_CNT*4; ++i) {,                 Thread.yield();,                 state.setState();,             },         }],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/TimestampMessageTest.java,,50-50,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j2-744.xml");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/TimestampMessageTest.java,testTimestampMessage,72-72,[        final List<String> msgs = app.getMessages();],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/message/SimpleMessage.java,equals,71-80,[        if (this == o) {,             return true;,         },         if (o == null || getClass() != o.getClass()) {,             return false;,         }, ,         final SimpleMessage that = (SimpleMessage) o;, ,         return !(message != null ? !message.equals(that.message) : that.message != null);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/XmlEvents.java,,36-36,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/XmlEvents.java,,36-36,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/AsyncAppender.java,append,147-147,[            if (isAppenderThread.get() == Boolean.TRUE && queue.remainingCapacity() == 0) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/AppenderRef.java,,35-81,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final String ref;,     private final Level level;,     private final Filter filter;, ,     private AppenderRef(final String ref, final Level level, final Filter filter) {,         this.ref = ref;,         this.level = level;,         this.filter = filter;,     }, ,     public String getRef() {,         return ref;,     }, ,     public Level getLevel() {,         return level;,     }, ,     public Filter getFilter() {,         return filter;,     }, ,     @Override,     public String toString() {,         return ref;,     }, ,     /**,      * Create an Appender reference.,      * @param ref The name of the Appender.,      * @param level The Level to filter against.,      * @param filter The filter(s) to use.,      * @return The name of the Appender.,      */,     @PluginFactory,     public static AppenderRef createAppenderRef(,             @PluginAttribute("ref") final String ref,,             @PluginAttribute("level") final Level level,,             @PluginElement("Filter") final Filter filter) {, ,         if (ref == null) {,             LOGGER.error("Appender references must contain a reference");,             return null;,         },         return new AppenderRef(ref, level, filter);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/appender/AsyncAppender.java,,214-304,[        private volatile boolean shutdown = false;,         private final List<AppenderControl> appenders;,         private final BlockingQueue<Serializable> queue;, ,         public AsyncThread(final List<AppenderControl> appenders, final BlockingQueue<Serializable> queue) {,             this.appenders = appenders;,             this.queue = queue;,             setDaemon(true);,             setName("AsyncAppenderThread" + threadSequence.getAndIncrement());,         }, ,         @Override,         public void run() {,             isAppenderThread.set(Boolean.TRUE); // LOG4J2-485,             while (!shutdown) {,                 Serializable s;,                 try {,                     s = queue.take();,                     if (s != null && s instanceof String && SHUTDOWN.equals(s.toString())) {,                         shutdown = true;,                         continue;,                     },                 } catch (final InterruptedException ex) {,                     break; // LOG4J2-830,                 },                 final Log4jLogEvent event = Log4jLogEvent.deserialize(s);,                 event.setEndOfBatch(queue.isEmpty());,                 final boolean success = callAppenders(event);,                 if (!success && errorAppender != null) {,                     try {,                         errorAppender.callAppender(event);,                     } catch (final Exception ex) {,                         // Silently accept the error.,                     },                 },             },             // Process any remaining items in the queue.,             LOGGER.trace("AsyncAppender.AsyncThread shutting down. Processing remaining {} queue events.",,                     queue.size());,             int count= 0;,             int ignored = 0;,             while (!queue.isEmpty()) {,                 try {,                     final Serializable s = queue.take();,                     if (Log4jLogEvent.canDeserialize(s)) {,                         final Log4jLogEvent event = Log4jLogEvent.deserialize(s);,                         event.setEndOfBatch(queue.isEmpty());,                         callAppenders(event);,                         count++;,                     } else {,                         ignored++;,                         LOGGER.trace("Ignoring event of class {}", s.getClass().getName());,                     },                 } catch (final InterruptedException ex) {,                     // May have been interrupted to shut down.,                     // Here we ignore interrupts and try to process all remaining events.,                 },             },             LOGGER.trace("AsyncAppender.AsyncThread stopped. Queue has {} events remaining. " +,             		"Processed {} and ignored {} events since shutdown started.",,             		queue.size(), count, ignored);,         }, ,         /**,          * Calls {@link AppenderControl#callAppender(LogEvent) callAppender} on,          * all registered {@code AppenderControl} objects, and returns {@code true},          * if at least one appender call was successful, {@code false} otherwise.,          * Any exceptions are silently ignored.,          *,          * @param event the event to forward to the registered appenders,          * @return {@code true} if at least one appender call succeeded, {@code false} otherwise,          */,         boolean callAppenders(final Log4jLogEvent event) {,             boolean success = false;,             for (final AppenderControl control : appenders) {,                 try {,                     control.callAppender(event);,                     success = true;,                 } catch (final Exception ex) {,                     // If no appender is successful the error appender will get it.,                 },             },             return success;,         }, ,         public void shutdown() {,             shutdown = true;,             if (queue.isEmpty()) {,                 queue.offer(SHUTDOWN);,             },         }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsyncAppender.java,callAppenders,292-292,[                } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,245-245,[                    } catch (final Exception ex) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,239-239,[                final Log4jLogEvent event = Log4jLogEvent.deserialize(s);],,run,232-232,[                    if (s != null && s instanceof String && SHUTDOWN.equals(s.toString())) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/AsyncAppender.java,shutdown,302-302,[                queue.offer(SHUTDOWN);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/AsyncAppenderNoLocationTest.java,testNoLocation,59-59,[        final List<String> list = app.getMessages();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/ConsoleAppender.java,getOutputStream,205-205,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,65-65,[        final String msg = baos.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,62-62,[        System.setOut(new PrintStream(baos));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppender.java,callAppender,120-120,[            primary.callAppender(event);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testFailover,63-63,[        List<LogEvent> events = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,77-77,[        List<LogEvent> events = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,86-86,[        events = foApp.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testFailover,62-62,[        logger.error("This is a test");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppenderTest.java,testRecovery,75-75,[        onceLogger.error("Fail once");],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/appender/FailoversPlugin.java,createFailovers,50-50,[            return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/FileAppender.java,createAppender,149-149,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,150-150,[            final InputStreamReader isr = new InputStreamReader(is);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,188-188,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,151-151,[            final BufferedReader br = new BufferedReader(isr);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,188-188,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/FileAppenderTest.java,,208-223,[        public FileWriterRunnable(final boolean lock, final int count) {,             this.lock = lock;,             this.count = count;,         }, ,         @Override,         public void run() {,             final Thread thread = Thread.currentThread();, ,             try {,                 writer(lock, count, thread.getName());, ,             } catch (final Exception ex) {,                 throw new RuntimeException(ex);,             },         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/FileManager.java,createManager,196-196,[                parent.mkdirs();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java,testFlushAtEndOfBatch,58-58,[        final BufferedReader reader = new BufferedReader(new FileReader(this.logFile));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/JsonCompleteFileAppenderTest.java,,43-43,[    public RuleChain chain = RuleChain.outerRule(files).around(init);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/MemoryMappedFileAppender.java,createAppender,170-170,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderLocationTest.java,testMemMapLocation,78-78,[        final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderLocationTest.java,,44-44,[    final String LOGFILE = "target/MemoryMappedFileAppenderLocationTest.log";],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderRemapTest.java,testMemMapExtendsIfNeeded,78-78,[        final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderRemapTest.java,,43-43,[    final String LOGFILE = "target/MemoryMappedFileAppenderRemapTest.log";],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderSimpleTest.java,testMemMapBasics,73-73,[        final BufferedReader reader = new BufferedReader(new FileReader(LOGFILE));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/MemoryMappedFileAppenderSimpleTest.java,,43-43,[    final String LOGFILE = "target/MemoryMappedFileAppenderTest.log";],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,remap,135-135,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,createManager,328-328,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,createManager,317-317,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/MemoryMappedFileManager.java,createManager,314-314,[                parent.mkdirs();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/MemoryMappedFileManagerTest.java,testRemapAfterInitialMapSizeExceeded,60-60,[            reader = new BufferedReader(new FileReader(file));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/MemoryMappedFileManagerTest.java,testRemapAfterInitialMapSizeExceeded,52-52,[            msg = ("Message " + i + "\n").getBytes();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/MemoryMappedFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,88-88,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,82-82,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,84-84,[            fos = new FileOutputStream(file);],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/ProgressConsoleTest.java,updateProgress,67-67,[            s += ".";],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java,createAppender,168-168,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,testRandomAccessConfiguration,82-82,[        final BufferedReader reader = new BufferedReader(new FileReader(this.logFile));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTests.java,,71-71,[        this.chain = RuleChain.outerRule(files).around(init);],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,write,101-101,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,234-234,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,220-220,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,217-217,[                parent.mkdirs();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,130-130,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,124-124,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,126-126,[            fos = new FileOutputStream(file);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RollingFileAppender.java,createAppender,186-186,[        if (manager == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,createAppender,208-208,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,54-54,[        BufferedReader reader = new BufferedReader(new FileReader(f));],,testRollover,81-81,[        reader = new BufferedReader(new FileReader(f));],,testRollover,88-88,[        reader = new BufferedReader(new FileReader(after1));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,56-56,[        assertTrue(line1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,83-83,[        assertTrue("after rollover only new msg", new1.contains(trigger));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,90-90,[        assertTrue("renamed file line 1", old1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,92-92,[        assertTrue("renamed file line 2", old2.contains(exceed));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,46-46,[        f.delete();],,testRollover,47-47,[        after1.delete();],,testRollover,86-86,[        f.delete();],,testRollover,96-96,[        after1.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SmtpAppender.java,createAppender,144-144,[        if (manager == null) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/net/SmtpManager.java,,53-294,[public class SmtpManager extends AbstractManager {,     private static final SMTPManagerFactory FACTORY = new SMTPManagerFactory();, ,     private final Session session;, ,     private final CyclicBuffer<LogEvent> buffer;, ,     private volatile MimeMessage message;, ,     private final FactoryData data;, ,     protected SmtpManager(final String name, final Session session, final MimeMessage message,,                           final FactoryData data) {,         super(name);,         this.session = session;,         this.message = message;,         this.data = data;,         this.buffer = new CyclicBuffer<LogEvent>(LogEvent.class, data.numElements);,     }, ,     public void add(final LogEvent event) {,         buffer.add(event);,     }, ,     public static SmtpManager getSMTPManager(final String to, final String cc, final String bcc,,                                              final String from, final String replyTo,,                                              final String subject, String protocol, final String host,,                                              final int port, final String username, final String password,,                                              final boolean isDebug, final String filterName, final int numElements) {,         if (Strings.isEmpty(protocol)) {,             protocol = "smtp";,         }, ,         final StringBuilder sb = new StringBuilder();,         if (to != null) {,             sb.append(to);,         },         sb.append(':');,         if (cc != null) {,             sb.append(cc);,         },         sb.append(':');,         if (bcc != null) {,             sb.append(bcc);,         },         sb.append(':');,         if (from != null) {,             sb.append(from);,         },         sb.append(':');,         if (replyTo != null) {,             sb.append(replyTo);,         },         sb.append(':');,         if (subject != null) {,             sb.append(subject);,         },         sb.append(':');,         sb.append(protocol).append(':').append(host).append(':').append("port").append(':');,         if (username != null) {,             sb.append(username);,         },         sb.append(':');,         if (password != null) {,             sb.append(password);,         },         sb.append(isDebug ? ":debug:" : "::");,         sb.append(filterName);, ,         final String name = "SMTP:" + NameUtil.md5(sb.toString());, ,         return getManager(name, FACTORY, new FactoryData(to, cc, bcc, from, replyTo, subject,,             protocol, host, port, username, password, isDebug, numElements));,     }, ,     /**,      * Send the contents of the cyclic buffer as an e-mail message.,      * @param layout The layout for formatting the events.,      * @param appendEvent The event that triggered the send.,      */,     public void sendEvents(final Layout<?> layout, final LogEvent appendEvent) {,         if (message == null) {,             connect();,         },         try {,             final LogEvent[] priorEvents = buffer.removeAll();,             // LOG4J-310: log appendEvent even if priorEvents is empty, ,             final byte[] rawBytes = formatContentToBytes(priorEvents, appendEvent, layout);, ,             final String contentType = layout.getContentType();,             final String encoding = getEncoding(rawBytes, contentType);,             final byte[] encodedBytes = encodeContentToBytes(rawBytes, encoding);, ,             final InternetHeaders headers = getHeaders(contentType, encoding);,             final MimeMultipart mp = getMimeMultipart(encodedBytes, headers);, ,             sendMultipartMessage(message, mp);,         } catch (final MessagingException e) {,             LOGGER.error("Error occurred while sending e-mail notification.", e);,             throw new LoggingException("Error occurred while sending email", e);,         } catch (final IOException e) {,             LOGGER.error("Error occurred while sending e-mail notification.", e);,             throw new LoggingException("Error occurred while sending email", e);,         } catch (final RuntimeException e) {,             LOGGER.error("Error occurred while sending e-mail notification.", e);,             throw new LoggingException("Error occurred while sending email", e);,         },     }, ,     protected byte[] formatContentToBytes(final LogEvent[] priorEvents, final LogEvent appendEvent,,                                           final Layout<?> layout) throws IOException {,         final ByteArrayOutputStream raw = new ByteArrayOutputStream();,         writeContent(priorEvents, appendEvent, layout, raw);,         return raw.toByteArray();,     }, ,     private void writeContent(final LogEvent[] priorEvents, final LogEvent appendEvent, final Layout<?> layout,,                               final ByteArrayOutputStream out),         throws IOException {,         writeHeader(layout, out);,         writeBuffer(priorEvents, appendEvent, layout, out);,         writeFooter(layout, out);,     }, ,     protected void writeHeader(final Layout<?> layout, final OutputStream out) throws IOException {,         final byte[] header = layout.getHeader();,         if (header != null) {,             out.write(header);,         },     }, ,     protected void writeBuffer(final LogEvent[] priorEvents, final LogEvent appendEvent, final Layout<?> layout,,                                final OutputStream out) throws IOException {,         for (final LogEvent priorEvent : priorEvents) {,             final byte[] bytes = layout.toByteArray(priorEvent);,             out.write(bytes);,         }, ,         final byte[] bytes = layout.toByteArray(appendEvent);,         out.write(bytes);,     }, ,     protected void writeFooter(final Layout<?> layout, final OutputStream out) throws IOException {,         final byte[] footer = layout.getFooter();,         if (footer != null) {,             out.write(footer);,         },     }, ,     protected String getEncoding(final byte[] rawBytes, final String contentType) {,         final DataSource dataSource = new ByteArrayDataSource(rawBytes, contentType);,         return MimeUtility.getEncoding(dataSource);,     }, ,     protected byte[] encodeContentToBytes(final byte[] rawBytes, final String encoding),         throws MessagingException, IOException {,         final ByteArrayOutputStream encoded = new ByteArrayOutputStream();,         encodeContent(rawBytes, encoding, encoded);,         return encoded.toByteArray();,     }, ,     protected void encodeContent(final byte[] bytes, final String encoding, final ByteArrayOutputStream out),         throws MessagingException, IOException {,         final OutputStream encoder = MimeUtility.encode(out, encoding);,         encoder.write(bytes);,         encoder.close();,     }, ,     protected InternetHeaders getHeaders(final String contentType, final String encoding) {,         final InternetHeaders headers = new InternetHeaders();,         headers.setHeader("Content-Type", contentType + "; charset=UTF-8");,         headers.setHeader("Content-Transfer-Encoding", encoding);,         return headers;,     }, ,     protected MimeMultipart getMimeMultipart(final byte[] encodedBytes, final InternetHeaders headers),         throws MessagingException {,         final MimeMultipart mp = new MimeMultipart();,         final MimeBodyPart part = new MimeBodyPart(headers, encodedBytes);,         mp.addBodyPart(part);,         return mp;,     }, ,     protected void sendMultipartMessage(final MimeMessage message, final MimeMultipart mp) throws MessagingException {,         synchronized (message) {,             message.setContent(mp);,             message.setSentDate(new Date());,             Transport.send(message);,         },     }, ,     /**,      * Factory data.,      */,     private static class FactoryData {,         private final String to;,         private final String cc;,         private final String bcc;,         private final String from;,         private final String replyto;,         private final String subject;,         private final String protocol;,         private final String host;,         private final int port;,         private final String username;,         private final String password;,         private final boolean isDebug;,         private final int numElements;, ,         public FactoryData(final String to, final String cc, final String bcc, final String from, final String replyTo,,                            final String subject, final String protocol, final String host, final int port,,                            final String username, final String password, final boolean isDebug, final int numElements) {,             this.to = to;,             this.cc = cc;,             this.bcc = bcc;,             this.from = from;,             this.replyto = replyTo;,             this.subject = subject;,             this.protocol = protocol;,             this.host = host;,             this.port = port;,             this.username = username;,             this.password = password;,             this.isDebug = isDebug;,             this.numElements = numElements;,         },     }, ,     private synchronized void connect() {,         if (message != null) {,             return;,         },         try {,             message = new MimeMessageBuilder(session).setFrom(data.from).setReplyTo(data.replyto),                 .setRecipients(Message.RecipientType.TO, data.to).setRecipients(Message.RecipientType.CC, data.cc),                 .setRecipients(Message.RecipientType.BCC, data.bcc).setSubject(data.subject).getMimeMessage();,         } catch (final MessagingException e) {,             LOGGER.error("Could not set SmtpAppender message options.", e);,             message = null;,         },     }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testTcpAppenderNoWait,203-203,[        } catch (final Exception ex) {],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testTcpAppender,107-142,[        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "tcp", null, 0, "-1",,                 "false", "Test", null, null, null, null, null, null);,         appender.start();, ,         // set appender on root and set level to debug,         root.addAppender(appender);,         root.setAdditive(false);,         root.setLevel(Level.DEBUG);,         String tcKey = "UUID";,         String expectedUuidStr = UUID.randomUUID().toString();,         ThreadContext.put(tcKey, expectedUuidStr);,         ThreadContext.push(expectedUuidStr);,         final String expectedExMsg = "This is a test";,         try {,             root.debug("This is a test message");,             final Throwable child = new LoggingException(expectedExMsg);,             root.error("Throwing an exception", child);,             root.debug("This is another test message");,         } finally {,             ThreadContext.remove(tcKey);,             ThreadContext.pop();,         },         Thread.sleep(250);,         LogEvent event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("This is a test message"));,         assertTrue("Message not delivered via TCP", tcpCount > 0);,         assertEquals(expectedUuidStr, event.getContextMap().get(tcKey));,         event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("Throwing an exception"));,         assertTrue("Message not delivered via TCP", tcpCount > 1);,         assertEquals(expectedUuidStr, event.getContextStack().pop());,         assertNotNull(event.getThrownProxy());,         assertEquals(expectedExMsg, event.getThrownProxy().getMessage());,     }],,testTCPAppender,52-56,[        initTCPTestEnvironment(null);, ,         sendAndCheckLegacyBSDMessage("This is a test message");,         sendAndCheckLegacyBSDMessage("This is a test message 2");,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testUdpAppender,155-168,[        final SocketAppender appender = SocketAppender.createAppender("localhost", PORT, "udp", null, 0, "-1",,                 "false", "Test", null, null, null, null, null, null);,         appender.start();, ,         // set appender on root and set level to debug,         root.addAppender(appender);,         root.setAdditive(false);,         root.setLevel(Level.DEBUG);,         root.debug("This is a udp message");,         final LogEvent event = list.poll(3, TimeUnit.SECONDS);,         assertNotNull("No event retrieved", event);,         assertTrue("Incorrect event", event.getMessage().getFormattedMessage().equals("This is a udp message"));,         assertTrue("Message not delivered via UDP", udpCount > 0);,     }],,testUDPAppender,75-80,[        initUDPTestEnvironment("bsd");, ,         sendAndCheckLegacyBSDMessage("This is a test message");,         root.removeAppender(appender);,         appender.stop();,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,99-99,[        tcpCount = 0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,100-100,[        udpCount = 0;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,261-261,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,235-235,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,shutdown,220-220,[            thread.interrupt();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,138-138,[            syslogServer.wait(timeOutInMs);],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,138-138,[            syslogServer.wait(timeOutInMs);],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/appender/TlsSyslogFrame.java,equals,60-60,[        return super.equals(frame);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/TlsSyslogFrameTest.java,getByteRepresentation,54-54,[        final byte[] representation = frame.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,52-52,[        final BufferedReader reader = new BufferedReader(new FileReader(file));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,46-46,[        file.delete();],,testFlushAtEndOfBatch,58-58,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlNoEvents,89-89,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchema,77-77,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchemaThrowable,63-63,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaNoEvents,66-66,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaSimple,54-54,[        file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,53-53,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,47-47,[        f.delete();],,testFlushAtEndOfBatch,65-65,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,53-53,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,47-47,[        f.delete();],,testFlushAtEndOfBatch,63-63,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,55-55,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,49-49,[        f.delete();],,testFlushAtEndOfBatch,67-67,[            f.delete();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java,,107-107,[        return this.running;],,,65-65,[                this.running = true;],,,95-95,[                this.running = false;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,137-137,[            final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,134-134,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,179-179,[        final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,176-176,[        final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,146-146,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,148-148,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,150-150,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,151-151,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,152-152,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,153-153,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,154-154,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,155-155,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,156-156,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,157-157,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,158-158,[                    resultSet.getString("message"));],,testDataSourceConfig,159-159,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,160-160,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,162-162,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,164-164,[            verify(dataSource);],,testDataSourceConfig,166-166,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,167-167,[        }],,testDataSourceConfig,168-168,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,145-145,[            final Statement statement = this.connection.createStatement();],,testDataSourceConfig,146-146,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,148-148,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,150-150,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,151-151,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,152-152,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,153-153,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,154-154,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,155-155,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,156-156,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,157-157,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,158-158,[                    resultSet.getString("message"));],,testDataSourceConfig,159-159,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,160-160,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,162-162,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,164-164,[            verify(dataSource);],,testDataSourceConfig,166-166,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,167-167,[        }],,testDataSourceConfig,168-168,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,188-188,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,190-190,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,192-192,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,193-193,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,194-194,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,195-195,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,196-196,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,197-197,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,198-198,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,199-199,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,200-200,[                resultSet.getString("message"));],,testFactoryMethodConfig,201-201,[        assertEquals("The exception column is not correct (1).", Strings.EMPTY,],,testFactoryMethodConfig,202-202,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,204-204,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,206-206,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,207-207,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,208-208,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,209-209,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,210-210,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,211-211,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,212-212,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,213-213,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,214-214,[                resultSet.getString("message"));],,testFactoryMethodConfig,215-215,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,216-216,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,218-218,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,219-219,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,187-187,[        final Statement statement = this.connection.createStatement();],,testFactoryMethodConfig,188-188,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,190-190,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,192-192,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,193-193,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,194-194,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,195-195,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,196-196,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,197-197,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,198-198,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,199-199,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,200-200,[                resultSet.getString("message"));],,testFactoryMethodConfig,201-201,[        assertEquals("The exception column is not correct (1).", Strings.EMPTY,],,testFactoryMethodConfig,202-202,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,204-204,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,206-206,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,207-207,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,208-208,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,209-209,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,210-210,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,211-211,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,212-212,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,213-213,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,214-214,[                resultSet.getString("message"));],,testFactoryMethodConfig,215-215,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,216-216,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,218-218,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,219-219,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,145-145,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,187-187,[        final Statement statement = this.connection.createStatement();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSourceTest.java,testDataSource,124-124,[        this.context.bind(this.jndiURL, dataSource);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,createConnectionSource,96-96,[            } catch (final Exception e) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jdbc/JdbcAppender.java,createAppender,99-99,[        if (manager == null) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/logging/log4j/core/appender/db/jdbc/JdbcDatabaseManager.java,connectAndStart,78-78,[            this.statement = this.connection.prepareStatement(this.sqlStatement);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,getConfigConnection,40-40,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,newConnection,45-45,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,getConfigConnection,41-41,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j;ifexists=true", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,newConnection,46-46,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,99-99,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,96-96,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,161-161,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,158-158,[            final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,110-110,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,112-112,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,114-114,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,115-115,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,116-116,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,117-117,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,118-118,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,119-119,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,120-120,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,121-121,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,123-123,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,125-125,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,126-126,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,127-127,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,128-128,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,129-129,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,130-130,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,131-131,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,134-134,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,136-136,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,137-137,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,138-138,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,139-139,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,140-140,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,141-141,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,142-142,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,143-143,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,145-145,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,147-147,[            this.tearDown();],,testBaseJpaEntityAppender,148-148,[        }],,testBaseJpaEntityAppender,149-149,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,109-109,[            final Statement statement = this.connection.createStatement();],,testBaseJpaEntityAppender,110-110,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,112-112,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,114-114,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,115-115,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,116-116,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,117-117,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,118-118,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,119-119,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,120-120,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,121-121,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,123-123,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,125-125,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,126-126,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,127-127,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,128-128,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,129-129,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,130-130,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,131-131,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,134-134,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,136-136,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,137-137,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,138-138,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,139-139,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,140-140,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,141-141,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,142-142,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,143-143,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,145-145,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,147-147,[            this.tearDown();],,testBaseJpaEntityAppender,148-148,[        }],,testBaseJpaEntityAppender,149-149,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,172-172,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,174-174,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,176-176,[            long date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,177-177,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,178-178,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,179-179,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,180-180,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,181-181,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,182-182,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,183-183,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,185-185,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,187-187,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,188-188,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,189-189,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,190-190,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,191-191,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,192-192,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,193-193,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,196-196,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,198-198,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,199-199,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,200-200,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,201-201,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,202-202,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,203-203,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,204-204,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,205-205,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,207-207,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,209-209,[            this.tearDown();],,testBasicJpaEntityAppender,210-210,[        }],,testBasicJpaEntityAppender,211-211,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,171-171,[            final Statement statement = this.connection.createStatement();],,testBasicJpaEntityAppender,172-172,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,174-174,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,176-176,[            long date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,177-177,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,178-178,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,179-179,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,180-180,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,181-181,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,182-182,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,183-183,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,185-185,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,187-187,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,188-188,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,189-189,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,190-190,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,191-191,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,192-192,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,193-193,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,196-196,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,198-198,[            date = resultSet.getLong("timemillis");],,testBasicJpaEntityAppender,199-199,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,200-200,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,201-201,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,202-202,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,203-203,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,204-204,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,205-205,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,207-207,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,209-209,[            this.tearDown();],,testBasicJpaEntityAppender,210-210,[        }],,testBasicJpaEntityAppender,211-211,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,109-109,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,171-171,[            final Statement statement = this.connection.createStatement();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JpaAppender.java,createAppender,114-114,[            if (manager == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,commitAndClose,118-118,[            if (this.transaction != null && this.transaction.isActive()) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JpaDatabaseManager.java,writeInternal,102-102,[            if (this.transaction != null && this.transaction.isActive()) {],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,36-36,[        final Connection connection = DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,38-38,[        Statement statement = connection.createStatement();],,setUpConnection,39-39,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,38-38,[        Statement statement = connection.createStatement();],,setUpConnection,45-45,[        statement = connection.createStatement();],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,40-40,[        final Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,42-42,[        Statement statement = connection.createStatement();],,setUpConnection,43-43,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,42-42,[        Statement statement = connection.createStatement();],,setUpConnection,49-49,[        statement = connection.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java,,62-62,[            return OBJECT_MAPPER.readValue(s, new TypeReference<Map<String, String>>() { });],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java,,64-64,[            list = ContextMapJsonAttributeConverter.OBJECT_MAPPER.readValue(s, new TypeReference<List<String>>() { });],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvert01,46-46,[        final String converted = this.converter.convertToDatabaseColumn(message);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullOrBlankToEntityAttribute,64-64,[        assertNull("The converted attribute should be null (1).", this.converter.convertToEntityAttribute(null));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullToDatabaseColumn,59-59,[        assertNull("The converted value should be null.", this.converter.convertToDatabaseColumn(null));],,
STYLE,DMI_USELESS_SUBSTRING,org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java,convertString,75-75,[                fileName = parenthesisContents.substring(0);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,<clinit>,47-47,[            THROWABLE_CAUSE.setAccessible(true);],,<clinit>,49-49,[            THROWABLE_MESSAGE.setAccessible(true);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,167-167,[                        THROWABLE_MESSAGE.set(throwable, cause);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,201-201,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,218-218,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,179-179,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,234-234,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,226-226,[        } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java,getStackTrace,91-91,[            returnValue += "\tat " + element.toString() + '\n';],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/appender/mom/JmsManager.java,,41-136,[public class JmsManager extends AbstractManager {, ,     private static final Logger LOGGER = StatusLogger.getLogger();, ,     private static final JmsManagerFactory FACTORY = new JmsManagerFactory();, ,     private final JndiManager jndiManager;,     private final Connection connection;,     private final Session session;,     private final Destination destination;, ,     private JmsManager(final String name, final JndiManager jndiManager, final String connectionFactoryName,,                        final String destinationName, final String username, final String password),         throws NamingException, JMSException {,         super(name);,         this.jndiManager = jndiManager;,         final ConnectionFactory connectionFactory = this.jndiManager.lookup(connectionFactoryName);,         if (username != null && password != null) {,             this.connection = connectionFactory.createConnection(username, password);,         } else {,             this.connection = connectionFactory.createConnection();,         },         this.session = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);,         this.destination = this.jndiManager.lookup(destinationName);,         this.connection.start();,     }, ,     /**,      * Gets a JmsManager using the specified configuration parameters.,      *,      * @param name                  The name to use for this JmsManager.,      * @param jndiManager           The JndiManager to look up JMS information through.,      * @param connectionFactoryName The binding name for the {@link javax.jms.ConnectionFactory}.,      * @param destinationName       The binding name for the {@link javax.jms.Destination}.,      * @param username              The username to connect with or {@code null} for no authentication.,      * @param password              The password to use with the given username or {@code null} for no authentication.,      * @return The JmsManager as configured.,      */,     public static JmsManager getJmsManager(final String name, final JndiManager jndiManager,,                                            final String connectionFactoryName, final String destinationName,,                                            final String username, final String password) {,         final JmsConfiguration configuration = new JmsConfiguration(jndiManager, connectionFactoryName, destinationName,,             username, password);,         return FACTORY.createManager(name, configuration);,     }, ,     /**,      * Creates a MessageConsumer on this Destination using the current Session.,      *,      * @return A MessageConsumer on this Destination.,      * @throws JMSException,      */,     public MessageConsumer createMessageConsumer() throws JMSException {,         return this.session.createConsumer(this.destination);,     }, ,     /**,      * Creates a MessageProducer on this Destination using the current Session.,      *,      * @return A MessageProducer on this Destination.,      * @throws JMSException,      */,     public MessageProducer createMessageProducer() throws JMSException {,         return this.session.createProducer(this.destination);,     }, ,     /**,      * Creates a TextMessage or ObjectMessage from a Serializable object. For instance, when using a text-based,      * {@link org.apache.logging.log4j.core.Layout} such as {@link org.apache.logging.log4j.core.layout.PatternLayout},,      * the {@link org.apache.logging.log4j.core.LogEvent} message will be serialized to a String. When using a,      * layout such as {@link org.apache.logging.log4j.core.layout.SerializedLayout}, the LogEvent message will be,      * serialized as a Java object.,      *,      * @param object The LogEvent or String message to wrap.,      * @return A new JMS message containing the provided object.,      * @throws JMSException,      */,     public Message createMessage(final Serializable object) throws JMSException {,         if (object instanceof String) {,             return this.session.createTextMessage((String) object);,         },         return this.session.createObjectMessage(object);,     }, ,     @Override,     protected void releaseSub() {,         try {,             this.session.close();,         } catch (final JMSException ignored) {,         },         try {,             this.connection.close();,         } catch (final JMSException ignored) {,         },         this.jndiManager.release();,     }],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/mom/JmsAppenderIT.java,testLogToQueue,86-86,[            appender.append(event);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/logging/log4j/core/appender/mom/JmsAppenderIT.java,awaitAndAssertAllMessagesConsumed,122-122,[            countDownLatch.await(5, TimeUnit.SECONDS);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java,valueOf,139-139,[            if (op == null) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/AppenderRef.java,,35-81,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final String ref;,     private final Level level;,     private final Filter filter;, ,     private AppenderRef(final String ref, final Level level, final Filter filter) {,         this.ref = ref;,         this.level = level;,         this.filter = filter;,     }, ,     public String getRef() {,         return ref;,     }, ,     public Level getLevel() {,         return level;,     }, ,     public Filter getFilter() {,         return filter;,     }, ,     @Override,     public String toString() {,         return ref;,     }, ,     /**,      * Create an Appender reference.,      * @param ref The name of the Appender.,      * @param level The Level to filter against.,      * @param filter The filter(s) to use.,      * @return The name of the Appender.,      */,     @PluginFactory,     public static AppenderRef createAppenderRef(,             @PluginAttribute("ref") final String ref,,             @PluginAttribute("level") final Level level,,             @PluginElement("Filter") final Filter filter) {, ,         if (ref == null) {,             LOGGER.error("Appender references must contain a reference");,             return null;,         },         return new AppenderRef(ref, level, filter);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java,testFilter,105-105,[        assertTrue("Events were generated", list == null || list.isEmpty());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeAscending,219-219,[                        toRenameBase.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeDescending,327-327,[                        toRenameBase.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java,,53-64,[        public MyRollingManager(final TriggeringPolicy policy, final RolloverStrategy strategy) {,             super("testfile", "target/rolling1/test1-%i.log.gz", new ByteArrayOutputStream(),,                 false, 0, System.currentTimeMillis(), policy, strategy, null, null, 8192);,         }, ,         public void setFileTime(final long timestamp) {,             this.timestamp = timestamp;,         }, ,         @Override,         public long getFileTime() {,             return timestamp;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,94-94,[            for (final File file : files) {],,deleteDir,93-93,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,95-95,[                file.delete();],,deleteDir,97-97,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,74-74,[            for (final File file : files) {],,deleteDir,73-73,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,75-75,[                file.delete();],,deleteDir,77-77,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,82-82,[            for (final File file : files) {],,deleteDir,81-81,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,83-83,[                file.delete();],,deleteDir,85-85,[            dir.delete();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,,51-51,[    }).around(ctx);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,,46-50,[    public RuleChain chain = RuleChain.outerRule(new ExternalResource() {,         @Override,         protected void before() throws Throwable {,             deleteDir();,         }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,83-83,[            for (final File file : files) {],,deleteDir,82-82,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,84-84,[                file.delete();],,deleteDir,86-86,[            dir.delete();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java,testAccessManager,47-47,[        manager.getRolloverStrategy();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/appender/rolling/RollingFileAppenderAccessTest.java,testAccessManager,48-48,[        manager.getTriggeringPolicy();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,102-102,[        return initialTime;],,,113-113,[                initialTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,94-94,[        return size;],,,85-85,[        size += length;],,,112-112,[                size = 0;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createFileAfterRollover,122-122,[        final OutputStream os = new FileOutputStream(getFileName(), isAppend());],,createFileAfterRollover,123-123,[        if (getBufferSize() > 0) { // negative buffer size means no buffering],,createFileAfterRollover,126-126,[            setOutputStream(os);],,createFileAfterRollover,128-128,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,303-303,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,306-306,[                file.createNewFile();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,write,111-111,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,178-178,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,174-174,[                parent.mkdirs();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,deleteDir,114-114,[            for (final File file : files) {],,deleteDir,113-113,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerHeaderFooterTest.java,deleteDir,115-115,[                file.delete();],,deleteDir,117-117,[            dir.delete();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testConfigurableBufferSize,121-121,[                file.getName(), Strings.EMPTY, os, append, flushNow, bufferSize, triggerSize, time,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_dataExceedingBufferSize,94-94,[                file.getName(), Strings.EMPTY, os, append, flushNow, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE, triggerSize, time,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_multiplesOfBufferSize,63-63,[                file.getName(), Strings.EMPTY, os, append, flushNow, RollingRandomAccessFileManager.DEFAULT_BUFFER_SIZE, triggerSize, time,],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/action/AbstractAction.java,,90-90,[        return complete;],,,70-70,[            complete = true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,copyFile,130-130,[            srcStream = new FileInputStream(source);],,copyFile,131-131,[            destStream = new FileOutputStream(destination);],,copyFile,136-136,[            if (srcChannel != null) {],,copyFile,137-137,[                srcChannel.close();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,execute,100-100,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,copyFile,122-122,[            destination.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,execute,83-83,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,execute,111-111,[                source.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testEmpty,71-71,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testNoParent,85-85,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testRename1,55-55,[        final PrintStream pos = new PrintStream(file);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteDir,112-112,[            for (final File file : files) {],,deleteDir,111-111,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteFiles,123-123,[            for (final File file : files) {],,deleteFiles,122-122,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,beforeClass,39-39,[        file.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteDir,113-113,[                file.delete();],,deleteDir,115-115,[            dir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,deleteFiles,124-124,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/action/FileRenameActionTest.java,testNoParent,99-99,[                dest.delete();],,testNoParent,100-100,[                file.delete();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,execute,94-94,[            final FileInputStream fis = new FileInputStream(source);],,execute,95-95,[            final FileOutputStream fos = new FileOutputStream(destination);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,execute,103-103,[            final FileInputStream fis = new FileInputStream(source);],,execute,104-104,[            final FileOutputStream fos = new FileOutputStream(destination);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java,cleanupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppender2Test.java,setupClass,52-52,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppenderTest.java,cleanupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JsonRoutingAppenderTest.java,setupClass,52-52,[        file.delete();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/appender/routing/Route.java,,32-111,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final Node node;,     private final String appenderRef;,     private final String key;, ,     private Route(final Node node, final String appenderRef, final String key) {,         this.node = node;,         this.appenderRef = appenderRef;,         this.key = key;,     }, ,     /**,      * Returns the Dynamic Appender Node.,      * @return The Node.,      */,     public Node getNode() {,         return node;,     }, ,     /**,      * Returns the appender reference.,      * @return The Appender reference.,      */,     public String getAppenderRef() {,         return appenderRef;,     }, ,     /**,      * Returns the key for this Route.,      * @return the key for this Route.,      */,     public String getKey() {,         return key;,     }, ,     @Override,     public String toString() {,         final StringBuilder sb = new StringBuilder("Route(");,         sb.append("type=");,         if (appenderRef != null) {,             sb.append("static Reference=").append(appenderRef);,         } else if (node != null) {,             sb.append("dynamic - type=").append(node.getName());,         } else {,             sb.append("invalid Route");,         },         if (key != null) {,             sb.append(" key='").append(key).append('\'');,         } else {,             sb.append(" default");,         },         sb.append(')');,         return sb.toString();,     }, ,     /**,      * Create the Route.,      * @param appenderRef The Appender reference.,      * @param key The key.,      * @param node The Node.,      * @return A Route.,      */,     @PluginFactory,     public static Route createRoute(,             @PluginAttribute("ref") final String appenderRef,,             @PluginAttribute("key") final String key,,             @PluginNode final Node node) {,         if (node != null && node.hasChildren()) {,             if (appenderRef != null) {,                 LOGGER.error("A route cannot be configured with an appender reference and an appender definition");,                 return null;,             },         } else {,             if (appenderRef == null) {,                 LOGGER.error("A route must specify an appender reference or an appender definition");,                 return null;,             },         },         return new Route(node, appenderRef, key);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/appender/routing/Routes.java,,32-92,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final String pattern;,     private final Route[] routes;, ,     private Routes(final String pattern, final Route... routes) {,         this.pattern = pattern;,         this.routes = routes;,     }, ,     /**,      * Returns the pattern.,      * @return the pattern.,      */,     public String getPattern() {,         return pattern;,     }, ,     /**,      * Returns the array of Route elements.,      * @return an array of Route elements.,      */,     public Route[] getRoutes() {,         return routes;,     }, ,     @Override,     public String toString() {,         final StringBuilder sb = new StringBuilder("{");,         boolean first = true;,         for (final Route route : routes) {,             if (!first) {,                 sb.append(',');,             },             first = false;,             sb.append(route.toString());,         },         sb.append('}');,         return sb.toString();, ,     }, ,     /**,      * Create the Routes.,      * @param pattern The pattern.,      * @param routes An array of Route elements.,      * @return The Routes container.,      */,     @PluginFactory,     public static Routes createRoutes(,             @PluginAttribute("pattern") final String pattern,,             @PluginElement("Routes") final Route... routes) {,         if (pattern == null) {,             LOGGER.error("A pattern is required");,             return null;,         },         if (routes == null || routes.length == 0) {,             LOGGER.error("No routes configured");,             return null;,         },         return new Routes(pattern, routes);],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,,49-49,[    @Rule],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,routingTest,66-66,[        final List<LogEvent> list = app.getEvents();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,tearDown,59-59,[        this.app.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,after,58-58,[        listAppender1.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,routingTest,77-77,[        assertNotNull("No events generated", listAppender1.getEvents());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,after,59-59,[        listAppender2.clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingAppenderWithJndiTest.java,routingTest,85-85,[        assertNotNull("No events generated", listAppender2.getEvents());],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,,46-46,[    @Rule],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,routingTest,65-65,[        final List<LogEvent> list = app.getEvents();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLogger.java,calculateRingBufferSize,146-146,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLogger.java,initInfoForExecutorThread,160-160,[        executor.submit(new Runnable(){],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,,59-360,[class AsyncLoggerConfigHelper {, ,     private static final int MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN = 200;,     private static final int SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS = 50;,     private static final int RINGBUFFER_MIN_SIZE = 128;,     private static final int RINGBUFFER_DEFAULT_SIZE = 256 * 1024;,     private static final Logger LOGGER = StatusLogger.getLogger();, ,     private static ThreadFactory threadFactory = new DaemonThreadFactory("AsyncLoggerConfig-");,     private static volatile Disruptor<Log4jEventWrapper> disruptor;,     private static ExecutorService executor;, ,     private static volatile int count = 0;,     private static ThreadLocal<Boolean> isAppenderThread = new ThreadLocal<Boolean>();, ,     /**,      * Factory used to populate the RingBuffer with events. These event objects,      * are then re-used during the life of the RingBuffer.,      */,     private static final EventFactory<Log4jEventWrapper> FACTORY = new EventFactory<Log4jEventWrapper>() {,         @Override,         public Log4jEventWrapper newInstance() {,             return new Log4jEventWrapper();,         },     };, ,     /**,      * Object responsible for passing on data to a specific RingBuffer event.,      */,     private final EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig> translator ,             = new EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig>() {, ,         @Override,         public void translateTo(final Log4jEventWrapper ringBufferElement, final long sequence, ,                 final LogEvent logEvent, final AsyncLoggerConfig loggerConfig) {,             ringBufferElement.event = logEvent;,             ringBufferElement.loggerConfig = loggerConfig;,         },     };, ,     private final AsyncLoggerConfig asyncLoggerConfig;, ,     public AsyncLoggerConfigHelper(final AsyncLoggerConfig asyncLoggerConfig) {,         this.asyncLoggerConfig = asyncLoggerConfig;,         claim();,     }, ,     private static synchronized void initDisruptor() {,         if (disruptor != null) {,             LOGGER.trace("AsyncLoggerConfigHelper not starting new disruptor, using existing object. Ref count is {}.", count);,             return;,         },         LOGGER.trace("AsyncLoggerConfigHelper creating new disruptor. Ref count is {}.", count);,         final int ringBufferSize = calculateRingBufferSize();,         final WaitStrategy waitStrategy = createWaitStrategy();,         executor = Executors.newSingleThreadExecutor(threadFactory);,         initThreadLocalForExecutorThread();,         disruptor = new Disruptor<Log4jEventWrapper>(FACTORY, ringBufferSize,,                 executor, ProducerType.MULTI, waitStrategy);,         final EventHandler<Log4jEventWrapper>[] handlers = new Log4jEventWrapperHandler[] {//,         new Log4jEventWrapperHandler() };,         final ExceptionHandler errorHandler = getExceptionHandler();,         disruptor.handleExceptionsWith(errorHandler);,         disruptor.handleEventsWith(handlers);, ,         LOGGER.debug(,                 "Starting AsyncLoggerConfig disruptor with ringbuffer size={}, waitStrategy={}, exceptionHandler={}...",,                 disruptor.getRingBuffer().getBufferSize(), waitStrategy.getClass().getSimpleName(), errorHandler);,         disruptor.start();,     }, ,     private static WaitStrategy createWaitStrategy() {,         final String strategy = System,                 .getProperty("AsyncLoggerConfig.WaitStrategy");,         LOGGER.debug("property AsyncLoggerConfig.WaitStrategy={}", strategy);,         if ("Sleep".equals(strategy)) {,             return new SleepingWaitStrategy();,         } else if ("Yield".equals(strategy)) {,             return new YieldingWaitStrategy();,         } else if ("Block".equals(strategy)) {,             return new BlockingWaitStrategy();,         },         LOGGER.debug("disruptor event handler uses BlockingWaitStrategy");,         return new BlockingWaitStrategy();,     }, ,     private static int calculateRingBufferSize() {,         int ringBufferSize = RINGBUFFER_DEFAULT_SIZE;,         final String userPreferredRBSize = System.getProperty(,                 "AsyncLoggerConfig.RingBufferSize",,                 String.valueOf(ringBufferSize));,         try {,             int size = Integer.parseInt(userPreferredRBSize);,             if (size < RINGBUFFER_MIN_SIZE) {,                 size = RINGBUFFER_MIN_SIZE;,                 LOGGER.warn(,                         "Invalid RingBufferSize {}, using minimum size {}.",,                         userPreferredRBSize, RINGBUFFER_MIN_SIZE);,             },             ringBufferSize = size;,         } catch (final Exception ex) {,             LOGGER.warn("Invalid RingBufferSize {}, using default size {}.",,                     userPreferredRBSize, ringBufferSize);,         },         return Integers.ceilingNextPowerOfTwo(ringBufferSize);,     }, ,     private static ExceptionHandler getExceptionHandler() {,         final String cls = System,                 .getProperty("AsyncLoggerConfig.ExceptionHandler");,         if (cls == null) {,             return null;,         },         try {,             @SuppressWarnings("unchecked"),             final Class<? extends ExceptionHandler> klass = (Class<? extends ExceptionHandler>) Class,                     .forName(cls);,             final ExceptionHandler result = klass.newInstance();,             return result;,         } catch (final Exception ignored) {,             LOGGER.debug(,                     "AsyncLoggerConfig.ExceptionHandler not set: error creating ",                             + cls + ": ", ignored);,             return null;,         },     }, ,     /**,      * RingBuffer events contain all information necessary to perform the work,      * in a separate thread.,      */,     private static class Log4jEventWrapper {,         private AsyncLoggerConfig loggerConfig;,         private LogEvent event;, ,         /**,          * Release references held by ring buffer to allow objects to be,          * garbage-collected.,          */,         public void clear() {,             loggerConfig = null;,             event = null;,         },     }, ,     /**,      * EventHandler performs the work in a separate thread.,      */,     private static class Log4jEventWrapperHandler implements,             SequenceReportingEventHandler<Log4jEventWrapper> {,         private static final int NOTIFY_PROGRESS_THRESHOLD = 50;,         private Sequence sequenceCallback;,         private int counter;, ,         @Override,         public void setSequenceCallback(final Sequence sequenceCallback) {,             this.sequenceCallback = sequenceCallback;,         }, ,         @Override,         public void onEvent(final Log4jEventWrapper event, final long sequence,,                 final boolean endOfBatch) throws Exception {,             event.event.setEndOfBatch(endOfBatch);,             event.loggerConfig.asyncCallAppenders(event.event);,             event.clear();, ,             // notify the BatchEventProcessor that the sequence has progressed.,             // Without this callback the sequence would not be progressed,             // until the batch has completely finished.,             if (++counter > NOTIFY_PROGRESS_THRESHOLD) {,                 sequenceCallback.set(sequence);,                 counter = 0;,             },         },     }, ,     /**,      * Increases the reference count and creates and starts a new Disruptor and,      * associated thread if none currently exists.,      * ,      * @see #release(),      */,     synchronized static void claim() {,         count++;,         initDisruptor();,     }, ,     /**,      * Decreases the reference count. If the reference count reached zero, the,      * Disruptor and its associated thread are shut down and their references,      * set to {@code null}.,      */,     synchronized static void release() {,         if (--count > 0) {,             LOGGER.trace("AsyncLoggerConfigHelper: not shutting down disruptor: ref count is {}.", count);,             return;,         },         final Disruptor<Log4jEventWrapper> temp = disruptor;,         if (temp == null) {,             LOGGER.trace("AsyncLoggerConfigHelper: disruptor already shut down: ref count is {}. (Resetting to zero.)",,                     count);,             count = 0; // ref count must not be negative or #claim() will not work correctly,             return; // disruptor was already shut down by another thread,         },         LOGGER.trace("AsyncLoggerConfigHelper: shutting down disruptor: ref count is {}.", count);, ,         // Must guarantee that publishing to the RingBuffer has stopped,         // before we call disruptor.shutdown(),         disruptor = null; // client code fails with NPE if log after stop = OK, ,         // Calling Disruptor.shutdown() will wait until all enqueued events are fully processed,,         // but this waiting happens in a busy-spin. To avoid (postpone) wasting CPU,,         // we sleep in short chunks, up to 10 seconds, waiting for the ringbuffer to drain.,         for (int i = 0; hasBacklog(temp) && i < MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN; i++) {,             try {,                 Thread.sleep(SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS); // give up the CPU for a while,             } catch (final InterruptedException e) { // ignored,             },         },         temp.shutdown(); // busy-spins until all events currently in the disruptor have been processed,         executor.shutdown(); // finally, kill the processor thread,         executor = null; // release reference to allow GC,     }, ,     /**,      * Returns {@code true} if the specified disruptor still has unprocessed events.,      */,     private static boolean hasBacklog(final Disruptor<?> disruptor) {,         final RingBuffer<?> ringBuffer = disruptor.getRingBuffer();,         return !ringBuffer.hasAvailableCapacity(ringBuffer.getBufferSize());,     }, ,     /**,      * Initialize the threadlocal that allows us to detect Logger.log() calls ,      * initiated from the appender thread, which may cause deadlock when the ,      * RingBuffer is full. (LOG4J2-471),      */,     private static void initThreadLocalForExecutorThread() {,         executor.submit(new Runnable() {,             @Override,             public void run() {,                 isAppenderThread.set(Boolean.TRUE);,             },         });,     }, ,     /**,      * If possible, delegates the invocation to {@code callAppenders} to another,      * thread and returns {@code true}. If this is not possible (if it detects,      * that delegating to another thread would cause deadlock because the,      * current call to Logger.log() originated from the appender thread and the,      * ringbuffer is full) then this method does nothing and returns {@code false}.,      * It is the responsibility of the caller to process the event when this,      * method returns {@code false}.,      * ,      * @param event the event to delegate to another thread,      * @return {@code true} if delegation was successful, {@code false} if the,      *          calling thread needs to process the event itself,      */,     public boolean callAppendersFromAnotherThread(final LogEvent event) {,         // TODO refactor to reduce size to <= 35 bytecodes to allow JVM to inline it,         final Disruptor<Log4jEventWrapper> temp = disruptor;,         if (temp == null) { // LOG4J2-639,             LOGGER.fatal("Ignoring log event after log4j was shut down");,             return true;,         }, ,         // LOG4J2-471: prevent deadlock when RingBuffer is full and object,         // being logged calls Logger.log() from its toString() method,         if (isAppenderThread.get() == Boolean.TRUE //,                 && temp.getRingBuffer().remainingCapacity() == 0) {, ,             // bypass RingBuffer and invoke Appender directly,             return false;,         },         // LOG4J2-639: catch NPE if disruptor field was set to null after our check above,         try {,             LogEvent logEvent = event;,             if (event instanceof RingBufferLogEvent) {,                 logEvent = ((RingBufferLogEvent) event).createMemento();,             },             logEvent.getMessage().getFormattedMessage(); // LOG4J2-763: ask message to freeze parameters, ,             // Note: do NOT use the temp variable above!,             // That could result in adding a log event to the disruptor after it was shut down,,             // which could cause the publishEvent method to hang and never return.,             disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);,         } catch (final NullPointerException npe) {,             LOGGER.fatal("Ignoring log event after log4j was shut down.");,         },         return true;,     }, ,     /**,      * Creates and returns a new {@code RingBufferAdmin} that instruments the,      * ringbuffer of this {@code AsyncLoggerConfig}.,      * ,      * @param contextName name of the {@code LoggerContext},      * @param loggerConfigName name of the logger config,      */,     public RingBufferAdmin createRingBufferAdmin(final String contextName, final String loggerConfigName) {,         return RingBufferAdmin.forAsyncLoggerConfig(disruptor.getRingBuffer(), contextName, loggerConfigName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,callAppenders,114-114,[        if (!helper.callAppendersFromAnotherThread(event)) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,createRingBufferAdmin,155-155,[        return helper.createRingBufferAdmin(contextName, getName());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigAutoFlushTest.java,testFlushAtEndOfBatch,50-50,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigAutoFlushTest.java,testFlushAtEndOfBatch,53-53,[        f.delete();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,callAppendersFromAnotherThread,328-328,[        if (isAppenderThread.get() == Boolean.TRUE //],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,calculateRingBufferSize,159-159,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,initThreadLocalForExecutorThread,297-297,[        executor.submit(new Runnable() {],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,release,274-274,[                Thread.sleep(SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS); // give up the CPU for a while],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,,89-96,[            = new EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig>() {, ,         @Override,         public void translateTo(final Log4jEventWrapper ringBufferElement, final long sequence, ,                 final LogEvent logEvent, final AsyncLoggerConfig loggerConfig) {,             ringBufferElement.event = logEvent;,             ringBufferElement.loggerConfig = loggerConfig;,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,50-50,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,54-54,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,58-58,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,62-62,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,62-62,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,54-54,[        f.delete();],,testAsyncLogUsesCachedThreadName,68-68,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,63-63,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,55-55,[        f.delete();],,testAsyncLogUsesCurrentThreadName,69-69,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerThreadContextTest.java,testAsyncLogWritesToLog,65-65,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerThreadContextTest.java,testAsyncLogWritesToLog,55-55,[        f.delete();],,testAsyncLogWritesToLog,68-68,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTimestampMessageTest.java,testAsyncLogWritesToLog,75-75,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTimestampMessageTest.java,testAsyncLogWritesToLog,70-70,[        f.delete();],,testAsyncLogWritesToLog,78-78,[        f.delete();],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/message/SimpleMessage.java,equals,71-80,[        if (this == o) {,             return true;,         },         if (o == null || getClass() != o.getClass()) {,             return false;,         }, ,         final SimpleMessage that = (SimpleMessage) o;, ,         return !(message != null ? !message.equals(that.message) : that.message != null);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncRootReloadTest.java,testLog4j2_807,53-53,[        configFile.setLastModified(System.currentTimeMillis());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEvent.java,execute,100-100,[        asyncLogger.actualAsyncLog(this);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,onEvent,50-50,[            sequenceCallback.set(sequence);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testCreateMementoReturnsCopy,156-156,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetLevelReturnsOffIfNullLevelSet,61-61,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMessageReturnsNonNullMessage,80-80,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testGetMillisReturnsConstructorMillisForNormalMessage,99-99,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,118-118,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,118-118,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,118-118,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/async/RingBufferLogEventTest.java,testSerializationDeserialization,118-118,[        evt.setValues(null, loggerName, marker, fqcn, level, data, t, map,],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,65-65,[        new File("perftest.log").createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,64-64,[        new File("perftest.log").delete();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/MtPerfTest.java,runTestAndPrintResult,68-68,[        PerfTest.throughput = false;],,runTestAndPrintResult,72-72,[        PerfTest.throughput = true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTest.java,forceRemap,135-135,[        final int bytesPerLine = 0 + IPerfTestRunner.THROUGHPUT_MSG.getBytes().length;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTest.java,reportResult,164-164,[            final FileWriter writer = new FileWriter(file, true);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,97-97,[        System.exit(0);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,90-90,[                throughput = true;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,87-87,[                verbose = true;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,forceRemap,134-149,[        final int LINESEP = System.getProperty("line.separator").getBytes(Charset.defaultCharset()).length;,         final int bytesPerLine = 0 + IPerfTestRunner.THROUGHPUT_MSG.getBytes().length;,         final int bytesWritten = bytesPerLine * linesPerIteration * iterations;,         final int threshold = 1073741824; // magic number: defined in perf9MMapLocation.xml,         ,         int todo = threshold - bytesWritten;,         if (todo <= 0) {,             return;,         },         final byte[] filler = new byte[4096];,         Arrays.fill(filler, (byte) 'X');,         final String str = new String(filler, Charset.defaultCharset());,         do {,             runner.log(str);,         } while ((todo -= (4096 + LINESEP)) > 0);,     }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,303-303,[            final FileReader reader = new FileReader(config.temp);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,307-307,[            config.temp.delete();],,main,317-317,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,351-351,[                gc.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,353-353,[            new File("gc.log").renameTo(gc);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,364-364,[                        process.getInputStream()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,363-363,[                final BufferedReader in = new BufferedReader(new InputStreamReader(],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,370-370,[                } catch (final Exception ignored) {],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,compareTo,129-129,[            return Long.signum(other.stats.averageOpsPerSec - stats.averageOpsPerSec);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,main,172-172,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,88-96,[                    switch (i) {,                     case 0:,                         sb.append('\t').append((long) stats.avgLatency);,                         break;,                     case 1:,                         sb.append('\t').append((long) stats.latency99Pct);,                         break;,                     case 2:,                         sb.append('\t').append((long) stats.latency99_99Pct);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,85-85,[                final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,87-87,[                    final Stats stats = sub.get(subKey);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,117-117,[            final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,119-119,[                final Stats stats = sub.get(subKey);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,,153-165,[        return new Comparator<String>() {,             List<String> expected = Arrays.asList("1 thread", "2 threads",,                     "4 threads", "8 threads", "16 threads", "32 threads",,                     "64 threads");, ,             @Override,             public int compare(final String o1, final String o2) {,                 final int i1 = expected.indexOf(o1);,                 final int i2 = expected.indexOf(o2);,                 if (i1 < 0 || i2 < 0) {,                     return o1.compareTo(o2);,                 },                 return i1 - i2;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j1.java,runLatencyTest,51-51,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j2.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLogback.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/AbstractConfiguration.java,createAdvertiser,295-295,[            attributes.put("content", new String(buffer));],,
STYLE,NS_DANGEROUS_NON_SHORT_CIRCUIT,org/apache/logging/log4j/core/config/AbstractConfiguration.java,stop,214-214,[        if (root instanceof AsyncLoggerConfig & !alreadyStopped.contains(root)) { // LOG4J2-807],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/AbstractConfiguration.java,addLoggerAppender,532-532,[        appenders.putIfAbsent(appender.getName(), appender);],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/logging/log4j/core/config/AbstractConfiguration.java,stop,189-189,[            if (selector instanceof AsyncLoggerContextSelector) { // all loggers are async],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,cleanupClass,64-64,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,setupClass,43-43,[        file.delete();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInputFromString,327-327,[        } catch (final Exception ex) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getSupportedTypes,481-481,[            return null;],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/core/config/ConfigurationSource.java,getURL,128-128,[        return url;],,getUrl,137-137,[        return url;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/ConfigurationTest.java,testLogToFile,128-128,[        final BufferedReader in = new BufferedReader(new FileReader(this.logFileName));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/ConfigurationTest.java,,75-75,[        rules = RuleChain.outerRule(new CleanFiles(logFileName)).around(this.init);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/CustomConfigurationTest.java,setUp,63-63,[        new File(LOG_FILE).delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/FileConfigurationMonitor.java,,100-108,[        public ReconfigurationWorker(final ConfigurationListener listener, final Reconfigurable reconfigurable) {,             this.listener = listener;,             this.reconfigurable = reconfigurable;,         }, ,         @Override,         public void run() {,             listener.onChange(reconfigurable);,         }],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/FileOutputTest.java,,41-41,[    public RuleChain rules = RuleChain.outerRule(new CleanFiles(STATUS_LOG)).around(new InitialLoggerContext(CONFIG));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/LoggerConfig.java,waitForCompletion,381-381,[                        noLogEvents.await(retries + 1, TimeUnit.SECONDS);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/AppenderRef.java,,35-81,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final String ref;,     private final Level level;,     private final Filter filter;, ,     private AppenderRef(final String ref, final Level level, final Filter filter) {,         this.ref = ref;,         this.level = level;,         this.filter = filter;,     }, ,     public String getRef() {,         return ref;,     }, ,     public Level getLevel() {,         return level;,     }, ,     public Filter getFilter() {,         return filter;,     }, ,     @Override,     public String toString() {,         return ref;,     }, ,     /**,      * Create an Appender reference.,      * @param ref The name of the Appender.,      * @param level The Level to filter against.,      * @param filter The filter(s) to use.,      * @return The name of the Appender.,      */,     @PluginFactory,     public static AppenderRef createAppenderRef(,             @PluginAttribute("ref") final String ref,,             @PluginAttribute("level") final Level level,,             @PluginElement("Filter") final Filter filter) {, ,         if (ref == null) {,             LOGGER.error("Appender references must contain a reference");,             return null;,         },         return new AppenderRef(ref, level, filter);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/Property.java,,32-76,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final String name;,     private final String value;, ,     private Property(final String name, final String value) {,         this.name = name;,         this.value = value;,     }, ,     /**,      * Returns the property name.,      * @return the property name.,      */,     public String getName() {,         return name;,     }, ,     /**,      * Returns the property value.,      * @return the value of the property.,      */,     public String getValue() {,         return value;,     }, ,     /**,      * Create a Property.,      * @param key The key.,      * @param value The value.,      * @return A Property.,      */,     @PluginFactory,     public static Property createProperty(,             @PluginAttribute("name") final String key,,             @PluginValue("value") final String value) {,         if (key == null) {,             LOGGER.error("Property key cannot be null");,         },         return new Property(key, value);,     }, ,     @Override,     public String toString() {,         return name + '=' + value;],,
BAD_PRACTICE,SE_COMPARATOR_SHOULD_BE_SERIALIZABLE,org/apache/logging/log4j/core/config/OrderComparator.java,,28-57,[public class OrderComparator implements Comparator<Class<?>> {, ,     private static final Comparator<Class<?>> INSTANCE = new OrderComparator();, ,     /**,      * Returns a singleton instance of this class.,      *,      * @return the singleton for this class.,      */,     public static Comparator<Class<?>> getInstance() {,         return INSTANCE;,     }, ,     @Override,     public int compare(final Class<?> lhs, final Class<?> rhs) {,         final Order lhsOrder = Assert.requireNonNull(lhs, "lhs").getAnnotation(Order.class);,         final Order rhsOrder = Assert.requireNonNull(rhs, "rhs").getAnnotation(Order.class);,         if (lhsOrder == null && rhsOrder == null) {,             // both unannotated means equal priority,             return 0;,         },         // if only one class is @Order-annotated, then prefer that one,         if (rhsOrder == null) {,             return -1;,         },         if (lhsOrder == null) {,             return 1;,         },         // larger value means lower priority,         return Integer.signum(rhsOrder.value() - lhsOrder.value());],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,35-35,[    @Rule],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,run,99-99,[            } catch (final Exception ie) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,86-103,[        private final Logger logger = LogManager.getRootLogger();,         private final int index;, ,         public LoggerThread(final int i) {,             index = i;,         },         @Override,         public void run() {,             int i = 0;,             try {,                 for (i=0; i < 30; ++i) {,                     logger.error("Thread: " + index + ", Test: " + i++);,                 },             } catch (final Exception ie) {,                 return;,             },             finished[index] = true;,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,run,121-121,[                    file.setLastModified(System.currentTimeMillis());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/ReconfigurationDeadlockTest.java,,106-124,[    private class Updater extends Thread {, ,         public volatile boolean shutdown = false;, ,         @Override,         public void run() {,             while (!shutdown) {,                 try {,                     Thread.sleep(1000);,                 } catch (final InterruptedException e) {,                     e.printStackTrace();,                 },                 // for running from IDE,                 final File file = new File("target/test-classes/reconfiguration-deadlock.xml");,                 if (file.exists()) {,                     file.setLastModified(System.currentTimeMillis());,                 },             },         }],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/TestConfigurator.java,testBadFileName,335-335,[            dir.append(element.toUpperCase());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/XIncludeTest.java,testLogToFile,129-129,[        final BufferedReader in = new BufferedReader(new FileReader(this.logFileName));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/config/XIncludeTest.java,,78-78,[        this.rules = RuleChain.outerRule(new CleanFiles(logFileName)).around(this.init);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,reconfigure,138-138,[            if (source == null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,<init>,103-103,[        } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,,257-266,[    private static class Status {,         private final JsonNode node;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final JsonNode node, final ErrorType errorType) {,             this.name = name;,             this.node = node;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/json/JsonConfiguration.java,,264-264,[            this.node = node;],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/plugins/convert/TypeConverterRegistry.java,findCompatibleConverter,99-99,[                registry.putIfAbsent(type, value);],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/plugins/convert/TypeConverterRegistry.java,findCompatibleConverter,89-89,[                registry.putIfAbsent(type, converter);],,
STYLE,DMI_HARDCODED_ABSOLUTE_FILENAME,org/apache/logging/log4j/core/config/plugins/convert/TypeConvertersTest.java,data,153-153,[                { "ASCII", Charset.forName("ASCII"), "UTF-8", Charset.class },],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginCache.java,getCategory,57-57,[        final String key = category.toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,visitType,162-162,[                entry.setKey(alias.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,visitType,131-131,[            entry.setKey(plugin.name().toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testFakePluginAliasesContainSameInformation,66-66,[            final PluginEntry fake = pluginCache.getCategory(p.category()).get(alias.toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testFakePluginFoundWithCorrectInformation,58-58,[        final PluginEntry fake = pluginCache.getCategory(p.category()).get(p.name().toLowerCase());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,testNestedPlugin,84-84,[        final PluginEntry nested = pluginCache.getCategory(p.category()).get(p.name().toLowerCase());],,testNestedPlugin,86-86,[        assertEquals(p.name().toLowerCase(), nested.getKey());],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/processor/PluginProcessorTest.java,verifyFakePluginEntry,72-72,[        assertNotNull("The plugin '" + name.toLowerCase() + "' was not found.", fake);],,verifyFakePluginEntry,74-74,[        assertEquals(name.toLowerCase(), fake.getKey());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,build,125-125,[        } catch (final Exception e) {],,build,138-138,[        } catch (final Exception e) {],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,collectPlugins,128-128,[        final String categoryLowerCase = category.toLowerCase();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginManager.java,getPluginType,102-102,[        return plugins.get(name.toLowerCase());],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/config/plugins/util/PluginManagerPackagesTest.java,test,81-81,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/config/plugins/util/PluginManagerPackagesTest.java,test,80-80,[        ctx = Configurator.initialize("Test1", "customplugin/log4j2-741.xml");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/config/plugins/util/PluginManagerPackagesTest.java,test,82-82,[        listAppender = (ListAppender) config.getAppender("List");],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,loadFromPackage,227-227,[            final String categoryLowerCase = plugin.category().toLowerCase();],,loadFromPackage,235-235,[            mainEntry.setKey(plugin.name().toLowerCase());],,loadFromPackage,250-250,[                    aliasEntry.setKey(alias.trim().toLowerCase());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,decodeCacheFiles,163-163,[            if (resources == null) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/config/plugins/validation/validators/RequiredValidatorTest.java,testNonNullValue,55-55,[        node.getAttributes().put("name", "foo");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/status/StatusConfiguration.java,parseStreamName,123-123,[        return new PrintStream(fos, true);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,reconfigure,235-235,[            if (source == null) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,,331-340,[    private static class Status {,         private final Element element;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final Element element, final ErrorType errorType) {,             this.name = name;,             this.element = element;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,,338-338,[            this.element = element;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/xml/XmlConfigurationFactory.java,,35-35,[    public static final String[] SUFFIXES = new String[] {".xml", "*"};],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/filter/BurstFilter.java,,171-217,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         @Override,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         @Override,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/filter/BurstFilter.java,,171-217,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         @Override,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         @Override,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/filter/BurstFilter.java,,171-217,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         @Override,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         @Override,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/filter/BurstFilterTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/filter/BurstFilterTest.java,test,68-68,[        List<String> msgs = app.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/filter/BurstFilterTest.java,test,66-66,[            assertTrue("Incorrect number of available slots", filter.getAvailable() < 100);],,test,72-72,[        assertTrue("Incorrect number of available slots", filter.getAvailable() < 100);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,180-180,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,180-180,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testNullLevelReplacedWithOFF,180-180,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,190-190,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,190-190,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/impl/Log4jLogEventTest.java,testTimestampGeneratedByClock,190-190,[        final Log4jLogEvent evt = new Log4jLogEvent("some.test", marker, Strings.EMPTY, NULL_LEVEL, new SimpleMessage(],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/impl/ThrowableProxy.java,toSuppressedProxies,606-606,[        return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,toCacheEntry,504-504,[            } catch (final Exception ex) {],,
BAD_PRACTICE,ISC_INSTANTIATE_STATIC_CLASS,org/apache/logging/log4j/core/impl/ThrowableProxyTest.java,testLogStackTraceWithClassThatCannotInitialize,96-96,[            final AlwaysThrowsError error = new AlwaysThrowsError();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testContainer,87-87,[        final ObjectReader fixtureReader = log4jObjectMapper.reader(Fixture.class);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testNameOnly,97-97,[        final Level actual = reader.readValue(str);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testContainer,85-85,[        final String str = writer.writeValueAsString(expected);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/jackson/LevelMixInTest.java,testNameOnly,95-95,[        final String str = writer.writeValueAsString(expected);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/jackson/ListOfMapEntryDeserializer.java,,46-46,[        final List<MapEntry> list = jp.readValueAs(new TypeReference<List<MapEntry>>() {],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/jackson/Log4jStackTraceElementDeserializer.java,deserialize,65-65,[                            lineNumber = Integer.valueOf(jp.getText().trim()).intValue();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/jackson/MutableThreadContextStackDeserializer.java,,46-46,[        final List<String> list = jp.readValueAs(new TypeReference<List<String>>() {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/jmx/LoggerContextAdmin.java,setConfigText,203-203,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/jmx/Server.java,reregisterMBeansAfterReconfigure,163-163,[        } catch (final Exception ex) {],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterContextSelector,266-266,[        final String search = String.format(pattern, escape(contextName), "*");],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterLoggerContext,230-230,[        final String search = String.format(pattern, escape(contextName), "*");],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterStatusLogger,260-260,[        final String search = String.format(pattern, escape(contextName), "*");],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerAppenders,341-341,[            final Appender appender = map.get(name);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerLoggerConfigs,324-324,[            final LoggerConfig cfg = map.get(name);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JsonLayout.java,getFooter,830-830,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JsonLayout.java,getHeader,814-814,[            return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,createPatternParser,212-212,[            return new PatternParser(config, KEY, LogEventPatternConverter.class);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/PatternLayout.java,toBytes,136-136,[        return null;],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/pattern/PatternFormatter.java,,29-75,[    public PatternFormatter(final LogEventPatternConverter converter, final FormattingInfo field) {,         this.converter = converter;,         this.field = field;,     }, ,     public void format(final LogEvent event, final StringBuilder buf) {,         final int startField = buf.length();,         converter.format(event, buf);,         field.format(startField, buf);,     }, ,     public LogEventPatternConverter getConverter() {,         return converter;,     }, ,     public FormattingInfo getFormattingInfo() {,         return field;,     }, ,     /**,      * Normally pattern formatters are not meant to handle Exceptions although few pattern formatters might.,      * <p>,      * By examining the return values for this method, the containing layout will determine whether it handles,      * throwables or not.,      * </p>,      *,      * @return true if this PatternConverter handles throwables,      */,     public boolean handlesThrowable() {,         return converter.handlesThrowable();,     }, ,     /**,      * Returns a String suitable for debugging.,      *,      * @return a String suitable for debugging.,      */,     @Override,     public String toString() {,         final StringBuilder sb = new StringBuilder();,         sb.append(super.toString());,         sb.append("[converter=");,         sb.append(converter);,         sb.append(", field=");,         sb.append(field);,         sb.append(']');,         return sb.toString();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/pattern/RegexReplacement.java,,33-82,[    private static final Logger LOGGER = StatusLogger.getLogger();, ,     private final Pattern pattern;, ,     private final String substitution;, ,     /**,      * Private constructor.,      *,      * @param pattern The Pattern.,      * @param substitution The substitution String.,      */,     private RegexReplacement(final Pattern pattern, final String substitution) {,         this.pattern = pattern;,         this.substitution = substitution;,     }, ,     /**,      * Perform the replacement.,      * @param msg The String to match against.,      * @return the replacement String.,      */,     public String format(final String msg) {,         return pattern.matcher(msg).replaceAll(substitution);,     }, ,     @Override,     public String toString() {,         return "replace(regex=" + pattern.pattern() + ", replacement=" + substitution + ')';,     }, ,     /**,      * Create a RegexReplacement.,      * @param regex The regular expression to locate.,      * @param replacement The replacement value.,      * @return A RegexReplacement.,      */,     @PluginFactory,     public static RegexReplacement createRegexReplacement(,             @PluginAttribute("regex") final Pattern regex,,             @PluginAttribute("replacement") final String replacement) {,         if (regex == null) {,             LOGGER.error("A regular expression is required for replacement");,             return null;,         },         if (replacement == null) {,             LOGGER.error("A replacement string is required to perform replacement");,         },         // FIXME: should we use Matcher.quoteReplacement() here?,         return new RegexReplacement(regex, replacement);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testHeaderFooterJavaLookup,185-185,[        final String headerStr = new String(header);],,testHeaderFooterJavaLookup,193-193,[        final String footerStr = new String(header);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testHeaderFooterThreadContext,173-173,[        assertTrue("expected \"Hello world Header\", actual \"" + new String(header) + '"',],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testMdcPattern,104-104,[        assertEquals(expectedStr, new String(result));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testRegex,114-114,[        assertEquals("org/apache/logging/log4j/core/layout/PatternLayoutTest Hello, world!", new String(result));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testSpecialChars,207-207,[        assertEquals("\\INFO\tHello, world!\n\torg.apache.logging.log4j.core.layout.PatternLayoutTest\r\n\f",],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,139-139,[        assertEquals(event1.getTimeMillis() / 1000 + " Hello, world 1!", new String(result1));],,testUnixTime,144-144,[        assertEquals(event2.getTimeMillis() / 1000 + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,123-123,[        assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));],,testUnixTime,128-128,[        assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTimeMillis,155-155,[        assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));],,testUnixTimeMillis,160-160,[        assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));],,
PERFORMANCE,DM_STRING_CTOR,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testHeaderFooterThreadContext,173-173,[        assertTrue("expected \"Hello world Header\", actual \"" + new String(header) + '"',],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,118-130,[        final PatternLayout layout = PatternLayout.newBuilder().withPattern(pattern + " %m"),                 .withConfiguration(ctx.getConfiguration()).build();,         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 1!"), null);,         final byte[] result1 = layout.toByteArray(event1);,         assertEquals(event1.getTimeMillis() + " Hello, world 1!", new String(result1));,         // System.out.println("event1=" + event1.getMillis());,         final LogEvent event2 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 2!"), null);,         final byte[] result2 = layout.toByteArray(event2);,         assertEquals(event2.getTimeMillis() + " Hello, world 2!", new String(result2));,         // System.out.println("event2=" + event2.getMillis());,     }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,67-67,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,44-44,[    static String OUTPUT_FILE = "target/output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,46-46,[    static String WITNESS_FILE = "witness/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,,43-43,[    static String msgPattern = "%m%n";],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,createPatternParser,230-230,[            return new PatternParser(config, PatternLayout.KEY, LogEventPatternConverter.class, filterClass);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/pattern/PatternFormatter.java,,29-75,[    public PatternFormatter(final LogEventPatternConverter converter, final FormattingInfo field) {,         this.converter = converter;,         this.field = field;,     }, ,     public void format(final LogEvent event, final StringBuilder buf) {,         final int startField = buf.length();,         converter.format(event, buf);,         field.format(startField, buf);,     }, ,     public LogEventPatternConverter getConverter() {,         return converter;,     }, ,     public FormattingInfo getFormattingInfo() {,         return field;,     }, ,     /**,      * Normally pattern formatters are not meant to handle Exceptions although few pattern formatters might.,      * <p>,      * By examining the return values for this method, the containing layout will determine whether it handles,      * throwables or not.,      * </p>,      *,      * @return true if this PatternConverter handles throwables,      */,     public boolean handlesThrowable() {,         return converter.handlesThrowable();,     }, ,     /**,      * Returns a String suitable for debugging.,      *,      * @return a String suitable for debugging.,      */,     @Override,     public String toString() {,         final StringBuilder sb = new StringBuilder();,         sb.append(super.toString());,         sb.append("[converter=");,         sb.append(converter);,         sb.append(", field=");,         sb.append(field);,         sb.append(']');,         return sb.toString();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,667-682,[        public FieldFormatter(final Map<String, List<PatternFormatter>> fieldMap, final boolean discardIfEmpty) {,             this.discardIfEmpty = discardIfEmpty;,             this.delegateMap = fieldMap;,         }, ,         public StructuredDataElement format(final LogEvent event) {,             final Map<String, String> map = new HashMap<String, String>();, ,             for (final Map.Entry<String, List<PatternFormatter>> entry : delegateMap.entrySet()) {,                 final StringBuilder buffer = new StringBuilder();,                 for (final PatternFormatter formatter : entry.getValue()) {,                     formatter.format(event, buffer);,                 },                 map.put(entry.getKey(), buffer.toString());,             },             return new StructuredDataElement(map, discardIfEmpty);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,587-590,[    private class NoopChecker implements ListChecker {,         @Override,         public boolean check(final String key) {,             return true;],,
BAD_PRACTICE,SE_BAD_FIELD_STORE,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,112-112,[    private final ListChecker noopChecker = new NoopChecker();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,587-590,[    private class NoopChecker implements ListChecker {,         @Override,         public boolean check(final String key) {,             return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/Rfc5424Layout.java,,691-715,[        public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {,             this.discardIfEmpty = discardIfEmpty;,             this.fields = fields;,         }, ,         boolean discard() {,             if (discardIfEmpty == false) {,                 return false;,             },             boolean foundNotEmptyValue = false;,             for (final Map.Entry<String, String> entry : fields.entrySet()) {,                 if (Strings.isNotEmpty(entry.getValue())) {,                     foundNotEmptyValue = true;,                     break;,                 },             },             return !foundNotEmptyValue;,         }, ,         void union(final Map<String, String> fields) {,             this.fields.putAll(fields);,         }, ,         Map<String, String> getFields() {,             return this.fields;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/SerializedLayout.java,,117-123,[        public PrivateObjectOutputStream(final OutputStream os) throws IOException {,             super(os);,         }, ,         @Override,         protected void writeStreamHeader() {,         }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/layout/SerializedLayoutTest.java,testSerialization,152-152,[        final FileOutputStream fos = new FileOutputStream(DAT_PATH);],,testSerialization,153-153,[        fos.write(layout.getHeader());],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/layout/SerializedLayoutTest.java,testDeserialization,163-163,[        final ObjectInputStream ois = new ObjectInputStream(fis);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XmlLayout.java,getFooter,235-235,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XmlLayout.java,getHeader,212-212,[            return null;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/lookup/ContextMapLookupTest.java,,67-67,[    }).around(context);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/lookup/ContextMapLookupTest.java,,45-48,[    public RuleChain chain = RuleChain.outerRule(new TestRule() {,         @Override,         public Statement apply(final Statement base, final Description description) {,             return new Statement() {],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,42-52,[    private class MyLogEvent extends AbstractLogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,42-52,[    private class MyLogEvent extends AbstractLogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/lookup/Interpolator.java,<init>,117-117,[            } catch (final Exception ignored) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/lookup/JndiLookupTest.java,after,50-50,[            context.close();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java,<clinit>,51-51,[        SINGLETON_STACK = new MainInputArgumentsMapLookup(MapLookup.toMap(args));],,
STYLE,UCF_USELESS_CONTROL_FLOW,org/apache/logging/log4j/core/lookup/MainInputArgumentsMapLookup.java,<clinit>,42-42,[                if ("main".equals(stackTraceElements[frame0].getMethodName())) {],,
CORRECTNESS,BSHIFT_WRONG_ADD_PRIORITY,org/apache/logging/log4j/core/net/Priority.java,getValue,70-70,[        return facility.getCode() << 3 + severity.getCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/net/SmtpManager.java,,343-349,[                return new Authenticator() {,                     private final PasswordAuthentication passwordAuthentication =,                         new PasswordAuthentication(username, password);, ,                     @Override,                     protected PasswordAuthentication getPasswordAuthentication() {,                         return passwordAuthentication;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,67-67,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,,47-47,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,67-67,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketReconnectTest.java,,50-50,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,144-144,[                    final BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,146-146,[                    if (line.equals("Shutdown")) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/net/SocketTest.java,,42-42,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/SslSocketManager.java,,81-81,[            this.connectTimeoutMillis = connectTimeoutMillis;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/SslSocketManager.java,,129-129,[        private class TlsSocketManagerFactoryException extends Exception {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/TcpSocketManager.java,,219-219,[                        connector = null;],,,121-121,[            if (connector != null && !immediateFail) {],,,122-122,[                connector.latch();],,,133-133,[                if (retry && connector == null) {],,,134-134,[                    connector = new Reconnector(this);],,,135-135,[                    connector.setDaemon(true);],,,136-136,[                    connector.setPriority(Thread.MIN_PRIORITY);],,,137-137,[                    connector.start();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/net/TcpSocketManager.java,write,124-124,[            if (socket == null) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/core/net/TcpSocketManager.java,<init>,91-91,[            connector.start();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,28-28,[        this.numberOfMessagesToReceive = numberOfMessagesToReceive;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,30-30,[        this.port = port;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,58-58,[                            final String line = new String(buffer, 0, i);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,53-53,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,run,70-70,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockTcpSyslogServer.java,shutdown,42-42,[        thread.interrupt();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,closeSockets,98-98,[            catch(final Exception e) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,shutdown,55-55,[            catch (final Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,,79-79,[        syslogReader = createTLSSyslogReader(clientSocketInputStream);],,,113-113,[                message = syslogReader.read();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/logging/log4j/core/net/mock/MockTlsSyslogServer.java,processFrames,123-123,[            this.notify();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockUdpSyslogServer.java,run,48-48,[                final String str = new String(packet.getData(), 0, packet.getLength());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockUdpSyslogServer.java,shutdown,36-36,[        thread.interrupt();],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/mom/jms/JmsQueueReceiver.java,usage,69-69,[        System.exit(1);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/mom/jms/JmsTopicReceiver.java,usage,68-68,[        System.exit(1);],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java,,59-65,[        public ThreadFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Filter.Result filter(final LogEvent event) {,             return event.getThreadName().equals(Thread.currentThread().getName()) ? onMatch : onMismatch;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/server/AbstractSocketServerTest.java,,59-65,[        public ThreadFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Filter.Result filter(final LogEvent event) {,             return event.getThreadName().equals(Thread.currentThread().getName()) ? onMatch : onMismatch;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/net/server/JsonInputStreamLogEventBridge.java,getEventIndices,59-74,[                switch (c) {,                 case EVENT_START_MARKER:,                     if (!inStr) {,                         stack++;,                     },                     break;,                 case EVENT_END_MARKER:,                     if (!inStr) {,                         stack--;,                     },                     break;,                 case JSON_STR_DELIM:,                     inStr = !inStr;,                     break;,                 case JSON_ESC:,                     inEsc = true;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/server/TcpSocketServer.java,run,74-74,[                    } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/server/UdpSocketServer.java,main,105-105,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/server/UdpSocketServer.java,,124-124,[    private final int maxBufferSize = 1024 * 65 + 1024;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/LegacyBsdTlsSyslogInputStreamReader.java,read,51-51,[                message = buffer.toString();],,read,57-57,[        message = buffer.toString();],,
CORRECTNESS,EQ_SELF_USE_OBJECT,org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,equals,208-227,[        if (config == null) {,             return false;,         }, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null) {,             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         } else {,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;,         }, ,         if (trustStoreConfig != null) {,             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         } else {,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;,         }, ,         return keyStoreEquals && trustStoreEquals;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/net/ssl/SslConfiguration.java,equals,208-227,[        if (config == null) {,             return false;,         }, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null) {,             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         } else {,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;,         }, ,         if (trustStoreConfig != null) {,             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         } else {,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;,         }, ,         return keyStoreEquals && trustStoreEquals;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/SslConfigurationTest.java,connectionFailsWithoutValidServerCertificate,54-54,[        os.write("GET config/login_verify2?".getBytes());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,buildMessage,67-67,[        final String message = messageBuffer.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,calculateNextMessageLength,89-89,[        nextMessageLength = new Integer(new String(length));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,,32-32,[    private final int lengthBufferSize = 8192;],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReader.java,,31-31,[    private final int messagePartBufferSize = 8192;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/ssl/TlsSyslogInputStreamReaderBase.java,,29-29,[        this.messageFormat = messageFormat;],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,70-94,[        if (this == obj) {,             return true;,         },         if (obj == null) {,             return false;,         },         if (!(obj instanceof StoreConfiguration)) {,             return false;,         },         final StoreConfiguration<?> other = (StoreConfiguration<?>) obj;,         if (this.location == null) {,             if (other.location != null) {,                 return false;,             },         } else if (!this.location.equals(other.location)) {,             return false;,         },         if (this.password == null) {,             if (other.password != null) {,                 return false;,             },         } else if (!this.password.equals(other.password)) {,             return false;,         },         return true;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/logging/log4j/core/osgi/BundleContextSelector.java,,40-88,[public class BundleContextSelector extends ClassLoaderContextSelector implements ContextSelector {, ,     @Override,     public LoggerContext getContext(final String fqcn, final ClassLoader loader, final boolean currentContext,,                                     final URI configLocation) {,         if (currentContext) {,             final LoggerContext ctx = ContextAnchor.THREAD_CONTEXT.get();,             if (ctx != null) {,                 return ctx;,             },             return getDefault();,         },         // it's quite possible that the provided ClassLoader may implement BundleReference which gives us a nice shortcut,         if (loader instanceof BundleReference) {,             return locateContext(((BundleReference) loader).getBundle(), configLocation);,         },         final Class<?> callerClass = ReflectionUtil.getCallerClass(fqcn);,         if (callerClass != null) {,             return locateContext(FrameworkUtil.getBundle(callerClass), configLocation);,         },         final LoggerContext lc = ContextAnchor.THREAD_CONTEXT.get();,         return lc == null ? getDefault() : lc;,     }, ,     private static LoggerContext locateContext(final Bundle bundle, final URI configLocation) {,         final String name = Assert.requireNonNull(bundle, "No Bundle provided").getSymbolicName();,         final AtomicReference<WeakReference<LoggerContext>> ref = CONTEXT_MAP.get(name);,         if (ref == null) {,             final LoggerContext context = new LoggerContext(name, bundle, configLocation);,             CONTEXT_MAP.putIfAbsent(name,,                 new AtomicReference<WeakReference<LoggerContext>>(new WeakReference<LoggerContext>(context)));,             return CONTEXT_MAP.get(name).get().get();,         },         final WeakReference<LoggerContext> r = ref.get();,         final LoggerContext ctx = r.get();,         if (ctx == null) {,             final LoggerContext context = new LoggerContext(name, bundle, configLocation);,             ref.compareAndSet(r, new WeakReference<LoggerContext>(context));,             return ref.get().get();,         },         final URI oldConfigLocation = ctx.getConfigLocation();,         if (oldConfigLocation == null && configLocation != null) {,             LOGGER.debug("Setting bundle ({}) configuration to {}", name, configLocation);,             ctx.setConfigLocation(configLocation);,         } else if (oldConfigLocation != null && configLocation != null && !configLocation.equals(oldConfigLocation)) {,             LOGGER.warn("locateContext called with URI [{}], but existing LoggerContext has URI [{}]",,                 configLocation, oldConfigLocation);,         },         return ctx;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/AnsiEscape.java,createSequence,326-326,[            } catch (final Exception ex) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/CallerInformationTest.java,,32-32,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j2-calling-class.xml");],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/DatePatternConverter.java,,254-254,[        output.append(cachedDateString);],,,251-251,[                cachedDateString = formatter.format(timestamp);],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/pattern/DatePatternConverterTest.java,,59-67,[    private class MyLogEvent extends AbstractLogEvent {,         private static final long serialVersionUID = 0;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             cal.set(Calendar.MILLISECOND, 987);,             return cal.getTimeInMillis();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/DatePatternConverterTest.java,,59-67,[    private class MyLogEvent extends AbstractLogEvent {,         private static final long serialVersionUID = 0;, ,         @Override,         public long getTimeMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             cal.set(Calendar.MILLISECOND, 987);,             return cal.getTimeInMillis();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/ExtendedThrowableTest.java,,37-37,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j-throwablefilter.xml");],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/ExtendedThrowableTest.java,testException,50-50,[        final List<String> msgs = app.getMessages();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/LevelPatternConverter.java,newInstance,70-70,[            if (pair == null || pair.length != 2) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,542-542,[        } catch (final Exception ex) {],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,49-49,[    private final String mdcMsgPattern1 = "%m : %X%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,50-50,[    private final String mdcMsgPattern2 = "%m : %X{key1}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,51-51,[    private final String mdcMsgPattern3 = "%m : %X{key2}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,52-52,[    private final String mdcMsgPattern4 = "%m : %X{key3}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,53-53,[    private final String mdcMsgPattern5 = "%m : %X{key1},%X{key2},%X{key3}%n";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,46-46,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,43-43,[    static String OUTPUT_FILE   = "output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,44-44,[    static String WITNESS_FILE  = "witness/PatternParser";],,
PERFORMANCE,BX_BOXING_IMMEDIATELY_UNBOXED,org/apache/logging/log4j/core/pattern/PatternParserTest2.java,testParseDontConvertBackslashes,58-58,[        parse(pattern, convert, buf, cal.getTime(), new Integer(3));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/pattern/PatternParserTest2.java,testParseDontConvertBackslashes,58-58,[        parse(pattern, convert, buf, cal.getTime(), new Integer(3));],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,,43-43,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,setUp,47-47,[        app = context.getListAppender("List").clear();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RegexReplacementTest.java,setUp,48-48,[        app2 = context.getListAppender("List2").clear();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java,,68-68,[        toAppendTo.append(relative);],,,65-65,[                relative = Long.toString(timestamp - startTime);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/RootThrowableTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/RootThrowableTest.java,setUp,42-42,[        app = context.getListAppender("List").clear();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/StyleConverterTest.java,testReplacement,56-56,[        final List<String> msgs = app.getMessages();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/pattern/StyleConverterTest.java,testReplacement,54-54,[        logger.error(this.getClass().getName());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,formatSubShortOption,101-101,[            if (trace !=null && trace.length > 0) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/core/pattern/ThrowableTest.java,,38-38,[    public static InitialLoggerContext context = new InitialLoggerContext(CONFIG);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/pattern/ThrowableTest.java,setUp,42-42,[        app = context.getListAppender("List").clear();],,
MALICIOUS_CODE,DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED,org/apache/logging/log4j/core/selector/ClassLoaderContextSelectorTest.java,setUp,36-36,[        loader1 = new TestClassLoader();],,setUp,37-37,[        loader2 = new TestClassLoader();],,setUp,38-38,[        loader3 = new TestClassLoader();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/selector/a/Logging1.java,,25-25,[    static Logger logger = LogManager.getLogger();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/selector/b/Logging2.java,,25-25,[    static Logger logger = LogManager.getLogger();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/selector/c/Logging3.java,,25-25,[    static Logger logger = LogManager.getLogger();],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/tools/Generate.java,generate,477-477,[            System.exit(-1);],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/tools/Generate.java,generateSource,523-523,[        sb.append(String.format("}%n", ""));],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/tools/Generate.java,parse,463-463,[                    System.exit(-1);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/tools/GenerateCustomLoggerTest.java,testGenerateSource,65-65,[        final FileOutputStream out = new FileOutputStream(f);],,testGenerateSource,66-66,[        out.write(src.getBytes(Charset.defaultCharset()));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/tools/GenerateCustomLoggerTest.java,testGenerateSource,64-64,[        f.getParentFile().mkdirs();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/tools/GenerateExtendedLoggerTest.java,testGenerateSource,66-66,[        final FileOutputStream out = new FileOutputStream(f);],,testGenerateSource,67-67,[        out.write(src.getBytes(Charset.defaultCharset()));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/tools/GenerateExtendedLoggerTest.java,testGenerateSource,65-65,[        f.getParentFile().mkdirs();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/ClockFactory.java,createClock,85-85,[        } catch (final Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,60-60,[        final BufferedReader in1 = new BufferedReader(new FileReader(file1));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,62-62,[            open(testClass, file2)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,outputFile,114-114,[        final BufferedReader in1 = new BufferedReader(new InputStreamReader(is));],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/util/CyclicBuffer.java,,92-92,[        return 0 == numElems;],,,62-62,[        if (numElems < ring.length) {],,,63-63,[            numElems++;],,,74-74,[        final T[] array = makeArray(clazz, numElems);],,,76-76,[        while (numElems > 0) {],,,77-77,[            numElems--;],,
BAD_PRACTICE,SE_BAD_FIELD_STORE,org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,,135-135,[        shutdownHookRef = new WeakReference<Thread>(thread);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/NameUtil.java,md5,44-44,[            digest.update(string.getBytes());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/NameUtil.java,md5,55-55,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,<clinit>,43-43,[        catch (final Exception ignored) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,start,72-72,[            catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,stop,88-88,[            catch (final Exception e) {],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/logging/log4j/core/util/ReflectionUtil.java,makeAccessible,72-72,[            field.setAccessible(true);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/util/ShutdownCallbackRegistryTest.java,,66-77,[            final Cancellable cancellable = new Cancellable() {,                 @Override,                 public void cancel() {,                     LOGGER.debug("Cancelled shutdown callback: {}", callback);,                     CALLBACKS.remove(this);,                 }, ,                 @Override,                 public void run() {,                     LOGGER.debug("Called shutdown callback: {}", callback);,                     callback.run();,                 }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/util/Throwables.java,getSuppressed,101-101,[                return null;],,getSuppressed,104-104,[        return null;],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/core/util/Transform.java,escapeJsonControlCharacters,147-149,[                buf.append(escBs);,                 buf.append(ch);,                 break;],,escapeJsonControlCharacters,151-153,[                buf.append(escBs);,                 buf.append(ch);,                 break;],,escapeJsonControlCharacters,155-157,[                buf.append(escBs);,                 buf.append(ch);,                 break;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,269-269,[        if (manager == null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,201-201,[                } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/flume/appender/AbstractFlumeManager.java,,28-29,[        super(name);,     }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,testNotConnected,300-300,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getBody,400-400,[        return new String(baos.toByteArray());],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,234-234,[        if (rpcClient != null) {],,,241-241,[        rpcClient = null;],,,236-236,[                rpcClient.close();],,,165-165,[        if (rpcClient == null) {],,,169-169,[        if (rpcClient != null) {],,,171-171,[                rpcClient.append(event);],,,166-166,[            rpcClient = connect(agents, retries, connectTimeoutMillis, requestTimeoutMillis);],,,173-173,[                rpcClient.close();],,,174-174,[                rpcClient = null;],,,139-139,[        if (rpcClient == null) {],,,143-143,[        if (rpcClient != null) {],,,140-140,[            rpcClient = connect(agents, retries, connectTimeoutMillis, requestTimeoutMillis);],,,148-148,[                rpcClient.close();],,,149-149,[                rpcClient = null;],,,146-146,[                rpcClient.appendBatch(events.getEvents());],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,47-47,[    private final int current = 0;],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,223-223,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,getBody,206-206,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,215-215,[            for (final File child : files) {],,deleteFiles,214-214,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,setUp,105-105,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,teardown,114-114,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,testFailover,187-187,[            final Event event = alternate.poll();],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,248-248,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,getBody,231-231,[            return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,240-240,[            for (final File child : files) {],,deleteFiles,239-239,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,setUp,105-105,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,387-387,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,getBody,370-370,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,379-379,[            for (final File child : files) {],,deleteFiles,378-378,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,setUp,107-107,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,,298-311,[        public WriterThread(final int start, final int stop) {,             this.start = start;,             this.stop = stop;,         }, ,         @Override,         public void run() {,             for (int i = start; i < stop; ++i) {,                 final StructuredDataMessage msg = new StructuredDataMessage(,                     "Test", "Test Multiple " + i, "Test");,                 msg.put("counter", Integer.toString(i));,                 EventLogger.logEvent(msg);,             },         }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,send,215-215,[        } catch (final Exception ex) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,<init>,128-128,[        this.worker.start();],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,424-424,[                    database = null;],,
STYLE,DLS_DEAD_LOCAL_STORE_OF_NULL,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,428-428,[                    environment = null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,422-422,[                if (database != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,422-422,[                if (database != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,455-455,[                                } catch (final Exception ex) {],,createManager,469-469,[            } catch (final Exception ex) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,,864-864,[            return isOpen;],,,868-868,[            isOpen = true;],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,waitForOpen,877-877,[            wait(timeout);],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,549-549,[                                        status = cursor.getFirst(key, data, LockMode.RMW);],,run,568-568,[                                        if (cursor != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,627-627,[                    } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,sendBatch,784-784,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,821-821,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,810-810,[                dais.read(bytes, 0, length);],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,164-164,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,147-147,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,156-156,[            for (final File child : files) {],,deleteFiles,155-155,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,setUp,103-103,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,141-147,[        final ByteArrayOutputStream baos = new ByteArrayOutputStream();,         final InputStream is = new GZIPInputStream(new ByteArrayInputStream(event.getBody()));,         int n = 0;,         while (-1 != (n = is.read())) {,             baos.write(n);,         },         return new String(baos.toByteArray());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,112-112,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,111-111,[        primary.stop();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testClose_HasRemainingData,52-52,[            assertEquals(FIRST, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testClose_HasRemainingData,47-47,[        this.out.write(FIRST.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testClose_NoRemainingData,61-61,[            assertEquals("", this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_ByteArray,90-90,[            assertEquals("byte[]\n", this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_ByteArray,84-84,[        final byte[] bytes = "byte[]".getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_ByteArray_Offset_Length,105-105,[            assertEquals("byte[]".substring(middle, bytes.length) + '\n', this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_ByteArray_Offset_Length,99-99,[        final String right = new String(bytes, middle, length);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_ByteArray_Offset_Length,96-96,[        final byte[] bytes = "byte[]".getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_IgnoresWindowsNewline,117-117,[            assertEquals(FIRST + "\r\n" + LAST, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_IgnoresWindowsNewline,111-111,[        this.out.write(FIRST.getBytes());],,testWrite_IgnoresWindowsNewline,112-112,[        this.out.write("\r\n".getBytes());],,testWrite_IgnoresWindowsNewline,113-113,[        this.out.write(LAST.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_Int,130-130,[            assertEquals("int" + '\n', this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_Int,123-123,[        for (final byte b : "int".getBytes()) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_MultipleLines,139-139,[            assertEquals(FIRST + '\n' + LAST + '\n', this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/AbstractLoggerOutputStreamTest.java,testWrite_MultipleLines,136-136,[        this.out.write((FIRST + '\n' + LAST + '\n').getBytes());],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/io/AbstractStreamTest.java,,44-44,[    public static InitialLoggerContext ctx = new InitialLoggerContext("log4j2-streams-unit-test.xml");],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/io/ByteStreamLogger.java,extractMessages,95-103,[                switch (this.msgBuf[pos]) {,                 case '\r':,                     this.msg.append(this.msgBuf, off, pos - off);,                     off = pos + 1;,                     break;,                 case '\n':,                     this.msg.append(this.msgBuf, off, pos - off);,                     off = pos + 1;,                     log(fqcn);],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/io/CharStreamLogger.java,put,76-82,[                    switch (c) {,                     case '\r':,                     case '\n':,                         this.msg.append(str, start, pos);,                         start = pos + 1;,                         if (c == '\n') {,                             log(fqcn);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/io/IoBuilderCallerInfoTesting.java,,41-41,[    public static InitialLoggerContext ctx = new InitialLoggerContext("log4j2-streams-calling-info.xml");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerBufferedInputStreamCallerInfoTest.java,setupStreams,64-64,[        final InputStream srcInputStream = new ByteArrayInputStream("a\nb\nc\nd".getBytes());],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerBufferedInputStreamCallerInfoTest.java,readBytes,48-48,[        this.logIn.read(new byte[2]);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerBufferedInputStreamCallerInfoTest.java,readBytesOffsetLen,56-56,[        this.logIn.read(new byte[2], 0, 2);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerBufferedReaderCallerInfoTest.java,readCbuf,50-50,[        this.logReader.read(new char[2]);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerBufferedReaderCallerInfoTest.java,readCbufOffset,58-58,[        this.logReader.read(new char[2], 0, 2);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/io/LoggerBufferedReaderTest.java,testReadLine,43-43,[        assertEquals("second line", LAST, this.bufferedReader.readLine());],,testReadLine,41-41,[        assertEquals("first line", FIRST, this.bufferedReader.readLine());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamCallerInfoTest.java,setupStreams,51-51,[        final InputStream srcInputStream = new ByteArrayInputStream("a\nb\nc\nd".getBytes());],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamCallerInfoTest.java,read,37-37,[        this.logIn.read(new byte[2]);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamCallerInfoTest.java,read,40-40,[        this.logIn.read(new byte[2], 0, 2);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamTest.java,createStream,44-44,[        this.wrapped = new ByteArrayInputStream((FIRST + "\r\n" + LAST).getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testClose_NoRemainingData,60-60,[        this.wrapped = new ByteArrayInputStream((FIRST + '\n').getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testRead_IgnoresWindowsNewline,98-98,[        assertEquals(FIRST + "\r\n" + LAST, this.read.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testRead_MultipleLines,128-128,[        assertEquals(FIRST + '\n' + LAST + '\n', this.read.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testRead_MultipleLines,121-121,[        this.wrapped = new ByteArrayInputStream((FIRST + "\n" + LAST + '\n').getBytes());],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testClose_HasRemainingData,52-52,[        this.in.read(bytes);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testClose_NoRemainingData,64-64,[        this.in.read(bytes);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testRead_ByteArray,77-77,[        this.in.read(bytes);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerInputStreamTest.java,testRead_ByteArray_Offset_Length,88-88,[        this.in.read(bytes);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerOutputStreamCallerInfoTest.java,write,41-41,[        this.logOut.write("b\n".getBytes());],,write,44-44,[        this.logOut.write("c\n".getBytes(), 0, 2);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamCallerInfoTest.java,write_bytes,131-131,[        this.logOut.write("b\n".getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamCallerInfoTest.java,write_bytes_offset,137-137,[        this.logOut.write("c\n".getBytes(), 0, 2);],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/logging/log4j/io/LoggerPrintStreamCallerInfoTest.java,print_printf,104-104,[        this.logOut.printf("a\n");],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/logging/log4j/io/LoggerPrintStreamCallerInfoTest.java,print_printf_locale,110-110,[        this.logOut.printf(Locale.getDefault(), "a\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testFormat,49-49,[        assertEquals("[" + FIRST + "]" + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_CharacterArray,78-78,[        assertEquals(FIRST + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_Object,105-105,[        assertEquals(FIRST + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_String,114-114,[        assertEquals(FIRST + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_boolean,58-58,[        assertEquals("true" + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_char,69-69,[        assertEquals(FIRST + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_int,87-87,[        assertEquals("12" + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrint_long,96-96,[        assertEquals("12" + NEWLINE, this.wrapped.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/io/LoggerPrintStreamTest.java,testPrintf,123-123,[        assertEquals("<<<" + FIRST + ">>>" + NEWLINE, this.wrapped.toString());],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/logging/log4j/io/LoggerPrintWriterCallerInfoTest.java,print_printf,104-104,[        this.logOut.printf("a\n");],,
BAD_PRACTICE,VA_FORMAT_STRING_USES_NEWLINE,org/apache/logging/log4j/io/LoggerPrintWriterCallerInfoTest.java,print_printf_locale,110-110,[        this.logOut.printf(Locale.getDefault(), "a\n");],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/io/LoggerPrintWriterJdbcH2Test.java,newConnection,56-56,[        return DriverManager.getConnection(H2_URL, USER_ID, PASSWORD);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/io/LoggerPrintWriterJdbcH2Test.java,,37-37,[    public static InitialLoggerContext context = new InitialLoggerContext("log4j2-jdbc-driver-manager.xml");],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/io/LoggerPrintWriterJdbcH2Test.java,testDataSource_setLogWriter,80-80,[            conn.prepareCall("select 1");],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderCallerInfoTest.java,read,37-37,[        this.logReader.read(new char[2]);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderCallerInfoTest.java,read,40-40,[        this.logReader.read(new char[2], 0, 2);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderTest.java,testClose_HasRemainingData,53-53,[        this.reader.read(chars);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderTest.java,testClose_NoRemainingData,67-67,[        this.reader.read(chars);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderTest.java,testRead_CharArray,80-80,[        this.reader.read(chars);],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/io/LoggerReaderTest.java,testRead_CharArray_Offset_Length,91-91,[        this.reader.read(chars);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGui.java,installLookAndFeel,329-329,[        } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/jmx/gui/Client.java,,55-186,[    public Client(final JMXConnector connector) throws MalformedObjectNameException, IOException {,         this.connector = Assert.requireNonNull(connector, "JMXConnector");,         this.connector.connect();,         this.connection = connector.getMBeanServerConnection();,         init();,     }, ,     /**,      * Constructs a new {@code Client} object and creates proxies for all known,      * remote MBeans.,      *,      * @param mBeanServerConnection the MBean server connection through which to,      *            communicate with the remote mbeans,      * @throws MalformedObjectNameException if a problem occurred identifying,      *             one of the remote mbeans,      * @throws IOException if the connection failed,      */,     public Client(final MBeanServerConnection mBeanServerConnection) throws MalformedObjectNameException, IOException {,         this.connection = mBeanServerConnection;,         init();,     }, ,     private void init() throws MalformedObjectNameException, IOException {,     }, ,     private Set<ObjectName> find(final String pattern) throws JMException, IOException {,         final ObjectName search = new ObjectName(String.format(pattern, "*"));,         final Set<ObjectName> result = connection.queryNames(search, null);,         return result;,     }, ,     /**,      * Returns a list of proxies that allow operations to be performed on the,      * remote {@code LoggerContextAdminMBean}s.,      *,      * @return a list of proxies to the remote {@code LoggerContextAdminMBean}s,      * @throws IOException If an I/O error occurred,      * @throws JMException If a management error occurred,      */,     public List<LoggerContextAdminMBean> getLoggerContextAdmins() throws JMException, IOException {,         final List<LoggerContextAdminMBean> result = new ArrayList<LoggerContextAdminMBean>();,         final Set<ObjectName> contextNames = find(LoggerContextAdminMBean.PATTERN);,         for (final ObjectName contextName : contextNames) {,             result.add(getLoggerContextAdmin(contextName));,         },         return result;,     }, ,     public LoggerContextAdminMBean getLoggerContextAdmin(final ObjectName name) {,         final LoggerContextAdminMBean ctx = JMX.newMBeanProxy(connection, //,                 name, //,                 LoggerContextAdminMBean.class, false);,         return ctx;,     }, ,     /**,      * Closes the client connection to its server. Any ongoing or new requests,      * to the MBeanServerConnection will fail.,      */,     public void close() {,         Closer.closeSilently(connector);,     }, ,     /**,      * Returns the MBean server connection through which to communicate with the,      * remote mbeans.,      *,      * @return the MBean server connection,      */,     public MBeanServerConnection getConnection() {,         return connection;,     }, ,     /**,      * Returns the {@code StatusLoggerAdminMBean} associated with the specified,      * context name, or {@code null}.,      *,      * @param contextName search key,      * @return StatusLoggerAdminMBean or null,      * @throws MalformedObjectNameException If an object name is malformed,      * @throws IOException If an I/O error occurred,      */,     public StatusLoggerAdminMBean getStatusLoggerAdmin(final String contextName),             throws MalformedObjectNameException, IOException {,         final String pattern = StatusLoggerAdminMBean.PATTERN;,         final String mbean = String.format(pattern, Server.escape(contextName));,         final ObjectName search = new ObjectName(mbean);,         final Set<ObjectName> result = connection.queryNames(search, null);,         if (result.size() == 0) {,             return null;,         },         if (result.size() > 1) {,             System.err.println("WARN: multiple status loggers found for " + contextName + ": " + result);,         },         final StatusLoggerAdminMBean proxy = JMX.newMBeanProxy(connection, //,                 result.iterator().next(), //,                 StatusLoggerAdminMBean.class, true); // notificationBroadcaster,         return proxy;,     }, ,     /**,      * Returns {@code true} if the specified {@code ObjectName} is for a,      * {@code LoggerContextAdminMBean}, {@code false} otherwise.,      *,      * @param mbeanName the {@code ObjectName} to check.,      * @return {@code true} if the specified {@code ObjectName} is for a,      *         {@code LoggerContextAdminMBean}, {@code false} otherwise,      */,     public boolean isLoggerContext(final ObjectName mbeanName) {,         return Server.DOMAIN.equals(mbeanName.getDomain()) //,                 && mbeanName.getKeyPropertyList().containsKey("type") //,                 && mbeanName.getKeyPropertyList().size() == 1;,     }, ,     /**,      * Returns the {@code ObjectName} of the {@code StatusLoggerAdminMBean},      * associated with the specified {@code LoggerContextAdminMBean}.,      *,      * @param loggerContextObjName the {@code ObjectName} of a,      *            {@code LoggerContextAdminMBean},      * @return {@code ObjectName} of the {@code StatusLoggerAdminMBean},      */,     public ObjectName getStatusLoggerObjectName(final ObjectName loggerContextObjName) {,         if (!isLoggerContext(loggerContextObjName)) {,             throw new IllegalArgumentException("Not a LoggerContext: " + loggerContextObjName);,         },         final String cxtName = loggerContextObjName.getKeyProperty("type");,         final String name = String.format(StatusLoggerAdminMBean.PATTERN, cxtName);,         try {,             return new ObjectName(name);,         } catch (final MalformedObjectNameException ex) {,             throw new IllegalStateException(name, ex);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/jmx/gui/ClientGui.java,,153-160,[        toggleButton.setAction(new AbstractAction() {,             private static final long serialVersionUID = -4214143754637722322L;, ,             @Override,             public void actionPerformed(final ActionEvent e) {,                 final boolean wrap = toggleButton.isSelected();,                 text.setLineWrap(wrap);,             }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGui.java,run,297-297,[                } catch (final Exception ex) {],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_SUPERCLASS,org/apache/logging/log4j/jul/AbstractLoggerAdapter.java,,30-34,[public abstract class AbstractLoggerAdapter extends org.apache.logging.log4j.spi.AbstractLoggerAdapter<Logger> {, ,     @Override,     protected LoggerContext getContext() {,         return getContext(ReflectionUtil.getCallerClass(java.util.logging.LogManager.class));],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_SUPERCLASS,org/apache/logging/log4j/jul/LogManager.java,,42-94,[    private static final org.apache.logging.log4j.Logger LOGGER = StatusLogger.getLogger();,     private final AbstractLoggerAdapter loggerAdapter;, ,     public LogManager() {,         super();,         AbstractLoggerAdapter adapter = null;,         final String overrideAdaptorClassName =,             PropertiesUtil.getProperties().getStringProperty(Constants.LOGGER_ADAPTOR_PROPERTY);,         if (overrideAdaptorClassName != null) {,             try {,                 LOGGER.info("Trying to use LoggerAdaptor [{}] specified by Log4j property.", overrideAdaptorClassName);,                 adapter = LoaderUtil.newCheckedInstanceOf(overrideAdaptorClassName, AbstractLoggerAdapter.class);,             } catch (final Exception e) {,                 LOGGER.error("Specified LoggerAdapter [{}] is incompatible.", overrideAdaptorClassName, e);,             },         },         if (adapter == null) {,             // default adapter,             String adapterClassName;,             try {,                 // find out if log4j-core is available,                 LoaderUtil.loadClass(Constants.CORE_LOGGER_CLASS_NAME);,                 adapterClassName = Constants.CORE_LOGGER_ADAPTER_CLASS_NAME;,             } catch (final ClassNotFoundException ignored) {,                 adapterClassName = Constants.API_LOGGER_ADAPTER_CLASS_NAME;,             },             LOGGER.debug("Attempting to use {}", adapterClassName);,             try {,                 adapter = LoaderUtil.newCheckedInstanceOf(adapterClassName, AbstractLoggerAdapter.class);,             } catch (final Exception e) {,                 throw LOGGER.throwing(new LoggingException(e));,             },         },         loggerAdapter = adapter;,         LOGGER.info("Registered Log4j as the java.util.logging.LogManager.");,     }, ,     @Override,     public boolean addLogger(final Logger logger) {,         // in order to prevent non-bridged loggers from being registered, we always return false to indicate that,         // the named logger should be obtained through getLogger(name),         return false;,     }, ,     @Override,     public Logger getLogger(final String name) {,         LOGGER.trace("Call to LogManager.getLogger({})", name);,         return loggerAdapter.getLogger(name);,     }, ,     @Override,     public Enumeration<String> getLoggerNames() {,         return Collections.enumeration(loggerAdapter.getLoggersInContext(loggerAdapter.getContext()).keySet());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getConfiguration,107-107,[        return context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getLogger,89-89,[        return context.getLogger(testClassName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/junit/InitialLoggerContext.java,getLogger,99-99,[        return context.getLogger(name);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,44-44,[        this.isAlive = thread.isAlive();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,41-41,[        this.longName = thread.toString();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/message/ExtendedThreadInformation.java,printStack,65-68,[                        sb.append("\t-  waiting on ");,                         formatLock(sb, threadInfo.getLockInfo());,                         sb.append('\n');,                         break;],,printStack,70-73,[                        sb.append("\t-  waiting on ");,                         formatLock(sb, threadInfo.getLockInfo());,                         sb.append('\n');,                         break;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/message/FormattedMessage.java,getMessage,115-115,[            if (formats != null && formats.length > 0) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/message/FormattedMessage.java,getMessage,118-118,[        } catch (final Exception ignored) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testNoArgs,61-61,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testParamNoArgs,82-82,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testStringNoArgs,39-39,[        msg = new FormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/FormattedMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/MessageFormatMessageTest.java,testNoArgs,40-40,[        msg = new MessageFormatMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/MessageFormatMessageTest.java,,30-30,[    String[] array = new String[LOOP_CNT];],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testFormattedParameterizedPerf,118-118,[        formattedTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testMessageFormatPerf,90-90,[        msgFormatTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testParameterizedPerf,104-104,[        paramTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testStringPerf,76-76,[        stringTime = timer.getElapsedNanoTime();],,
CORRECTNESS,BC_IMPOSSIBLE_INSTANCEOF,org/apache/logging/log4j/message/ObjectMessageTest.java,testDeserializeNonSerializableParamEqualIfToStringSame,87-87,[        assertFalse(nonSerializable instanceof Serializable);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/message/ObjectMessageTest.java,,80-83,[        class NonSerializable {,             @Override,             public boolean equals(final Object other) {,                 return other instanceof NonSerializable; // a very lenient equals()],,
STYLE,IM_BAD_CHECK_FOR_ODD,org/apache/logging/log4j/message/ParameterizedMessage.java,format,273-273,[                    if (escapeCounter % 2 == 1) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/ParameterizedMessage.java,argumentsToStrings,140-140,[            return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/ParameterizedMessageTest.java,testNoArgs,35-35,[        msg = new ParameterizedMessage(testMsg, array, null);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/SimpleMessage.java,getParameters,66-66,[        return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/StringFormattedMessageTest.java,testNoArgs,39-39,[        msg = new StringFormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/StringFormattedMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,UC_USELESS_CONDITION,org/apache/logging/log4j/message/StructuredDataId.java,<init>,102-102,[        final String id = enterpriseNumber < 0 ? name : name + AT + enterpriseNumber;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/ThreadDumpMessage.java,getParameters,120-120,[        return null;],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,testMessageWithLocks,53-53,[                Thread.sleep(200);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,81-85,[        final Thread other = new Thread("OtherThread") {,             @Override,             public void run() {,                 actual[0] = msg.getFormattedMessage();,             }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,96-104,[        public Thread1(final ReentrantLock lock) {,             this.lock = lock;,         }, ,         @Override,         public void run() {,             lock.lock();,             lock.unlock();,         }],,
MT_CORRECTNESS,ESync_EMPTY_SYNC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,118-118,[            }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,110-119,[        public Thread2(final Object obj) {,             this.obj = obj;,         }, ,         @Override,         public void run() {,             synchronized (obj) {, ,             },         }],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,119-119,[        }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/nosql/appender/NoSqlAppender.java,createAppender,89-89,[        if (manager == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,176-179,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,272-275,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,278-281,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,284-287,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,408-411,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,414-417,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,420-423,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,426-429,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<DefaultNoSqlObject[]>() {,                 @Override,                 public DefaultNoSqlObject[] answer() throws Throwable {,                     return new DefaultNoSqlObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/nosql/appender/NoSqlDatabaseManagerTest.java,,432-435,[            expect(this.connection.createObject()).andAnswer(new IAnswer<DefaultNoSqlObject>() {,                 @Override,                 public DefaultNoSqlObject answer() throws Throwable {,                     return new DefaultNoSqlObject();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/nosql/appender/couchdb/CouchDbProvider.java,createNoSqlProvider,133-133,[                protocol = protocol.toLowerCase();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,createNoSqlProvider,168-168,[            } catch (final Exception e) {],,createNoSqlProvider,197-197,[                } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/nosql/appender/mongodb/MongoDbProvider.java,createNoSqlProvider,137-137,[                        description += " { " + address.getHost() + ", " + address.getPort() + " } ";],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/osgi/BundleTestInfo.java,<init>,44-44,[            fileReader = new FileReader(fileName);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncAppenderLog4j1Benchmark.java,down,70-70,[            new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncAppenderLog4j2Benchmark.java,down,70-70,[            new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncAppenderLogbackBenchmark.java,down,72-72,[            new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncLoggersBenchmark.java,down,72-72,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/AsyncLoggersBenchmark.java,up,63-63,[        new File("perftest.log").delete();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,cachedClock,93-93,[        return cachedClock.currentTimeMillis();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,coarseCachedClock,107-107,[        return coarseCachedClock.currentTimeMillis();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,fixedClock,114-114,[        return fixedClock.currentTimeMillis();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,fixedFinalClock,121-121,[        return fixedFinalClock.currentTimeMillis();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,oldCachedClock,100-100,[        return oldCachedClock.currentTimeMillis();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/perf/jmh/ConfiguratorInitializeBenchmark.java,setUp,60-60,[        configurationSource = new ConfigurationSource(new ByteArrayInputStream(inlineConfigurationXML.getBytes()));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/perf/jmh/DebugDisabledBenchmark.java,setUp,53-53,[        j = new Integer(2);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/FormatterLoggerBenchmark.java,down,65-65,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/perf/jmh/FormatterLoggerBenchmark.java,up,56-56,[        new File("perftest.log").delete();],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java,getConnectionH2,194-194,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", "sa", "");],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java,getConnectionHSQLDB,202-202,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", "sa", "");],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java,createTable,171-171,[            statement.executeUpdate(createSQL);],,
SECURITY,SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE,org/apache/logging/log4j/perf/jmh/JdbcAppenderBenchmark.java,setup,66-66,[        createTable(connectionHSQLDB, toCreateTableSqlStringHQLDB("fmLogEntry"));],,setup,67-67,[        createTable(connectionH2, toCreateTableSqlStringH2("fmLogEntry"));],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionH2,171-171,[        final Connection connection = DriverManager.getConnection("jdbc:h2:mem:Log4j", "sa", "");],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionHSQLDB,188-188,[        final Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", "sa", "");],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionH2,172-172,[        final Statement statement = connection.createStatement();],,getConnectionH2,173-173,[        statement],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionHSQLDB,189-189,[        final Statement statement = connection.createStatement();],,getConnectionHSQLDB,190-190,[        statement.executeUpdate("CREATE TABLE jpaBasicLogEntry ( "],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionH2,172-172,[        final Statement statement = connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/perf/jmh/JpaAppenderBenchmark.java,getConnectionHSQLDB,189-189,[        final Statement statement = connection.createStatement();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/Log4jLogEventBenchmark.java,setup,40-40,[        ERROR = new Exception("test");],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/Log4jLogEventBenchmark.java,setup,39-39,[        MESSAGE = new SimpleMessage("Test message");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,throughputStringGetBytes,90-90,[        return STR.getBytes();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/perf/jmh/PatternLayoutBenchmark.java,createLogEvent,82-82,[        return new Log4jLogEvent("name(ignored)", marker, fqcn, level, message, t, mdc, ndc, threadName, location,],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/perf/jmh/StringEncodingBenchmark.java,throughputStringGetBytes,56-56,[        return STR.getBytes();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latency.java,latency_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latency.java,latency_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latency.java,latency_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latencyBaseline.java,latencyBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_latencyBaseline.java,latencyBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughput.java,throughput_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughput.java,throughput_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughput.java,throughput_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughputBaseline.java,throughputBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j1Benchmark_throughputBaseline.java,throughputBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latency.java,latency_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latency.java,latency_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latency.java,latency_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latencyBaseline.java,latencyBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_latencyBaseline.java,latencyBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughput.java,throughput_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughput.java,throughput_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughput.java,throughput_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughputBaseline.java,throughputBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLog4j2Benchmark_throughputBaseline.java,throughputBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latency.java,latency_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latency.java,latency_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latency.java,latency_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latency.java,latency_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latencyBaseline.java,latencyBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latencyBaseline.java,latencyBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latencyBaseline.java,latencyBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_latencyBaseline.java,latencyBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughput.java,throughput_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughput.java,throughput_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughput.java,throughput_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughput.java,throughput_Throughput,111-111,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughputBaseline.java,throughputBaseline_AverageTime,194-194,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughputBaseline.java,throughputBaseline_SampleTime,278-278,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughputBaseline.java,throughputBaseline_SingleShotTime,363-363,[                    f_normalstate2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/AsyncAppenderLogbackBenchmark_throughputBaseline.java,throughputBaseline_Throughput,111-111,[                    f_normalstate2_G = null;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JdbcAppenderBenchmark_testResponseTimeH2Exception.java,,34-382,[public final class JdbcAppenderBenchmark_testResponseTimeH2Exception {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testResponseTimeH2Exception_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeH2Exception_thrpt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeH2Exception_avgt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testResponseTimeH2Exception_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testResponseTimeH2Exception_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jdbcappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JdbcAppenderBenchmark_jmh f_jdbcappenderbenchmark0_0;,     ,     JdbcAppenderBenchmark_jmh _jmh_tryInit_f_jdbcappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jdbcappenderbenchmark0_0 == null) {,             JdbcAppenderBenchmark_jmh val = new JdbcAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jdbcappenderbenchmark0_0 = val;,         },         return f_jdbcappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JdbcAppenderBenchmark_testResponseTimeHSQLDBException.java,,34-382,[public final class JdbcAppenderBenchmark_testResponseTimeHSQLDBException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testResponseTimeHSQLDBException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeHSQLDBException_thrpt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeHSQLDBException_avgt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testResponseTimeHSQLDBException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testResponseTimeHSQLDBException_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jdbcappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JdbcAppenderBenchmark_jmh f_jdbcappenderbenchmark0_0;,     ,     JdbcAppenderBenchmark_jmh _jmh_tryInit_f_jdbcappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jdbcappenderbenchmark0_0 == null) {,             JdbcAppenderBenchmark_jmh val = new JdbcAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jdbcappenderbenchmark0_0 = val;,         },         return f_jdbcappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JdbcAppenderBenchmark_testThroughputH2Exception.java,,34-382,[public final class JdbcAppenderBenchmark_testThroughputH2Exception {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testThroughputH2Exception_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputH2Exception_thrpt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputH2Exception_avgt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testThroughputH2Exception_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testThroughputH2Exception", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testThroughputH2Exception_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jdbcappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JdbcAppenderBenchmark_jmh f_jdbcappenderbenchmark0_0;,     ,     JdbcAppenderBenchmark_jmh _jmh_tryInit_f_jdbcappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jdbcappenderbenchmark0_0 == null) {,             JdbcAppenderBenchmark_jmh val = new JdbcAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jdbcappenderbenchmark0_0 = val;,         },         return f_jdbcappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JdbcAppenderBenchmark_testThroughputHSQLDBException.java,,34-382,[public final class JdbcAppenderBenchmark_testThroughputHSQLDBException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testThroughputHSQLDBException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputHSQLDBException_thrpt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputHSQLDBException_avgt_jmhStub(control, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testThroughputHSQLDBException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0 = _jmh_tryInit_f_jdbcappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testThroughputHSQLDBException_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jdbcappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jdbcappenderbenchmark0_0.readyTrial) {,                     l_jdbcappenderbenchmark0_0.tearDown();,                     l_jdbcappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jdbcappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JdbcAppenderBenchmark_jmh l_jdbcappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jdbcappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JdbcAppenderBenchmark_jmh f_jdbcappenderbenchmark0_0;,     ,     JdbcAppenderBenchmark_jmh _jmh_tryInit_f_jdbcappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jdbcappenderbenchmark0_0 == null) {,             JdbcAppenderBenchmark_jmh val = new JdbcAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jdbcappenderbenchmark0_0 = val;,         },         return f_jdbcappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JpaAppenderBenchmark_testResponseTimeH2Exception.java,,34-382,[public final class JpaAppenderBenchmark_testResponseTimeH2Exception {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testResponseTimeH2Exception_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeH2Exception_thrpt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeH2Exception_avgt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testResponseTimeH2Exception_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testResponseTimeH2Exception_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testResponseTimeH2Exception_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testResponseTimeH2Exception", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeH2Exception_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jpaappenderbenchmark0_0.testResponseTimeH2Exception(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JpaAppenderBenchmark_jmh f_jpaappenderbenchmark0_0;,     ,     JpaAppenderBenchmark_jmh _jmh_tryInit_f_jpaappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jpaappenderbenchmark0_0 == null) {,             JpaAppenderBenchmark_jmh val = new JpaAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jpaappenderbenchmark0_0 = val;,         },         return f_jpaappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JpaAppenderBenchmark_testResponseTimeHSQLDBException.java,,34-382,[public final class JpaAppenderBenchmark_testResponseTimeHSQLDBException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testResponseTimeHSQLDBException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeHSQLDBException_thrpt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testResponseTimeHSQLDBException_avgt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testResponseTimeHSQLDBException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testResponseTimeHSQLDBException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testResponseTimeHSQLDBException_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testResponseTimeHSQLDBException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testResponseTimeHSQLDBException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jpaappenderbenchmark0_0.testResponseTimeHSQLDBException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JpaAppenderBenchmark_jmh f_jpaappenderbenchmark0_0;,     ,     JpaAppenderBenchmark_jmh _jmh_tryInit_f_jpaappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jpaappenderbenchmark0_0 == null) {,             JpaAppenderBenchmark_jmh val = new JpaAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jpaappenderbenchmark0_0 = val;,         },         return f_jpaappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JpaAppenderBenchmark_testThroughputH2Exception.java,,34-382,[public final class JpaAppenderBenchmark_testThroughputH2Exception {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testThroughputH2Exception_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputH2Exception_thrpt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputH2Exception_avgt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testThroughputH2Exception_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testThroughputH2Exception", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testThroughputH2Exception_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testThroughputH2Exception_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testThroughputH2Exception", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputH2Exception_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jpaappenderbenchmark0_0.testThroughputH2Exception(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JpaAppenderBenchmark_jmh f_jpaappenderbenchmark0_0;,     ,     JpaAppenderBenchmark_jmh _jmh_tryInit_f_jpaappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jpaappenderbenchmark0_0 == null) {,             JpaAppenderBenchmark_jmh val = new JpaAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jpaappenderbenchmark0_0 = val;,         },         return f_jpaappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/JpaAppenderBenchmark_testThroughputHSQLDBException.java,,34-382,[public final class JpaAppenderBenchmark_testThroughputHSQLDBException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> testThroughputHSQLDBException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputHSQLDBException_thrpt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             testThroughputHSQLDBException_avgt_jmhStub(control, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             testThroughputHSQLDBException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> testThroughputHSQLDBException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0 = _jmh_tryInit_f_jpaappenderbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             testThroughputHSQLDBException_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_jpaappenderbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 if (l_jpaappenderbenchmark0_0.readyTrial) {,                     l_jpaappenderbenchmark0_0.tearDown();,                     l_jpaappenderbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_jpaappenderbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "testThroughputHSQLDBException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void testThroughputHSQLDBException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, JpaAppenderBenchmark_jmh l_jpaappenderbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_jpaappenderbenchmark0_0.testThroughputHSQLDBException(l_blackhole1_2);,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     JpaAppenderBenchmark_jmh f_jpaappenderbenchmark0_0;,     ,     JpaAppenderBenchmark_jmh _jmh_tryInit_f_jpaappenderbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_jpaappenderbenchmark0_0 == null) {,             JpaAppenderBenchmark_jmh val = new JpaAppenderBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_jpaappenderbenchmark0_0 = val;,         },         return f_jpaappenderbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/Log4jLogEventBenchmark_createLogEventWithoutException.java,,33-314,[public final class Log4jLogEventBenchmark_createLogEventWithoutException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> createLogEventWithoutException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createLogEventWithoutException_thrpt_jmhStub(control, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "createLogEventWithoutException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createLogEventWithoutException_thrpt_jmhStub(InfraControl control, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createLogEventWithoutException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createLogEventWithoutException_avgt_jmhStub(control, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "createLogEventWithoutException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createLogEventWithoutException_avgt_jmhStub(InfraControl control, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createLogEventWithoutException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             createLogEventWithoutException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "createLogEventWithoutException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createLogEventWithoutException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> createLogEventWithoutException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             createLogEventWithoutException_ss_jmhStub(control, batchSize, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "createLogEventWithoutException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createLogEventWithoutException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createLogEventWithoutException());,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Log4jLogEventBenchmark_jmh f_log4jlogeventbenchmark0_0;,     ,     Log4jLogEventBenchmark_jmh _jmh_tryInit_f_log4jlogeventbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_log4jlogeventbenchmark0_0 == null) {,             Log4jLogEventBenchmark_jmh val = new Log4jLogEventBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_log4jlogeventbenchmark0_0 = val;,         },         return f_log4jlogeventbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/Log4jLogEventBenchmark_createSerializableLogEventProxyWithException.java,,34-362,[public final class Log4jLogEventBenchmark_createSerializableLogEventProxyWithException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> createSerializableLogEventProxyWithException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createSerializableLogEventProxyWithException_thrpt_jmhStub(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithException_thrpt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createSerializableLogEventProxyWithException_avgt_jmhStub(control, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithException_avgt_jmhStub(InfraControl control, RawResults result, Blackhole_jmh l_blackhole1_2, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             createSerializableLogEventProxyWithException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Blackhole_jmh l_blackhole1_2, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);,             Blackhole_jmh l_blackhole1_2 = _jmh_tryInit_f_blackhole1_2(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             },             if (!l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.clearSinks();,                 l_blackhole1_2.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             createSerializableLogEventProxyWithException_ss_jmhStub(control, batchSize, res, l_blackhole1_2, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_2.readyIteration) {,                 l_blackhole1_2.readyIteration = false;,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_blackhole1_2 = null;,                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Blackhole_jmh l_blackhole1_2, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithException(l_blackhole1_2));,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Blackhole_jmh f_blackhole1_2;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_2(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_2 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_2 = val;,         },         return f_blackhole1_2;,     },     ,     Log4jLogEventBenchmark_jmh f_log4jlogeventbenchmark0_0;,     ,     Log4jLogEventBenchmark_jmh _jmh_tryInit_f_log4jlogeventbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_log4jlogeventbenchmark0_0 == null) {,             Log4jLogEventBenchmark_jmh val = new Log4jLogEventBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_log4jlogeventbenchmark0_0 = val;,         },         return f_log4jlogeventbenchmark0_0;],,
BAD_PRACTICE,NM_CLASS_NOT_EXCEPTION,org/apache/logging/log4j/perf/jmh/generated/Log4jLogEventBenchmark_createSerializableLogEventProxyWithoutException.java,,33-314,[public final class Log4jLogEventBenchmark_createSerializableLogEventProxyWithoutException {, ,     boolean p000, p001, p002, p003, p004, p005, p006, p007, p008, p009, p010, p011, p012, p013, p014, p015;,     boolean p016, p017, p018, p019, p020, p021, p022, p023, p024, p025, p026, p027, p028, p029, p030, p031;,     boolean p032, p033, p034, p035, p036, p037, p038, p039, p040, p041, p042, p043, p044, p045, p046, p047;,     boolean p048, p049, p050, p051, p052, p053, p054, p055, p056, p057, p058, p059, p060, p061, p062, p063;,     boolean p064, p065, p066, p067, p068, p069, p070, p071, p072, p073, p074, p075, p076, p077, p078, p079;,     boolean p080, p081, p082, p083, p084, p085, p086, p087, p088, p089, p090, p091, p092, p093, p094, p095;,     boolean p096, p097, p098, p099, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110, p111;,     boolean p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123, p124, p125, p126, p127;,     boolean p128, p129, p130, p131, p132, p133, p134, p135, p136, p137, p138, p139, p140, p141, p142, p143;,     boolean p144, p145, p146, p147, p148, p149, p150, p151, p152, p153, p154, p155, p156, p157, p158, p159;,     boolean p160, p161, p162, p163, p164, p165, p166, p167, p168, p169, p170, p171, p172, p173, p174, p175;,     boolean p176, p177, p178, p179, p180, p181, p182, p183, p184, p185, p186, p187, p188, p189, p190, p191;,     boolean p192, p193, p194, p195, p196, p197, p198, p199, p200, p201, p202, p203, p204, p205, p206, p207;,     boolean p208, p209, p210, p211, p212, p213, p214, p215, p216, p217, p218, p219, p220, p221, p222, p223;,     boolean p224, p225, p226, p227, p228, p229, p230, p231, p232, p233, p234, p235, p236, p237, p238, p239;,     boolean p240, p241, p242, p243, p244, p245, p246, p247, p248, p249, p250, p251, p252, p253, p254, p255;,     int startRndMask;, ,     public Collection<? extends Result> createSerializableLogEventProxyWithoutException_Throughput(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createSerializableLogEventProxyWithoutException_thrpt_jmhStub(control, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new ThroughputResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithoutException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithoutException_thrpt_jmhStub(InfraControl control, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithoutException_AverageTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             createSerializableLogEventProxyWithoutException_avgt_jmhStub(control, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             res.operations /= control.iterationParams.getBatchSize();,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new AverageTimeResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithoutException", res.getOperations(), res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithoutException_avgt_jmhStub(InfraControl control, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long operations = 0;,         long realTime = 0;,         result.startTime = System.nanoTime();,         do {,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             operations++;,         } while(!control.isDone);,         result.stopTime = System.nanoTime();,         result.realTime = realTime;,         result.operations = operations;,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithoutException_SampleTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             control.announceWarmupReady();,             while (control.warmupShouldWait) {,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             }, ,             int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); // at max, 20 timestamps per millisecond,             int batchSize = control.iterationParams.getBatchSize();,             SampleBuffer buffer = new SampleBuffer();,             createSerializableLogEventProxyWithoutException_sample_jmhStub(control, buffer, targetSamples, control.benchmarkParams.getOpsPerInvocation(), batchSize, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.announceWarmdownReady();,             try {,                 while (control.warmdownShouldWait) {,                     l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,                 },                 control.preTearDown();,             } catch (InterruptedException ie) {,                 control.preTearDownForce();,             },             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SampleTimeResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithoutException", buffer, control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithoutException_sample_jmhStub(InfraControl control, SampleBuffer buffer, int targetSamples, long opsPerInv, int batchSize, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         int rnd = (int)System.nanoTime();,         int rndMask = startRndMask;,         long time = 0;,         int currentStride = 0;,         do {,             rnd = (rnd * 1664525 + 1013904223);,             boolean sample = (rnd & rndMask) == 0;,             if (sample) {,                 time = System.nanoTime();,             },             for (int b = 0; b < batchSize; b++) {,                 if (control.volatileSpoiler) return;,                 l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,             },             if (sample) {,                 buffer.add((System.nanoTime() - time) / opsPerInv);,                 if (currentStride++ > targetSamples) {,                     buffer.half();,                     currentStride = 0;,                     rndMask = (rndMask << 1) + 1;,                 },             },         } while(!control.isDone);,         startRndMask = Math.max(startRndMask, rndMask);,     }, , ,     public Collection<? extends Result> createSerializableLogEventProxyWithoutException_SingleShotTime(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (threadParams.getSubgroupIndex() == 0) {,             Blackhole_jmh l_blackhole1_1 = _jmh_tryInit_f_blackhole1_1(control, threadParams);,             Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0 = _jmh_tryInit_f_log4jlogeventbenchmark0_0(control, threadParams);, ,             control.preSetup();,             if (!l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.clearSinks();,                 l_blackhole1_1.readyIteration = true;,             }, ,             RawResults res = new RawResults(control.benchmarkParams.getOpsPerInvocation());,             int batchSize = control.iterationParams.getBatchSize();,             createSerializableLogEventProxyWithoutException_ss_jmhStub(control, batchSize, res, l_log4jlogeventbenchmark0_0, l_blackhole1_1);,             control.preTearDown();,             if (l_blackhole1_1.readyIteration) {,                 l_blackhole1_1.readyIteration = false;,             }, ,             if (control.isLastIteration()) {,                 if (l_log4jlogeventbenchmark0_0.readyTrial) {,                     l_log4jlogeventbenchmark0_0.readyTrial = false;,                 },                 f_log4jlogeventbenchmark0_0 = null;,                 f_blackhole1_1 = null;,             },             Collection<Result> results = new ArrayList<Result>();,             results.add(new SingleShotResult(ResultRole.PRIMARY, "createSerializableLogEventProxyWithoutException", res.getTime(), control.benchmarkParams.getTimeUnit()));,             return results;,         } else,             throw new IllegalStateException("Harness failed to distribute threads among groups properly");,     }, ,     public void createSerializableLogEventProxyWithoutException_ss_jmhStub(InfraControl control, int batchSize, RawResults result, Log4jLogEventBenchmark_jmh l_log4jlogeventbenchmark0_0, Blackhole_jmh l_blackhole1_1) throws Throwable {,         long realTime = 0;,         result.startTime = System.nanoTime();,         for (int b = 0; b < batchSize; b++) {,             if (control.volatileSpoiler) return;,             l_blackhole1_1.consume(l_log4jlogeventbenchmark0_0.createSerializableLogEventProxyWithoutException());,         },         result.stopTime = System.nanoTime();,         result.realTime = realTime;,     }, ,     ,     Blackhole_jmh f_blackhole1_1;,     ,     Blackhole_jmh _jmh_tryInit_f_blackhole1_1(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_blackhole1_1 == null) {,             Blackhole_jmh val = new Blackhole_jmh();,             val.readyTrial = true;,             f_blackhole1_1 = val;,         },         return f_blackhole1_1;,     },     ,     Log4jLogEventBenchmark_jmh f_log4jlogeventbenchmark0_0;,     ,     Log4jLogEventBenchmark_jmh _jmh_tryInit_f_log4jlogeventbenchmark0_0(InfraControl control, ThreadParams threadParams) throws Throwable {,         if (f_log4jlogeventbenchmark0_0 == null) {,             Log4jLogEventBenchmark_jmh val = new Log4jLogEventBenchmark_jmh();,             val.setup();,             val.readyTrial = true;,             f_log4jlogeventbenchmark0_0 = val;,         },         return f_log4jlogeventbenchmark0_0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/ReflectionBenchmark_test12_getClassContextViaSecurityManager.java,test12_getClassContextViaSecurityManager_AverageTime,150-150,[                    f_classcontextmanager2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/ReflectionBenchmark_test12_getClassContextViaSecurityManager.java,test12_getClassContextViaSecurityManager_SingleShotTime,275-275,[                    f_classcontextmanager2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/ReflectionBenchmark_test12_getClassContextViaSecurityManager.java,test12_getClassContextViaSecurityManager_Throughput,89-89,[                    f_classcontextmanager2_G = null;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/perf/jmh/generated/ReflectionBenchmark_test12_getClassContextViaSecurityManager.java,test12_getClassContextViaSecurityManager_SampleTime,212-212,[                    f_classcontextmanager2_G = null;],,
CORRECTNESS,UR_UNINIT_READ,org/apache/logging/log4j/samples/app/LoggingApp.java,<init>,65-65,[        if (events == null) {],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/samples/app/LoggingApp.java,run,107-107,[                    Thread.sleep(rand * 1000);],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingApp.java,run,114-114,[                    final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingController.java,run,109-109,[                            final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/samples/app/MockEventsSupplier.java,,33-33,[    static Random random = new Random();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,lowerFirst,40-40,[        return String.valueOf(name.charAt(0)).toLowerCase() + name.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,methodCaseName,71-71,[        return variable.substring(0, 1).toUpperCase() + variable.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,upperFirst,36-36,[        return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,logMessage,166-166,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,logMessage,165-165,[            t.printStackTrace(new PrintStream(baos));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLoggerContext.java,<init>,87-87,[                ps = new PrintStream(os);],,
BAD_PRACTICE,EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS,org/apache/logging/log4j/spi/DefaultThreadContextStack.java,equals,134-134,[        return values.equals(other);],,
CORRECTNESS,EC_UNRELATED_TYPES,org/apache/logging/log4j/spi/DefaultThreadContextStackTest.java,testEqualsVsMutable,53-53,[        assertEquals(stack2, stack1);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,118-118,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,117-117,[            t.printStackTrace(new PrintStream(baos));],,
STYLE,IC_INIT_CIRCULARITY,org/apache/logging/log4j/status/StatusLogger.java,,43-275,[public final class StatusLogger extends AbstractLogger {, ,     private static final long serialVersionUID = 2L;, ,     /**,      * System property that can be configured with the number of entries in the queue. Once the limit,      * is reached older entries will be removed as new entries are added.,      */,     public static final String MAX_STATUS_ENTRIES = "log4j2.status.entries";, ,     private static final String NOT_AVAIL = "?";, ,     private static final PropertiesUtil PROPS = new PropertiesUtil("log4j2.StatusLogger.properties");, ,     private static final int MAX_ENTRIES = PROPS.getIntegerProperty(MAX_STATUS_ENTRIES, 200);, ,     private static final String DEFAULT_STATUS_LEVEL = PROPS.getStringProperty("log4j2.StatusLogger.level");, ,     private static final StatusLogger STATUS_LOGGER = new StatusLogger();, ,     private final SimpleLogger logger;, ,     private final Collection<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();,     @SuppressWarnings("NonSerializableFieldInSerializableClass") // ReentrantReadWriteLock is Serializable,     private final ReadWriteLock listenersLock = new ReentrantReadWriteLock();, ,     private final Queue<StatusData> messages = new BoundedQueue<StatusData>(MAX_ENTRIES);,     @SuppressWarnings("NonSerializableFieldInSerializableClass") // ReentrantLock is Serializable,     private final Lock msgLock = new ReentrantLock();, ,     private int listenersLevel;, ,     private StatusLogger() {,         this.logger = new SimpleLogger("StatusLogger", Level.ERROR, false, true, false, false, Strings.EMPTY, null, PROPS,,             System.err);,         this.listenersLevel = Level.toLevel(DEFAULT_STATUS_LEVEL, Level.WARN).intLevel();,     }, ,     /**,      * Retrieve the StatusLogger.,      * @return The StatusLogger.,      */,     public static StatusLogger getLogger() {,         return STATUS_LOGGER;,     }, ,     public void setLevel(final Level level) {,         logger.setLevel(level);,     }, ,     /**,      * Register a new listener.,      * @param listener The StatusListener to register.,      */,     public void registerListener(final StatusListener listener) {,         listenersLock.writeLock().lock();,         try {,             listeners.add(listener);,             final Level lvl = listener.getStatusLevel();,             if (listenersLevel < lvl.intLevel()) {,                 listenersLevel = lvl.intLevel();,             },         } finally {,             listenersLock.writeLock().unlock();,         },     }, ,     /**,      * Remove a StatusListener.,      * @param listener The StatusListener to remove.,      */,     public void removeListener(final StatusListener listener) {,         closeSilently(listener);,         listenersLock.writeLock().lock();,         try {,             listeners.remove(listener);,             int lowest = Level.toLevel(DEFAULT_STATUS_LEVEL, Level.WARN).intLevel();,             for (final StatusListener l : listeners) {,                 final int level = l.getStatusLevel().intLevel();,                 if (lowest < level) {,                     lowest = level;,                 },             },             listenersLevel = lowest;,         } finally {,             listenersLock.writeLock().unlock();,         },     }, ,     /**,      * Returns a thread safe Iterable for the StatusListener.,      * @return An Iterable for the list of StatusListeners.,      */,     public Iterable<StatusListener> getListeners() {,         return listeners;,     }, ,     /**,      * Clears the list of status events and listeners.,      */,     public void reset() {,         listenersLock.writeLock().lock();,         try {,             for (final StatusListener listener : listeners) {,                 closeSilently(listener);,             },         } finally {,             listeners.clear();,             listenersLock.writeLock().unlock();,             // note this should certainly come after the unlock to avoid unnecessary nested locking,             clear();,         },     }, ,     private static void closeSilently(final Closeable resource) {,         try {,             resource.close();,         } catch (final IOException ignored) {,         },     }, ,     /**,      * Returns a List of all events as StatusData objects.,      * @return The list of StatusData objects.,      */,     public List<StatusData> getStatusData() {,         msgLock.lock();,         try {,             return new ArrayList<StatusData>(messages);,         } finally {,             msgLock.unlock();,         },     }, ,     /**,      * Clears the list of status events.,      */,     public void clear() {,         msgLock.lock();,         try {,             messages.clear();,         } finally {,             msgLock.unlock();,         },     }, ,     @Override,     public Level getLevel() {,         return logger.getLevel();,     }, ,     /**,      * Add an event.,      * @param marker The Marker,      * @param fqcn   The fully qualified class name of the <b>caller</b>,      * @param level  The logging level,      * @param msg    The message associated with the event.,      * @param t      A Throwable or null.,      */,     @Override,     public void logMessage(final String fqcn, final Level level, final Marker marker, final Message msg, final Throwable t) {,         StackTraceElement element = null;,         if (fqcn != null) {,             element = getStackTraceElement(fqcn, Thread.currentThread().getStackTrace());,         },         final StatusData data = new StatusData(element, level, msg, t);,         msgLock.lock();,         try {,             messages.add(data);,         } finally {,             msgLock.unlock();,         },         if (listeners.size() > 0) {,             for (final StatusListener listener : listeners) {,                 if (data.getLevel().isMoreSpecificThan(listener.getStatusLevel())) {,                     listener.log(data);,                 },             },         } else {,             logger.logMessage(fqcn, level, marker, msg, t);,         },     }, ,     private StackTraceElement getStackTraceElement(final String fqcn, final StackTraceElement[] stackTrace) {,         if (fqcn == null) {,             return null;,         },         boolean next = false;,         for (final StackTraceElement element : stackTrace) {,             final String className = element.getClassName();,             if (next && !fqcn.equals(className)) {,                 return element;,             },             if (fqcn.equals(className)) {,                 next = true;,             } else if (NOT_AVAIL.equals(className)) {,                 break;,             },         },         return null;,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final String message, final Throwable t) {,         return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final String message) {,         return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final String message, final Object... params) {,         return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final Object message, final Throwable t) {,         return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker, final Message message, final Throwable t) {,         return isEnabled(level, marker);,     }, ,     @Override,     public boolean isEnabled(final Level level, final Marker marker) {,         if (listeners.size() > 0) {,             return listenersLevel >= level.intLevel();,         },         return logger.isEnabled(level, marker);],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/logging/log4j/status/StatusLogger.java,add,295-295,[                messages.poll();],,
BAD_PRACTICE,SE_INNER_CLASS,org/apache/logging/log4j/status/StatusLogger.java,,288-297,[        public BoundedQueue(final int size) {,             this.size = size;,         }, ,         @Override,         public boolean add(final E object) {,             while (messages.size() > size) {,                 messages.poll();,             },             return super.add(object);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/CatchingTagTest.java,setUpClass,51-51,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/EntryTagTest.java,setUpClass,47-47,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,testException,39-39,[        assertNull("The exception should be null (1).", this.tag.getException());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,,32-32,[        this.tag = new ExceptionAwareTagSupport() {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/ExitTagTest.java,setUpClass,47-47,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/IfEnabledTagTest.java,setUpClass,46-46,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/LogTagTest.java,testLevel,39-39,[        assertNull("The level should be null (1).", this.tag.getLevel());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,35-38,[        this.context = new MockPageContext() {,             @Override,             public Object getPage() {,                 return page == null ? this : page;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,41-41,[        this.tag = new LoggerAwareTagSupport() {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,111-111,[        final Object page = new Object() {};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,132-132,[        final Object page = new Object() {};],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,setUpClass,52-52,[        context.getConfiguration();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,,67-72,[        this.tag = new LoggingMessageTagSupport() {,             private static final long serialVersionUID = 1L;, ,             @Override,             protected Level getLevel() {,                 return level;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/test/appender/ListAppender.java,write,102-102,[        final String str = new String(bytes);],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/test/SomethingThatUsesLogging.java,,29-35,[    public SomethingThatUsesLogging() {,         logger = LogManager.getLogger();,     }, ,     public void doSomething() {,         logger.isEnabled(Level.DEBUG);,     }],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/test/layout/BasicLayout.java,,31-54,[@Plugin(name = "BasicLayout", category = "Core", elementType = "layout", printObject = true), public class BasicLayout extends AbstractStringLayout {, ,     private static final String HEADER = "Header" + Constants.LINE_SEPARATOR;, ,     @Override,     public byte[] getHeader() {,         return getBytes(HEADER);,     }, ,     public BasicLayout(final Charset charset) {,         super(charset);,     }, ,     @Override,     public String toSerializable(final LogEvent event) {,         return event.getMessage().getFormattedMessage() + Constants.LINE_SEPARATOR;,     }, ,     /**,      */,     @PluginFactory,     public static BasicLayout createLayout() {,         return new BasicLayout(Charsets.UTF_8);],,
PERFORMANCE,DMI_BLOCKING_METHODS_ON_URL,org/apache/logging/log4j/util/LoaderUtil.java,equals,247-247,[            if (url != null ? !url.equals(that.url) : that.url != null) {],,
PERFORMANCE,DMI_BLOCKING_METHODS_ON_URL,org/apache/logging/log4j/util/LoaderUtil.java,hashCode,257-257,[            result = 31 * result + (url != null ? url.hashCode() : 0);],,
BAD_PRACTICE,SI_INSTANCE_BEFORE_FINALS_ASSIGNED,org/apache/logging/log4j/util/PropertiesUtil.java,<init>,36-36,[    private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");],,
BAD_PRACTICE,ISC_INSTANTIATE_STATIC_CLASS,org/apache/logging/log4j/util/ProviderUtil.java,lazyInit,121-121,[                    INSTANCE = new ProviderUtil();],,
MALICIOUS_CODE,MS_MUTABLE_COLLECTION_PKGPROTECT,org/apache/logging/log4j/util/ProviderUtil.java,,52-52,[    protected static final Collection<Provider> PROVIDERS = new HashSet<Provider>();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/util/ReflectionUtil.java,<clinit>,81-81,[        } catch (final Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,,226-226,[        if (this.loggerContext != null) {],,,227-227,[            ContextAnchor.THREAD_CONTEXT.set(this.loggerContext);],,,210-210,[            if (this.loggerContext != null) {],,,216-216,[                this.loggerContext.stop();],,,217-217,[                this.loggerContext.setExternalContext(null);],,,218-218,[                this.loggerContext = null;],,,142-142,[        this.loggerContext = context;],,,110-110,[            this.servletContext.setAttribute(CONTEXT_ATTRIBUTE, this.loggerContext);],,,157-157,[        this.loggerContext = Configurator.initialize(this.name, this.getClassLoader(), uri, this.servletContext);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/web/Log4jWebInitializerImpl.java,getConfigURI,188-188,[        } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/lookup/StrSubstitutor.java,,149-1354,[    public static final StrMatcher DEFAULT_PREFIX = StrMatcher.stringMatcher(DEFAULT_ESCAPE + "{");,     ,     /**,      * Constant for the default variable suffix.,      */,     public static final StrMatcher DEFAULT_SUFFIX = StrMatcher.stringMatcher("}");,     ,     /**,      * Constant for the default value delimiter of a variable.,      */,     public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");, ,     private static final int BUF_SIZE = 256;, ,     /**,      * Stores the escape character.,      */,     private char escapeChar;,     /**,      * Stores the variable prefix.,      */,     private StrMatcher prefixMatcher;,     /**,      * Stores the variable suffix.,      */,     private StrMatcher suffixMatcher;,     /**,      * Stores the default variable value delimiter,      */,     private StrMatcher valueDelimiterMatcher;,     /**,      * Variable resolution is delegated to an implementer of VariableResolver.,      */,     private StrLookup variableResolver;,     /**,      * The flag whether substitution in variable names is enabled.,      */,     private boolean enableSubstitutionInVariables;, ,     //-----------------------------------------------------------------------,     /**,      * Creates a new instance with defaults for variable prefix and suffix,      * and the escaping character.,      */,     public StrSubstitutor() {,         this(null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);,     },     /**,      * Creates a new instance and initializes it. Uses defaults for variable,      * prefix and suffix and the escaping character.,      *,      * @param valueMap  the map with the variables' values, may be null,      */,     public StrSubstitutor(final Map<String, String> valueMap) {,         this(new MapLookup(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);,     }, ,     /**,      * Creates a new instance and initializes it. Uses a default escaping character.,      *,      * @param valueMap  the map with the variables' values, may be null,      * @param prefix  the prefix for variables, not null,      * @param suffix  the suffix for variables, not null,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final Map<String, String> valueMap, final String prefix, final String suffix) {,         this(new MapLookup(valueMap), prefix, suffix, DEFAULT_ESCAPE);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param valueMap  the map with the variables' values, may be null,      * @param prefix  the prefix for variables, not null,      * @param suffix  the suffix for variables, not null,      * @param escape  the escape character,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final Map<String, String> valueMap, final String prefix, final String suffix,,                           final char escape) {,         this(new MapLookup(valueMap), prefix, suffix, escape);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param valueMap  the map with the variables' values, may be null,      * @param prefix  the prefix for variables, not null,      * @param suffix  the suffix for variables, not null,      * @param escape  the escape character,      * @param valueDelimiter  the variable default value delimiter, may be null,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final Map<String, String> valueMap, final String prefix, final String suffix,,                               final char escape, final String valueDelimiter) {,         this(new MapLookup(valueMap), prefix, suffix, escape, valueDelimiter);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param variableResolver  the variable resolver, may be null,      */,     public StrSubstitutor(final StrLookup variableResolver) {,         this(variableResolver, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param variableResolver  the variable resolver, may be null,      * @param prefix  the prefix for variables, not null,      * @param suffix  the suffix for variables, not null,      * @param escape  the escape character,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final StrLookup variableResolver, final String prefix, final String suffix,,                           final char escape) {,         this.setVariableResolver(variableResolver);,         this.setVariablePrefix(prefix);,         this.setVariableSuffix(suffix);,         this.setEscapeChar(escape);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param variableResolver  the variable resolver, may be null,      * @param prefix  the prefix for variables, not null,      * @param suffix  the suffix for variables, not null,      * @param escape  the escape character,      * @param valueDelimiter  the variable default value delimiter string, may be null,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final StrLookup variableResolver, final String prefix, final String suffix, final char escape, final String valueDelimiter) {,         this.setVariableResolver(variableResolver);,         this.setVariablePrefix(prefix);,         this.setVariableSuffix(suffix);,         this.setEscapeChar(escape);,         this.setValueDelimiter(valueDelimiter);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param variableResolver  the variable resolver, may be null,      * @param prefixMatcher  the prefix for variables, not null,      * @param suffixMatcher  the suffix for variables, not null,      * @param escape  the escape character,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(final StrLookup variableResolver, final StrMatcher prefixMatcher,,                           final StrMatcher suffixMatcher,,                           final char escape) {,         this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);,     }, ,     /**,      * Creates a new instance and initializes it.,      *,      * @param variableResolver  the variable resolver, may be null,      * @param prefixMatcher  the prefix for variables, not null,      * @param suffixMatcher  the suffix for variables, not null,      * @param escape  the escape character,      * @param valueDelimiterMatcher  the variable default value delimiter matcher, may be null,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public StrSubstitutor(,             final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {,         this.setVariableResolver(variableResolver);,         this.setVariablePrefixMatcher(prefixMatcher);,         this.setVariableSuffixMatcher(suffixMatcher);,         this.setEscapeChar(escape);,         this.setValueDelimiterMatcher(valueDelimiterMatcher);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables in the given source object with,      * their matching values from the map.,      *,      * @param source  the source text containing the variables to substitute, null returns null,      * @param valueMap  the map with the values, may be null,      * @return the result of the replace operation,      */,     public static String replace(final Object source, final Map<String, String> valueMap) {,         return new StrSubstitutor(valueMap).replace(source);,     }, ,     /**,      * Replaces all the occurrences of variables in the given source object with,      * their matching values from the map. This method allows to specify a,      * custom variable prefix and suffix,      *,      * @param source  the source text containing the variables to substitute, null returns null,      * @param valueMap  the map with the values, may be null,      * @param prefix  the prefix of variables, not null,      * @param suffix  the suffix of variables, not null,      * @return the result of the replace operation,      * @throws IllegalArgumentException if the prefix or suffix is null,      */,     public static String replace(final Object source, final Map<String, String> valueMap, final String prefix,,                                  final String suffix) {,         return new StrSubstitutor(valueMap, prefix, suffix).replace(source);,     }, ,     /**,      * Replaces all the occurrences of variables in the given source object with their matching,      * values from the properties.,      *,      * @param source the source text containing the variables to substitute, null returns null,      * @param valueProperties the properties with values, may be null,      * @return the result of the replace operation,      */,     public static String replace(final Object source, final Properties valueProperties) {,         if (valueProperties == null) {,             return source.toString();,         },         final Map<String, String> valueMap = new HashMap<String, String>();,         final Enumeration<?> propNames = valueProperties.propertyNames();,         while (propNames.hasMoreElements()) {,             final String propName = (String) propNames.nextElement();,             final String propValue = valueProperties.getProperty(propName);,             valueMap.put(propName, propValue);,         },         return StrSubstitutor.replace(source, valueMap);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source string as a template.,      *,      * @param source  the string to replace in, null returns null,      * @return the result of the replace operation,      */,     public String replace(final String source) {,         return replace(null, source);,     },     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source string as a template.,      *,      * @param event The current LogEvent if there is one.,      * @param source  the string to replace in, null returns null,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final String source) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(source);,         if (!substitute(event, buf, 0, source.length())) {,             return source;,         },         return buf.toString();,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source string as a template.,      * <p>,      * Only the specified portion of the string will be processed.,      * The rest of the string is not processed, and is not returned.,      * </p>,      *,      * @param source  the string to replace in, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final String source, final int offset, final int length) {,         return replace(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source string as a template.,      * <p>,      * Only the specified portion of the string will be processed.,      * The rest of the string is not processed, and is not returned.,      * </p>,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the string to replace in, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final String source, final int offset, final int length) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(length).append(source, offset, length);,         if (!substitute(event, buf, 0, length)) {,             return source.substring(offset, offset + length);,         },         return buf.toString();,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source array as a template.,      * The array is not altered by this method.,      *,      * @param source  the character array to replace in, not altered, null returns null,      * @return the result of the replace operation,      */,     public String replace(final char[] source) {,         return replace(null, source);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source array as a template.,      * The array is not altered by this method.,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the character array to replace in, not altered, null returns null,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final char[] source) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(source.length).append(source);,         substitute(event, buf, 0, source.length);,         return buf.toString();,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source array as a template.,      * The array is not altered by this method.,      * <p>,      * Only the specified portion of the array will be processed.,      * The rest of the array is not processed, and is not returned.,      * </p>,      *,      * @param source  the character array to replace in, not altered, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final char[] source, final int offset, final int length) {,         return replace(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source array as a template.,      * The array is not altered by this method.,      * <p>,      * Only the specified portion of the array will be processed.,      * The rest of the array is not processed, and is not returned.,      * </p>,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the character array to replace in, not altered, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final char[] source, final int offset, final int length) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(length).append(source, offset, length);,         substitute(event, buf, 0, length);,         return buf.toString();,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source buffer as a template.,      * The buffer is not altered by this method.,      *,      * @param source  the buffer to use as a template, not changed, null returns null,      * @return the result of the replace operation,      */,     public String replace(final StringBuffer source) {,         return replace(null, source);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source buffer as a template.,      * The buffer is not altered by this method.,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the buffer to use as a template, not changed, null returns null,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final StringBuffer source) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(source.length()).append(source);,         substitute(event, buf, 0, buf.length());,         return buf.toString();,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source buffer as a template.,      * The buffer is not altered by this method.,      * <p>,      * Only the specified portion of the buffer will be processed.,      * The rest of the buffer is not processed, and is not returned.,      * </p>,      *,      * @param source  the buffer to use as a template, not changed, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final StringBuffer source, final int offset, final int length) {,         return replace(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source buffer as a template.,      * The buffer is not altered by this method.,      * <p>,      * Only the specified portion of the buffer will be processed.,      * The rest of the buffer is not processed, and is not returned.,      * </p>,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the buffer to use as a template, not changed, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final StringBuffer source, final int offset, final int length) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(length).append(source, offset, length);,         substitute(event, buf, 0, length);,         return buf.toString();,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source builder as a template.,      * The builder is not altered by this method.,      *,      * @param source  the builder to use as a template, not changed, null returns null,      * @return the result of the replace operation,      */,     public String replace(final StringBuilder source) {,         return replace(null, source);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source builder as a template.,      * The builder is not altered by this method.,      *,      * @param event The LogEvent.,      * @param source  the builder to use as a template, not changed, null returns null.,      * @return the result of the replace operation.,      */,     public String replace(final LogEvent event, final StringBuilder source) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(source.length()).append(source);,         substitute(event, buf, 0, buf.length());,         return buf.toString();,     },     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source builder as a template.,      * The builder is not altered by this method.,      * <p>,      * Only the specified portion of the builder will be processed.,      * The rest of the builder is not processed, and is not returned.,      * </p>,      *,      * @param source  the builder to use as a template, not changed, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final StringBuilder source, final int offset, final int length) {,         return replace(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables with their matching values,      * from the resolver using the given source builder as a template.,      * The builder is not altered by this method.,      * <p>,      * Only the specified portion of the builder will be processed.,      * The rest of the builder is not processed, and is not returned.,      * </p>,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the builder to use as a template, not changed, null returns null,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the array to be processed, must be valid,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final StringBuilder source, final int offset, final int length) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder(length).append(source, offset, length);,         substitute(event, buf, 0, length);,         return buf.toString();,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables in the given source object with,      * their matching values from the resolver. The input source object is,      * converted to a string using <code>toString</code> and is not altered.,      *,      * @param source  the source to replace in, null returns null,      * @return the result of the replace operation,      */,     public String replace(final Object source) {,         return replace(null, source);,     },     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables in the given source object with,      * their matching values from the resolver. The input source object is,      * converted to a string using <code>toString</code> and is not altered.,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the source to replace in, null returns null,      * @return the result of the replace operation,      */,     public String replace(final LogEvent event, final Object source) {,         if (source == null) {,             return null;,         },         final StringBuilder buf = new StringBuilder().append(source);,         substitute(event, buf, 0, buf.length());,         return buf.toString();,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables within the given source buffer,      * with their matching values from the resolver.,      * The buffer is updated with the result.,      *,      * @param source  the buffer to replace in, updated, null returns zero,      * @return true if altered,      */,     public boolean replaceIn(final StringBuffer source) {,         if (source == null) {,             return false;,         },         return replaceIn(source, 0, source.length());,     }, ,     /**,      * Replaces all the occurrences of variables within the given source buffer,      * with their matching values from the resolver.,      * The buffer is updated with the result.,      * <p>,      * Only the specified portion of the buffer will be processed.,      * The rest of the buffer is not processed, but it is not deleted.,      * </p>,      *,      * @param source  the buffer to replace in, updated, null returns zero,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the buffer to be processed, must be valid,      * @return true if altered,      */,     public boolean replaceIn(final StringBuffer source, final int offset, final int length) {,         return replaceIn(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables within the given source buffer,      * with their matching values from the resolver.,      * The buffer is updated with the result.,      * <p>,      * Only the specified portion of the buffer will be processed.,      * The rest of the buffer is not processed, but it is not deleted.,      * </p>,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the buffer to replace in, updated, null returns zero,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the buffer to be processed, must be valid,      * @return true if altered,      */,     public boolean replaceIn(final LogEvent event, final StringBuffer source, final int offset, final int length) {,         if (source == null) {,             return false;,         },         final StringBuilder buf = new StringBuilder(length).append(source, offset, length);,         if (!substitute(event, buf, 0, length)) {,             return false;,         },         source.replace(offset, offset + length, buf.toString());,         return true;,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables within the given source,      * builder with their matching values from the resolver.,      *,      * @param source  the builder to replace in, updated, null returns zero,      * @return true if altered,      */,     public boolean replaceIn(final StringBuilder source) {,         return replaceIn(null, source);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Replaces all the occurrences of variables within the given source,      * builder with their matching values from the resolver.,      *,      * @param event the current LogEvent, if one exists.,      * @param source  the builder to replace in, updated, null returns zero,      * @return true if altered,      */,     public boolean replaceIn(final LogEvent event, final StringBuilder source) {,         if (source == null) {,             return false;,         },         return substitute(event, source, 0, source.length());,     },     /**,      * Replaces all the occurrences of variables within the given source,      * builder with their matching values from the resolver.,      * <p>,      * Only the specified portion of the builder will be processed.,      * The rest of the builder is not processed, but it is not deleted.,      * </p>,      *,      * @param source  the builder to replace in, null returns zero,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the builder to be processed, must be valid,      * @return true if altered,      */,     public boolean replaceIn(final StringBuilder source, final int offset, final int length) {,         return replaceIn(null, source, offset, length);,     }, ,     /**,      * Replaces all the occurrences of variables within the given source,      * builder with their matching values from the resolver.,      * <p>,      * Only the specified portion of the builder will be processed.,      * The rest of the builder is not processed, but it is not deleted.,      * </p>,      *,      * @param event   the current LogEvent, if one is present.,      * @param source  the builder to replace in, null returns zero,      * @param offset  the start offset within the array, must be valid,      * @param length  the length within the builder to be processed, must be valid,      * @return true if altered,      */,     public boolean replaceIn(final LogEvent event, final StringBuilder source, final int offset, final int length) {,         if (source == null) {,             return false;,         },         return substitute(event, source, offset, length);,     }, ,     //-----------------------------------------------------------------------,     /**,      * Internal method that substitutes the variables.,      * <p>,      * Most users of this class do not need to call this method. This method will,      * be called automatically by another (public) method.,      * </p>,      * <p>,      * Writers of subclasses can override this method if they need access to,      * the substitution process at the start or end.,      * </p>,      *,      * @param event The current LogEvent, if there is one.,      * @param buf  the string builder to substitute into, not null,      * @param offset  the start offset within the builder, must be valid,      * @param length  the length within the builder to be processed, must be valid,      * @return true if altered,      */,     protected boolean substitute(final LogEvent event, final StringBuilder buf, final int offset, final int length) {,         return substitute(event, buf, offset, length, null) > 0;,     }, ,     /**,      * Recursive handler for multiple levels of interpolation. This is the main,      * interpolation method, which resolves the values of all variable references,      * contained in the passed in text.,      *,      * @param event The current LogEvent, if there is one.,      * @param buf  the string builder to substitute into, not null,      * @param offset  the start offset within the builder, must be valid,      * @param length  the length within the builder to be processed, must be valid,      * @param priorVariables  the stack keeping track of the replaced variables, may be null,      * @return the length change that occurs, unless priorVariables is null when the int,      *  represents a boolean flag as to whether any change occurred.,      */,     private int substitute(final LogEvent event, final StringBuilder buf, final int offset, final int length,,                            List<String> priorVariables) {,         final StrMatcher prefixMatcher = getVariablePrefixMatcher();,         final StrMatcher suffixMatcher = getVariableSuffixMatcher();,         final char escape = getEscapeChar();,         final StrMatcher valueDelimiterMatcher = getValueDelimiterMatcher();,         final boolean substitutionInVariablesEnabled = isEnableSubstitutionInVariables();, ,         final boolean top = (priorVariables == null);,         boolean altered = false;,         int lengthChange = 0;,         char[] chars = getChars(buf);,         int bufEnd = offset + length;,         int pos = offset;,         while (pos < bufEnd) {,             final int startMatchLen = prefixMatcher.isMatch(chars, pos, offset,,                     bufEnd);,             if (startMatchLen == 0) {,                 pos++;,             } else {,                 // found variable start marker,                 if (pos > offset && chars[pos - 1] == escape) {,                     // escaped,                     buf.deleteCharAt(pos - 1);,                     chars = getChars(buf);,                     lengthChange--;,                     altered = true;,                     bufEnd--;,                 } else {,                     // find suffix,                     final int startPos = pos;,                     pos += startMatchLen;,                     int endMatchLen = 0;,                     int nestedVarCount = 0;,                     while (pos < bufEnd) {,                         if (substitutionInVariablesEnabled,                                 && (endMatchLen = prefixMatcher.isMatch(chars,,                                         pos, offset, bufEnd)) != 0) {,                             // found a nested variable start,                             nestedVarCount++;,                             pos += endMatchLen;,                             continue;,                         }, ,                         endMatchLen = suffixMatcher.isMatch(chars, pos, offset,,                                 bufEnd);,                         if (endMatchLen == 0) {,                             pos++;,                         } else {,                             // found variable end marker,                             if (nestedVarCount == 0) {,                                 String varNameExpr = new String(chars, startPos,                                         + startMatchLen, pos - startPos,                                         - startMatchLen);,                                 if (substitutionInVariablesEnabled) {,                                     final StringBuilder bufName = new StringBuilder(varNameExpr);,                                     substitute(event, bufName, 0, bufName.length());,                                     varNameExpr = bufName.toString();,                                 },                                 pos += endMatchLen;,                                 final int endPos = pos;, ,                                 String varName = varNameExpr;,                                 String varDefaultValue = null;, ,                                 if (valueDelimiterMatcher != null) {,                                     final char [] varNameExprChars = varNameExpr.toCharArray();,                                     int valueDelimiterMatchLen = 0;,                                     for (int i = 0; i < varNameExprChars.length; i++) {,                                         // if there's any nested variable when nested variable substitution disabled, then stop resolving name and default value.,                                         if (!substitutionInVariablesEnabled,                                                 && prefixMatcher.isMatch(varNameExprChars, i, i, varNameExprChars.length) != 0) {,                                             break;,                                         },                                         if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {,                                             varName = varNameExpr.substring(0, i);,                                             varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);,                                             break;,                                         },                                     },                                 }, ,                                 // on the first call initialize priorVariables,                                 if (priorVariables == null) {,                                     priorVariables = new ArrayList<String>();,                                     priorVariables.add(new String(chars,,                                             offset, length + lengthChange));,                                 }, ,                                 // handle cyclic substitution,                                 checkCyclicSubstitution(varName, priorVariables);,                                 priorVariables.add(varName);, ,                                 // resolve the variable,                                 String varValue = resolveVariable(event, varName, buf,,                                         startPos, endPos);,                                 if (varValue == null) {,                                     varValue = varDefaultValue;,                                 },                                 if (varValue != null) {,                                     // recursive replace,                                     final int varLen = varValue.length();,                                     buf.replace(startPos, endPos, varValue);,                                     altered = true;,                                     int change = substitute(event, buf, startPos,,                                             varLen, priorVariables);,                                     change = change,                                             + (varLen - (endPos - startPos));,                                     pos += change;,                                     bufEnd += change;,                                     lengthChange += change;,                                     chars = getChars(buf); // in case buffer was,                                                         // altered,                                 }, ,                                 // remove variable from the cyclic stack,                                 priorVariables,                                         .remove(priorVariables.size() - 1);,                                 break;,                             } else {,                                 nestedVarCount--;,                                 pos += endMatchLen;,                             },                         },                     },                 },             },         },         if (top) {,             return altered ? 1 : 0;,         },         return lengthChange;,     }, ,     /**,      * Checks if the specified variable is already in the stack (list) of variables.,      *,      * @param varName  the variable name to check,      * @param priorVariables  the list of prior variables,      */,     private void checkCyclicSubstitution(final String varName, final List<String> priorVariables) {,         if (!priorVariables.contains(varName)) {,             return;,         },         final StringBuilder buf = new StringBuilder(BUF_SIZE);,         buf.append("Infinite loop in property interpolation of ");,         buf.append(priorVariables.remove(0));,         buf.append(": ");,         appendWithSeparators(buf, priorVariables, "->");,         throw new IllegalStateException(buf.toString());,     }, ,     /**,      * Internal method that resolves the value of a variable.,      * <p>,      * Most users of this class do not need to call this method. This method is,      * called automatically by the substitution process.,      * </p>,      * <p>,      * Writers of subclasses can override this method if they need to alter,      * how each substitution occurs. The method is passed the variable's name,      * and must return the corresponding value. This implementation uses the,      * {@link #getVariableResolver()} with the variable's name as the key.,      * </p>,      *,      * @param event The LogEvent, if there is one.,      * @param variableName  the name of the variable, not null,      * @param buf  the buffer where the substitution is occurring, not null,      * @param startPos  the start position of the variable including the prefix, valid,      * @param endPos  the end position of the variable including the suffix, valid,      * @return the variable's value or <b>null</b> if the variable is unknown,      */,     protected String resolveVariable(final LogEvent event, final String variableName, final StringBuilder buf,,                                      final int startPos, final int endPos) {,         final StrLookup resolver = getVariableResolver();,         if (resolver == null) {,             return null;,         },         return resolver.lookup(event, variableName);,     }, ,     // Escape,     //-----------------------------------------------------------------------,     /**,      * Returns the escape character.,      *,      * @return the character used for escaping variable references,      */,     public char getEscapeChar() {,         return this.escapeChar;,     }, ,     /**,      * Sets the escape character.,      * If this character is placed before a variable reference in the source,      * text, this variable will be ignored.,      *,      * @param escapeCharacter  the escape character (0 for disabling escaping),      */,     public void setEscapeChar(final char escapeCharacter) {,         this.escapeChar = escapeCharacter;,     }, ,     // Prefix,     //-----------------------------------------------------------------------,     /**,      * Gets the variable prefix matcher currently in use.,      * <p>,      * The variable prefix is the character or characters that identify the,      * start of a variable. This prefix is expressed in terms of a matcher,      * allowing advanced prefix matches.,      * </p>,      *,      * @return the prefix matcher in use,      */,     public StrMatcher getVariablePrefixMatcher() {,         return prefixMatcher;,     }, ,     /**,      * Sets the variable prefix matcher currently in use.,      * <p>,      * The variable prefix is the character or characters that identify the,      * start of a variable. This prefix is expressed in terms of a matcher,      * allowing advanced prefix matches.,      * </p>,      *,      * @param prefixMatcher  the prefix matcher to use, null ignored,      * @return this, to enable chaining,      * @throws IllegalArgumentException if the prefix matcher is null,      */,     public StrSubstitutor setVariablePrefixMatcher(final StrMatcher prefixMatcher) {,         if (prefixMatcher == null) {,             throw new IllegalArgumentException("Variable prefix matcher must not be null!");,         },         this.prefixMatcher = prefixMatcher;,         return this;,     }, ,     /**,      * Sets the variable prefix to use.,      * <p>,      * The variable prefix is the character or characters that identify the,      * start of a variable. This method allows a single character prefix to,      * be easily set.,      * </p>,      *,      * @param prefix  the prefix character to use,      * @return this, to enable chaining,      */,     public StrSubstitutor setVariablePrefix(final char prefix) {,         return setVariablePrefixMatcher(StrMatcher.charMatcher(prefix));,     }, ,     /**,      * Sets the variable prefix to use.,      * <p>,      * The variable prefix is the character or characters that identify the,      * start of a variable. This method allows a string prefix to be easily set.,      * </p>,      *,      * @param prefix  the prefix for variables, not null,      * @return this, to enable chaining,      * @throws IllegalArgumentException if the prefix is null,      */,     public StrSubstitutor setVariablePrefix(final String prefix) {,        if (prefix == null) {,             throw new IllegalArgumentException("Variable prefix must not be null!");,         },         return setVariablePrefixMatcher(StrMatcher.stringMatcher(prefix));,     }, ,     // Suffix,     //-----------------------------------------------------------------------,     /**,      * Gets the variable suffix matcher currently in use.,      * <p>,      * The variable suffix is the character or characters that identify the,      * end of a variable. This suffix is expressed in terms of a matcher,      * allowing advanced suffix matches.,      * </p>,      *,      * @return the suffix matcher in use,      */,     public StrMatcher getVariableSuffixMatcher() {,         return suffixMatcher;,     }, ,     /**,      * Sets the variable suffix matcher currently in use.,      * <p>,      * The variable suffix is the character or characters that identify the,      * end of a variable. This suffix is expressed in terms of a matcher,      * allowing advanced suffix matches.,      * </p>,      *,      * @param suffixMatcher  the suffix matcher to use, null ignored,      * @return this, to enable chaining,      * @throws IllegalArgumentException if the suffix matcher is null,      */,     public StrSubstitutor setVariableSuffixMatcher(final StrMatcher suffixMatcher) {,         if (suffixMatcher == null) {,             throw new IllegalArgumentException("Variable suffix matcher must not be null!");,         },         this.suffixMatcher = suffixMatcher;,         return this;,     }, ,     /**,      * Sets the variable suffix to use.,      * <p>,      * The variable suffix is the character or characters that identify the,      * end of a variable. This method allows a single character suffix to,      * be easily set.,      * </p>,      *,      * @param suffix  the suffix character to use,      * @return this, to enable chaining,      */,     public StrSubstitutor setVariableSuffix(final char suffix) {,         return setVariableSuffixMatcher(StrMatcher.charMatcher(suffix));,     }, ,     /**,      * Sets the variable suffix to use.,      * <p>,      * The variable suffix is the character or characters that identify the,      * end of a variable. This method allows a string suffix to be easily set.,      * </p>,      *,      * @param suffix  the suffix for variables, not null,      * @return this, to enable chaining,      * @throws IllegalArgumentException if the suffix is null,      */,     public StrSubstitutor setVariableSuffix(final String suffix) {,        if (suffix == null) {,             throw new IllegalArgumentException("Variable suffix must not be null!");,         },         return setVariableSuffixMatcher(StrMatcher.stringMatcher(suffix));,     }, ,     // Variable Default Value Delimiter,     //-----------------------------------------------------------------------,     /**,      * Gets the variable default value delimiter matcher currently in use.,      * <p>,      * The variable default value delimiter is the character or characters that delimit the,      * variable name and the variable default value. This delimiter is expressed in terms of a matcher,      * allowing advanced variable default value delimiter matches.,      * </p>,      * <p>,      * If it returns null, then the variable default value resolution is disabled.,      * </p>,      *,      * @return the variable default value delimiter matcher in use, may be null,      */,     public StrMatcher getValueDelimiterMatcher() {,         return valueDelimiterMatcher;,     }, ,     /**,      * Sets the variable default value delimiter matcher to use.,      * <p>,      * The variable default value delimiter is the character or characters that delimit the,      * variable name and the variable default value. This delimiter is expressed in terms of a matcher,      * allowing advanced variable default value delimiter matches.,      * </p>,      * <p>,      * If the <code>valueDelimiterMatcher</code> is null, then the variable default value resolution,      * becomes disabled.,      * </p>,      *,      * @param valueDelimiterMatcher  variable default value delimiter matcher to use, may be null,      * @return this, to enable chaining,      */,     public StrSubstitutor setValueDelimiterMatcher(final StrMatcher valueDelimiterMatcher) {,         this.valueDelimiterMatcher = valueDelimiterMatcher;,         return this;,     }, ,     /**,      * Sets the variable default value delimiter to use.,      * <p>,      * The variable default value delimiter is the character or characters that delimit the,      * variable name and the variable default value. This method allows a single character,      * variable default value delimiter to be easily set.,      * </p>,      *,      * @param valueDelimiter  the variable default value delimiter character to use,      * @return this, to enable chaining,      */,     public StrSubstitutor setValueDelimiter(final char valueDelimiter) {,         return setValueDelimiterMatcher(StrMatcher.charMatcher(valueDelimiter));,     }, ,     /**,      * Sets the variable default value delimiter to use.,      * <p>,      * The variable default value delimiter is the character or characters that delimit the,      * variable name and the variable default value. This method allows a string,      * variable default value delimiter to be easily set.,      * </p>,      * <p>,      * If the <code>valueDelimiter</code> is null or empty string, then the variable default,      * value resolution becomes disabled.,      * </p>,      *,      * @param valueDelimiter  the variable default value delimiter string to use, may be null or empty,      * @return this, to enable chaining,      */,     public StrSubstitutor setValueDelimiter(final String valueDelimiter) {,         if (Strings.isEmpty(valueDelimiter)) {,             setValueDelimiterMatcher(null);,             return this;,         },         return setValueDelimiterMatcher(StrMatcher.stringMatcher(valueDelimiter));,     }, ,     // Resolver,     //-----------------------------------------------------------------------,     /**,      * Gets the VariableResolver that is used to lookup variables.,      *,      * @return the VariableResolver,      */,     public StrLookup getVariableResolver() {,         return this.variableResolver;,     }, ,     /**,      * Sets the VariableResolver that is used to lookup variables.,      *,      * @param variableResolver  the VariableResolver,      */,     public void setVariableResolver(final StrLookup variableResolver) {,         this.variableResolver = variableResolver;,     }, ,     // Substitution support in variable names,     //-----------------------------------------------------------------------,     /**,      * Returns a flag whether substitution is done in variable names.,      *,      * @return the substitution in variable names flag,      */,     public boolean isEnableSubstitutionInVariables() {,         return enableSubstitutionInVariables;,     }, ,     /**,      * Sets a flag whether substitution is done in variable names. If set to,      * <b>true</b>, the names of variables can contain other variables which are,      * processed first before the original variable is evaluated, e.g.,      * <code>${jre-${java.version}}</code>. The default value is <b>false</b>.,      *,      * @param enableSubstitutionInVariables the new value of the flag,      */,     public void setEnableSubstitutionInVariables(final boolean enableSubstitutionInVariables) {,         this.enableSubstitutionInVariables = enableSubstitutionInVariables;,     }, ,     private char[] getChars(final StringBuilder sb) {,         final char[] chars = new char[sb.length()];,         sb.getChars(0, sb.length(), chars, 0);,         return chars;,     }, ,     /**,      * Appends a iterable placing separators between each value, but,      * not before the first or after the last.,      * Appending a null iterable will have no effect..,      *,      * @param sb StringBuilder that contains the String being constructed.,      * @param iterable  the iterable to append,      * @param separator  the separator to use, null means no separator,      */,     public void appendWithSeparators(final StringBuilder sb, final Iterable<?> iterable, String separator) {,         if (iterable != null) {,             separator = separator == null ? Strings.EMPTY : separator;,             final Iterator<?> it = iterable.iterator();,             while (it.hasNext()) {,                 sb.append(it.next());,                 if (it.hasNext()) {,                     sb.append(separator);,                 },             },         },     }, ,     @Override,     public String toString() {,         return "StrSubstitutor(" + variableResolver.toString() + ')';],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/web/Log4jWebInitializerImplTest.java,,454-460,[        expectLastCall().andAnswer(new IAnswer<Void>() {,             @Override,             public Void answer() {,                 final LoggerContext context = ContextAnchor.THREAD_CONTEXT.get();,                 assertNotNull("The context should not be null.", context);,                 assertSame("The context is not correct.", loggerContext, context);,                 return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/web/TestAsyncServlet.java,,37-42,[        asyncContext.start(WebLoggerContextUtils.wrapExecutionContext(this.getServletContext(), new Runnable() {,             @Override,             public void run() {,                 final Logger logger = LogManager.getLogger(TestAsyncServlet.class);,                 logger.info("Hello, servlet!");,             }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/slf4j/EventDataConverter.java,convertEvent,46-46,[        } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/slf4j/InitialLoggerContext.java,getLogger,65-65,[        return context.getLogger(testClassName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/slf4j/InitialLoggerContext.java,getLogger,69-69,[        return context.getLogger(name);],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/slf4j/SLF4JLogger.java,logMessage,176-177,[                    logger.error(getMarker(marker), message.getFormattedMessage(), message.getParameters(), t);,                     break;],,logMessage,179-179,[                    logger.error(getMarker(marker), message.getFormattedMessage(), message.getParameters(), t);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/slf4j/impl/StaticLoggerBinder.java,,34-34,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/slf4j/impl/StaticLoggerBinder.java,,34-34,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
