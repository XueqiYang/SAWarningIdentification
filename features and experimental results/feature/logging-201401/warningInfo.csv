STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/BasicConfigurationFactory.java,<init>,54-54,[            final Level level = (levelName != null && Level.valueOf(levelName) != null) ? Level.valueOf(levelName) : Level.DEBUG;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/log4j/BasicConfigurationFactory.java,,50-60,[        public BasicConfiguration() {,             final LoggerConfig root = getRootLogger();,             setName("BasicConfiguration");,             final String levelName = System.getProperty(DEFAULT_LEVEL);,             final Level level = (levelName != null && Level.valueOf(levelName) != null) ? Level.valueOf(levelName) : Level.DEBUG;,             root.setLevel(level);,         }, ,         @Override,         protected void doConfigure() {,         }],,
I18N,DM_CONVERT_CASE,org/apache/log4j/Level.java,toLevel,176-176,[        final String s = sArg.toUpperCase();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/Level.java,readObject,223-223,[        if (levelStr == null) {],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testALL,212-212,[        assertTrue(Level.ALL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testDEBUG,196-196,[        assertTrue(Level.DEBUG instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testERROR,172-172,[        assertTrue(Level.ERROR instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testFATAL,164-164,[        assertTrue(Level.FATAL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testINFO,188-188,[        assertTrue(Level.INFO instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testOFF,156-156,[        assertTrue(Level.OFF instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testTRACE,204-204,[        assertTrue(Level.TRACE instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testWARN,180-180,[        assertTrue(Level.WARN instanceof Level);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testDEBUG,196-197,[        assertTrue(Level.DEBUG instanceof Level);,     }],,testDebug,199-237,[        currentLevel = Level.DEBUG;, ,         currentEvent = events[0];,         debug("Hello");,         debug(null, "Hello");,         currentEvent = events[1];,         debug(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         debug("Hello", t);,         debug(null, "Hello", t);,         currentEvent = events[3];,         debug(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         debug(obj);,         currentEvent = events[5];,         debug(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         debug(obj, t);,         debug(null, obj, t);,         currentEvent = events[7];,         debug(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         debug(pattern, p1, p2);,         currentEvent = events[9];,         debug(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         debug(simple);,         debug(null, simple);,         debug(null, simple, null);,         currentEvent = events[11];,         debug(simple, t);,         debug(null, simple, t);,         currentEvent = events[12];,         debug(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         debug(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         debug(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testERROR,172-173,[        assertTrue(Level.ERROR instanceof Level);,     }],,testError,241-279,[        currentLevel = Level.ERROR;, ,         currentEvent = events[0];,         error("Hello");,         error(null, "Hello");,         currentEvent = events[1];,         error(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         error("Hello", t);,         error(null, "Hello", t);,         currentEvent = events[3];,         error(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         error(obj);,         currentEvent = events[5];,         error(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         error(obj, t);,         error(null, obj, t);,         currentEvent = events[7];,         error(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         error(pattern, p1, p2);,         currentEvent = events[9];,         error(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         error(simple);,         error(null, simple);,         error(null, simple, null);,         currentEvent = events[11];,         error(simple, t);,         error(null, simple, t);,         currentEvent = events[12];,         error(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         error(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         error(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testFATAL,164-165,[        assertTrue(Level.FATAL instanceof Level);,     }],,testFatal,94-95,[        assertTrue(Priority.FATAL instanceof Level);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testINFO,188-189,[        assertTrue(Level.INFO instanceof Level);,     }],,testInfo,325-363,[        currentLevel = Level.INFO;, ,         currentEvent = events[0];,         info("Hello");,         info(null, "Hello");,         currentEvent = events[1];,         info(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         info("Hello", t);,         info(null, "Hello", t);,         currentEvent = events[3];,         info(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         info(obj);,         currentEvent = events[5];,         info(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         info(obj, t);,         info(null, obj, t);,         currentEvent = events[7];,         info(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         info(pattern, p1, p2);,         currentEvent = events[9];,         info(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         info(simple);,         info(null, simple);,         info(null, simple, null);,         currentEvent = events[11];,         info(simple, t);,         info(null, simple, t);,         currentEvent = events[12];,         info(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         info(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         info(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testTRACE,204-205,[        assertTrue(Level.TRACE instanceof Level);,     }],,testTrace,386-406,[        final ListAppender appender = new ListAppender("List");,         appender.start();,         final Logger root = Logger.getRootLogger();,         root.getLogger().addAppender(appender);,         root.setLevel(Level.INFO);, ,         final Logger tracer = Logger.getLogger("com.example.Tracer");,         tracer.setLevel(Level.TRACE);, ,         tracer.trace("Message 1");,         root.trace("Discarded Message");,         root.trace("Discarded Message");, ,         final List<LogEvent> msgs = appender.getEvents();,         assertEquals(1, msgs.size());,         final LogEvent event = msgs.get(0);,         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());,         assertEquals("Message 1", event.getMessage().getFormat());,         appender.stop();,         root.getLogger().removeAppender(appender);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testWARN,180-181,[        assertTrue(Level.WARN instanceof Level);,     }],,testWarn,661-699,[        currentLevel = Level.WARN;, ,         currentEvent = events[0];,         warn("Hello");,         warn(null, "Hello");,         currentEvent = events[1];,         warn(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         warn("Hello", t);,         warn(null, "Hello", t);,         currentEvent = events[3];,         warn(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         warn(obj);,         currentEvent = events[5];,         warn(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         warn(obj, t);,         warn(null, obj, t);,         currentEvent = events[7];,         warn(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         warn(pattern, p1, p2);,         currentEvent = events[9];,         warn(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         warn(simple);,         warn(null, simple);,         warn(null, simple, null);,         currentEvent = events[11];,         warn(simple, t);,         warn(null, simple, t);,         currentEvent = events[12];,         warn(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         warn(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         warn(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LoggerTest.java,tearDown,75-79,[        final LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();,         ctx.reconfigure();,         a1 = null;,         a2 = null;,     }],,teardown,65-66,[        deleteFile();,     }],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/log4j/LoggingTest.java,before,55-55,[        config = ctx.getConfiguration();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/log4j/LoggingTest.java,,55-55,[        config = ctx.getConfiguration();],,
PERFORMANCE,DM_STRING_CTOR,org/apache/log4j/VelocityTest.java,testVelocity,35-35,[        context.put( "name", new String("Velocity") );],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,120-120,[            final FileInputStream is = new FileInputStream(witnessFile);],,assertStreamEquals,121-121,[            final int bytesRead = is.read(expected);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,148-148,[            final FileOutputStream os = new FileOutputStream(witnessFile);],,assertStreamEquals,149-149,[            os.write(actual);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,106-106,[                final BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,107-107,[                final PrintWriter out = new PrintWriter(socket.getOutputStream());],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,88-88,[                    notifyAll();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,99-99,[                    if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,121-121,[        } catch (final Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,stop,153-153,[            serverSocket.close();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,269-269,[                server.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,269-269,[                server.wait();],,
I18N,DM_CONVERT_CASE,org/apache/logging/dumbster/smtp/SmtpRequest.java,createRequest,189-189,[            final String su = s.toUpperCase();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testDebug,199-199,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testError,241-241,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testFatal,283-283,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testInfo,325-325,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogDebug,367-367,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogError,409-409,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogFatal,451-451,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogInfo,493-493,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogTrace,535-535,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testLogWarn,577-577,[        currentLevel = Level.WARN;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testTrace,619-619,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testWarn,661-661,[        currentLevel = Level.WARN;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getByteBuffer,258-258,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getBytes,264-264,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,135-135,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j,182-182,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2,210-210,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2Debug,219-219,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2IsDebug,171-171,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4jIsDebug,152-152,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logback,191-191,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackDebug,200-200,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackIsDebug,161-161,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToChannel,247-247,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToStream,238-238,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToWriter,229-229,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,129-129,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,130-130,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,135-135,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,136-136,[        final long result3 = writeToWriter(COUNT, w);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/EventLoggerTest.java,setup,39-40,[        results.clear();,     }],,setUp,38-39,[        sentMessages.clear();,     }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,log4j2,123-123,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,logback,113-113,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/FormatterLoggerManualExample.java,,37-37,[    public static Logger logger = LogManager.getFormatterLogger("Foo");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/Log4jInitPerformance.java,testInitialize,45-45,[        final InputStream is = new ByteArrayInputStream(log4jConfigString.getBytes());],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/LoggerTest.java,mdc,105-105,[    }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/LoggerTest.java,mdc,105-105,[    }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getByteBuffer,184-184,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getBytes,190-190,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,110-110,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j,126-126,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j2,145-145,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,logback,135-135,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToChannel,173-173,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToStream,164-164,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToWriter,155-155,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,104-104,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,105-105,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,110-110,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,111-111,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getByteBuffer,131-131,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getBytes,137-137,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,76-76,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToChannel,120-120,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToStream,111-111,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToWriter,102-102,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,70-70,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,71-71,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,76-76,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,77-77,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,log,78-78,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,log,77-77,[            t.printStackTrace(new PrintStream(baos));],,
STYLE,UC_USELESS_OBJECT,org/apache/logging/log4j/ThreadContext.java,push,203-203,[        contextStack.clear();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextTest.java,,180-193,[        public TestThread(final StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             final String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clear();,         }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/BasicConfigurationFactory.java,getSupportedTypes,38-38,[        return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/BasicConfigurationFactory.java,<init>,54-54,[            final Level level = (l != null && Level.valueOf(l) != null) ? Level.valueOf(l) : Level.ERROR;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/BasicConfigurationFactory.java,,50-56,[        public BasicConfiguration() {, ,             final LoggerConfig root = getRootLogger();,             final String l = System.getProperty(DEFAULT_LEVEL);,             final Level level = (l != null && Level.valueOf(l) != null) ? Level.valueOf(l) : Level.ERROR;,             root.setLevel(level);,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/FileConfigTest.java,testReconfiguration,78-78,[        file.setLastModified(newTime);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/FileConfigTest.java,before,65-65,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/FileConfigTest.java,before,62-62,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LateConfigTest.java,testReconfiguration,66-66,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/LateConfigTest.java,,48-48,[    private final org.apache.logging.log4j.Logger logger = LogManager.getLogger("LoggerTest");],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/Logger.java,getLevel,107-107,[    public void log(final Marker marker, final String fqcn, final Level level, Message data, final Throwable t) {],,setLevel,97-100,[,     /**,      * Returns the Level associated with the Logger.,      * @return the Level associate with the Logger.],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/logging/log4j/core/Logger.java,,259-388,[            this.level = level;,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final LoggerConfig lc) {,             this.config = pc.config;,             this.loggerConfig = lc;,             this.level = lc.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         // LOG4J2-151: changed visibility to public,         public void logEvent(final LogEvent event) {,             config.getConfigurationMonitor().checkConfiguration();,             loggerConfig.log(event);,         }, ,         boolean filter(final Level level, final Marker marker, final String msg) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, p1);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         },     }, ,     /**,      * Returns a String representation of this instance in the form {@code "name:level[ in context_name]"}.,      * @return A String describing this Logger instance.,      */,     @Override,     public String toString() {,         final String nameLevel = "" + getName() + ":" + getLevel();,         if (context == null) {,             return nameLevel;,         },         final String contextName = context.getName();,         return contextName == null ? nameLevel : nameLevel + " in " + contextName;,     }, }],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/logging/log4j/core/LoggerContext.java,,36-254,[import org.apache.logging.log4j.core.config.NullConfiguration;, import org.apache.logging.log4j.core.config.Reconfigurable;, import org.apache.logging.log4j.core.helpers.Assert;, import org.apache.logging.log4j.core.helpers.NetUtils;, import org.apache.logging.log4j.message.MessageFactory;, import org.apache.logging.log4j.spi.AbstractLogger;, import org.apache.logging.log4j.status.StatusLogger;, , /**,  * The LoggerContext is the anchor for the logging system. It maintains a list,  * of all the loggers requested by applications and a reference to the,  * Configuration. The Configuration will contain the configured loggers,,  * appenders, filters, etc and will be atomically updated whenever a reconfigure,  * occurs.,  */, public class LoggerContext implements org.apache.logging.log4j.spi.LoggerContext, ConfigurationListener, LifeCycle {, ,     public static final String PROPERTY_CONFIG = "config";,     private static final StatusLogger LOGGER = StatusLogger.getLogger();, ,     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();,     private final CopyOnWriteArrayList<PropertyChangeListener> propertyChangeListeners = new CopyOnWriteArrayList<PropertyChangeListener>();, ,     /**,      * The Configuration is volatile to guarantee that initialization of the,      * Configuration has completed before the reference is updated.,      */,     private volatile Configuration config = new DefaultConfiguration();,     private Object externalContext;,     private final String name;,     private URI configLocation;, ,     private ShutdownThread shutdownThread = null;, ,     /**,      * Status of the LoggerContext.,      */,     public enum Status {,         /** Initialized but not yet started. */,         INITIALIZED,,         /** In the process of starting. */,         STARTING,,         /** Is active. */,         STARTED,,         /** Shutdown is in progress. */,         STOPPING,,         /** Has shutdown. */,         STOPPED,     }, ,     private volatile Status status = Status.INITIALIZED;, ,     private final Lock configLock = new ReentrantLock();, ,     /**,      * Constructor taking only a name.,      * @param name The context name.,      */,     public LoggerContext(final String name) {,         this(name, null, (URI) null);,     }, ,     /**,      * Constructor taking a name and a reference to an external context.,      * @param name The context name.,      * @param externalContext The external context.,      */,     public LoggerContext(final String name, final Object externalContext) {,         this(name, externalContext, (URI) null);,     }, ,     /**,      * Constructor taking a name, external context and a configuration URI.,      * @param name The context name.,      * @param externalContext The external context.,      * @param configLocn The location of the configuration as a URI.,      */,     public LoggerContext(final String name, final Object externalContext, final URI configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         this.configLocation = configLocn;,     }, ,     /**,      * Constructor taking a name external context and a configuration location,      * String. The location must be resolvable to a File.,      *,      * @param name The configuration location.,      * @param externalContext The external context.,      * @param configLocn The configuration location.,      */,     public LoggerContext(final String name, final Object externalContext, final String configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         if (configLocn != null) {,             URI uri;,             try {,                 uri = new File(configLocn).toURI();,             } catch (final Exception ex) {,                 uri = null;,             },             configLocation = uri;,         } else {,             configLocation = null;,         },     }, ,     @Override,     public void start() {,         if (configLock.tryLock()) {,             try {,                 if ((status == Status.INITIALIZED || status == Status.STOPPED)) {,                     status = Status.STARTING;,                     reconfigure();,                     if (config.isShutdownHookEnabled()) {,                         shutdownThread = new ShutdownThread(this);,                         try {,                             Runtime.getRuntime().addShutdownHook(shutdownThread);,                         } catch (final IllegalStateException ise) {,                             LOGGER.warn("Unable to register shutdown hook due to JVM state");,                             shutdownThread = null;,                         } catch (final SecurityException se) {,                             LOGGER.warn("Unable to register shutdown hook due to security restrictions");,                             shutdownThread = null;,                         },                     },                     status = Status.STARTED;,                 },             } finally {,                 configLock.unlock();,             },         },     }, ,     /**,      * Start with a specific configuration.,      * @param config The new Configuration.,      */,     public void start(final Configuration config) {,         if (configLock.tryLock()) {,             try {,                 if ((status == Status.INITIALIZED || status == Status.STOPPED) && config.isShutdownHookEnabled() ) {,                     shutdownThread = new ShutdownThread(this);,                     try {,                         Runtime.getRuntime().addShutdownHook(shutdownThread);,                     } catch (final IllegalStateException ise) {,                         LOGGER.warn("Unable to register shutdown hook due to JVM state");,                         shutdownThread = null;,                     } catch (final SecurityException se) {,                         LOGGER.warn("Unable to register shutdown hook due to security restrictions");,                         shutdownThread = null;,                     },                     status = Status.STARTED;,                 },             } finally {,                 configLock.unlock();,             },         },         setConfiguration(config);,     }, ,     @Override,     public void stop() {,         configLock.lock();,         try {,             if (status == Status.STOPPED) {,                 return;,             },             status = Status.STOPPING;,             if (shutdownThread != null) {,                 Runtime.getRuntime().removeShutdownHook(shutdownThread);,                 shutdownThread = null;,             },             final Configuration prev = config;,             config = new NullConfiguration();,             updateLoggers();,             prev.stop();,             externalContext = null;,             LogManager.getFactory().removeContext(this);,             status = Status.STOPPED;,         } finally {,             configLock.unlock();,         },     }, ,     /**,      * Gets the name.,      *,      * @return the name.,      */,     public String getName() {,         return name;,     }, ,     public Status getStatus() {,         return status;,     }, ,     @Override,     public boolean isStarted() {,         return status == Status.STARTED;,     }, ,     /**,      * Set the external context.,      * @param context The external context.,      */,     public void setExternalContext(final Object context) {,         this.externalContext = context;,     }, ,     /**,      * Returns the external context.,      * @return The external context.,      */,     @Override,     public Object getExternalContext() {,         return this.externalContext;,     }],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/LoggerContext.java,getConfiguration,171-171,[     * Start with a specific configuration.],,setConfiguration,197-209,[    @Override,     public void stop() {,         configLock.lock();,         try {,             if (status == Status.STOPPED) {,                 return;,             },             status = Status.STOPPING;,             if (shutdownThread != null) {,                 Runtime.getRuntime().removeShutdownHook(shutdownThread);,                 shutdownThread = null;,             },             final Configuration prev = config;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/LoggerContext.java,,430-438,[        public ShutdownThread(final LoggerContext context) {,             this.context = context;,         }, ,         @Override,         public void run() {,             context.shutdownThread = null;,             context.stop();,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/LoggerTest.java,testReconfiguration,249-249,[        file.setLastModified(newTime);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,77-77,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,74-74,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,79-79,[                host = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,81-81,[                noThrown = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerUpdateTest.java,before,67-67,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerUpdateTest.java,before,64-64,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerUpdateTest.java,before,69-69,[                host = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerUpdateTest.java,before,71-71,[                noThrown = (ListAppender) entry.getValue();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/LoggerUpdateTest.java,,71-71,[                noThrown = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/ShutdownDisabledTest.java,before,57-57,[        config = ctx.getConfiguration();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabled,69-69,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabledByLevel,82-82,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugLogger,95-95,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,setupClass,55-55,[        System.gc();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedPerfTest.java,,64-70,[    public class DebugDisabledRunnable implements Runnable {,         @Override,         public void run() {,             for (int i=0; i < LOOP_CNT; ++i) {,                 logger.isDebugEnabled();,             },         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedPerfTest.java,,73-79,[     public class DebugLoggerRunnable implements Runnable {,         @Override,         public void run() {,             for (int i=0; i < LOOP_CNT; ++i) {,                 logger.debug("This is a test");,             },         }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,107-107,[            for (final File file : files) {],,deleteDir,106-106,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,108-108,[                file.delete();],,deleteDir,110-110,[            dir.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedTest.java,,91-100,[        public StateSettingRunnable(final State state) {,             this.state = state;,         },         @Override,         public void run() {,             for (int i=0; i < LOOP_CNT*4; ++i) {,                 Thread.yield();,                 state.setState();,             },         }],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/XMLEvents.java,,64-70,[        public TransferMessage() {,             super("Transfer@18060", null, "Audit");,         }, ,         public void setCompletionStatus(final String msg) {,             setMessageFormat(msg);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/XMLEvents.java,,64-70,[        public TransferMessage() {,             super("Transfer@18060", null, "Audit");,         }, ,         public void setCompletionStatus(final String msg) {,             setMessageFormat(msg);,         }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,233-233,[                    } catch (final Exception ex) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/appender/AsyncAppender.java,run,226-226,[                final Log4jLogEvent event = Log4jLogEvent.deserialize(s);],,run,218-218,[                    if (s != null && s instanceof String && SHUTDOWN.equals(s.toString())) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/AsyncAppender.java,shutdown,265-265,[                queue.offer(SHUTDOWN);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/ConsoleAppender.java,getOutputStream,133-133,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,64-64,[        final String msg = baos.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,61-61,[        System.setOut(new PrintStream(baos));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppender.java,callAppender,123-123,[            primary.callAppender(event);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/appender/FailoversPlugin.java,createFailovers,50-50,[            return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/FileAppender.java,createAppender,147-147,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,157-157,[            final InputStreamReader isr = new InputStreamReader(is);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,196-196,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,158-158,[            final BufferedReader br = new BufferedReader(isr);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,196-196,[        final BufferedReader is = new BufferedReader(new InputStreamReader(fis));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/FileAppenderTest.java,,223-238,[        public FileWriterRunnable(final boolean lock, final int count) {,             this.lock = lock;,             this.count = count;,         }, ,         @Override,         public void run() {,             final Thread thread = Thread.currentThread();, ,             try {,                 writer(lock, count, thread.getName());, ,             } catch (final Exception ex) {,                 throw new RuntimeException(ex);,             },         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/FileManager.java,createManager,185-185,[                parent.mkdirs();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/JSONCompleteFileAppenderTest.java,testFlushAtEndOfBatch,57-57,[            final BufferedReader reader = new BufferedReader(new FileReader(file));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/JSONCompleteFileAppenderTest.java,testFlushAtEndOfBatch,50-50,[        file.delete();],,testFlushAtEndOfBatch,105-105,[            file.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RandomAccessFileAppender.java,createAppender,158-158,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderLocationTest.java,testLocationIncluded,51-51,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderLocationTest.java,testLocationIncluded,45-45,[        f.delete();],,testLocationIncluded,54-54,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,51-51,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,45-45,[        f.delete();],,testFlushAtEndOfBatch,54-54,[        f.delete();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,write,103-103,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,227-227,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,213-213,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RandomAccessFileManager.java,createManager,210-210,[                parent.mkdirs();],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/RandomAccessFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,114-114,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,108-108,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,110-110,[            fos = new FileOutputStream(file);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RollingFileAppender.java,createAppender,177-177,[        if (manager == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppender.java,createAppender,198-198,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderLocationTest.java,testLocationIncluded,51-51,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderLocationTest.java,testLocationIncluded,45-45,[        f.delete();],,testLocationIncluded,54-54,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,56-56,[        BufferedReader reader = new BufferedReader(new FileReader(f));],,testRollover,77-77,[        reader = new BufferedReader(new FileReader(f));],,testRollover,84-84,[        reader = new BufferedReader(new FileReader(after1));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,58-58,[        assertTrue(line1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,79-79,[        assertTrue("after rollover only new msg", new1.contains(trigger));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,86-86,[        assertTrue("renamed file line 1", old1.contains(msg));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,88-88,[        assertTrue("renamed file line 2", old2.contains(exceed));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderRolloverTest.java,testRollover,48-48,[        f.delete();],,testRollover,49-49,[        after1.delete();],,testRollover,82-82,[        f.delete();],,testRollover,92-92,[        after1.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,51-51,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/RollingRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,45-45,[        f.delete();],,testFlushAtEndOfBatch,54-54,[        f.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SMTPAppender.java,createAppender,143-143,[        if (manager == null) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,testTcpAppenderNoWait,186-186,[        } catch (final Exception ex) {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,94-94,[        tcpCount = 0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,95-95,[        udpCount = 0;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,244-244,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,218-218,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,shutdown,203-203,[            thread.interrupt();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,139-139,[            syslogServer.wait(timeOutInMs);],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/core/appender/SyslogAppenderTestBase.java,getReceivedMessages,139-139,[            syslogServer.wait(timeOutInMs);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/TLSSyslogAppender.java,createSocketManager,132-132,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/TLSSyslogFrame.java,getBytes,47-47,[        return frame.getBytes();],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/appender/TLSSyslogFrame.java,equals,58-58,[        return super.equals(frame);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/TLSSyslogFrameTest.java,getByteRepresentation,54-54,[        byte[] representation = frame.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,53-53,[        final BufferedReader reader = new BufferedReader(new FileReader(file));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderTest.java,testFlushAtEndOfBatch,47-47,[        file.delete();],,testFlushAtEndOfBatch,59-59,[            file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlNoEvents,89-89,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchema,77-77,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAppenderValidationTest.java,validateXmlSchemaThrowable,63-63,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaNoEvents,66-66,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompactFileAsyncAppenderValidationTest.java,validateXmlSchemaSimple,54-54,[        file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,54-54,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlCompleteFileAppenderTest.java,testFlushAtEndOfBatch,48-48,[        f.delete();],,testFlushAtEndOfBatch,66-66,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,54-54,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlFileAppenderTest.java,testFlushAtEndOfBatch,48-48,[        f.delete();],,testFlushAtEndOfBatch,64-64,[            f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,56-56,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/XmlRandomAccessFileAppenderTest.java,testFlushAtEndOfBatch,50-50,[        f.delete();],,testFlushAtEndOfBatch,68-68,[            f.delete();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager.java,,100-100,[        return this.connected;],,,61-61,[                this.connected = true;],,,88-88,[                this.connected = false;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,136-136,[            final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,133-133,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDriverManagerConfig,178-178,[        final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDriverManagerConfig,175-175,[        final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,228-228,[        final String stackTrace = outputStream.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,225-225,[        final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,145-145,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,147-147,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,149-149,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,150-150,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,151-151,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,152-152,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,153-153,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,154-154,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,155-155,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,156-156,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,157-157,[                    resultSet.getString("message"));],,testDataSourceConfig,158-158,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,159-159,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,161-161,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,163-163,[            verify(dataSource);],,testDataSourceConfig,165-165,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,166-166,[        }],,testDataSourceConfig,167-167,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,144-144,[            final Statement statement = this.connection.createStatement();],,testDataSourceConfig,145-145,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM dsLogEntry ORDER BY id");],,testDataSourceConfig,147-147,[            assertTrue("There should be at least one row.", resultSet.next());],,testDataSourceConfig,149-149,[            final long date = resultSet.getTimestamp("eventDate").getTime();],,testDataSourceConfig,150-150,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDataSourceConfig,151-151,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDataSourceConfig,152-152,[            assertEquals("The literal column is not correct (1).", "Literal Value of Data Source",],,testDataSourceConfig,153-153,[                    resultSet.getString("literalColumn"));],,testDataSourceConfig,154-154,[            assertEquals("The level column is not correct (1).", "FATAL", resultSet.getNString("level"));],,testDataSourceConfig,155-155,[            assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDataSourceConfig,156-156,[            assertEquals("The message column is not correct (1).", "Error from data source 02.",],,testDataSourceConfig,157-157,[                    resultSet.getString("message"));],,testDataSourceConfig,158-158,[            assertEquals("The exception column is not correct (1).", stackTrace,],,testDataSourceConfig,159-159,[                    IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDataSourceConfig,161-161,[            assertFalse("There should not be two rows.", resultSet.next());],,testDataSourceConfig,163-163,[            verify(dataSource);],,testDataSourceConfig,165-165,[            MockContextFactory.revertSetAsInitial();],,testDataSourceConfig,166-166,[        }],,testDataSourceConfig,167-167,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDriverManagerConfig,187-187,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM dmLogEntry ORDER BY id");],,testDriverManagerConfig,189-189,[        assertTrue("There should be at least one row.", resultSet.next());],,testDriverManagerConfig,191-191,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testDriverManagerConfig,192-192,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDriverManagerConfig,193-193,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDriverManagerConfig,194-194,[        assertEquals("The literal column is not correct (1).", "Literal Value Test String",],,testDriverManagerConfig,195-195,[                resultSet.getString("literalColumn"));],,testDriverManagerConfig,196-196,[        assertEquals("The level column is not correct (1).", "INFO", resultSet.getNString("level"));],,testDriverManagerConfig,197-197,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDriverManagerConfig,198-198,[        assertEquals("The message column is not correct (1).", "Test my message 01.", resultSet.getString("message"));],,testDriverManagerConfig,199-199,[        assertEquals("The exception column is not correct (1).", "",],,testDriverManagerConfig,200-200,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDriverManagerConfig,202-202,[        assertTrue("There should be two rows.", resultSet.next());],,testDriverManagerConfig,204-204,[        date = resultSet.getTimestamp("eventDate").getTime();],,testDriverManagerConfig,205-205,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testDriverManagerConfig,206-206,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testDriverManagerConfig,207-207,[        assertEquals("The literal column is not correct (2).", "Literal Value Test String",],,testDriverManagerConfig,208-208,[                resultSet.getString("literalColumn"));],,testDriverManagerConfig,209-209,[        assertEquals("The level column is not correct (2).", "WARN", resultSet.getNString("level"));],,testDriverManagerConfig,210-210,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testDriverManagerConfig,211-211,[        assertEquals("The message column is not correct (2).", "This is another message 02.",],,testDriverManagerConfig,212-212,[                resultSet.getString("message"));],,testDriverManagerConfig,213-213,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testDriverManagerConfig,214-214,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDriverManagerConfig,216-216,[        assertFalse("There should not be three rows.", resultSet.next());],,testDriverManagerConfig,217-217,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDriverManagerConfig,186-186,[        final Statement statement = this.connection.createStatement();],,testDriverManagerConfig,187-187,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM dmLogEntry ORDER BY id");],,testDriverManagerConfig,189-189,[        assertTrue("There should be at least one row.", resultSet.next());],,testDriverManagerConfig,191-191,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testDriverManagerConfig,192-192,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testDriverManagerConfig,193-193,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testDriverManagerConfig,194-194,[        assertEquals("The literal column is not correct (1).", "Literal Value Test String",],,testDriverManagerConfig,195-195,[                resultSet.getString("literalColumn"));],,testDriverManagerConfig,196-196,[        assertEquals("The level column is not correct (1).", "INFO", resultSet.getNString("level"));],,testDriverManagerConfig,197-197,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testDriverManagerConfig,198-198,[        assertEquals("The message column is not correct (1).", "Test my message 01.", resultSet.getString("message"));],,testDriverManagerConfig,199-199,[        assertEquals("The exception column is not correct (1).", "",],,testDriverManagerConfig,200-200,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDriverManagerConfig,202-202,[        assertTrue("There should be two rows.", resultSet.next());],,testDriverManagerConfig,204-204,[        date = resultSet.getTimestamp("eventDate").getTime();],,testDriverManagerConfig,205-205,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testDriverManagerConfig,206-206,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testDriverManagerConfig,207-207,[        assertEquals("The literal column is not correct (2).", "Literal Value Test String",],,testDriverManagerConfig,208-208,[                resultSet.getString("literalColumn"));],,testDriverManagerConfig,209-209,[        assertEquals("The level column is not correct (2).", "WARN", resultSet.getNString("level"));],,testDriverManagerConfig,210-210,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testDriverManagerConfig,211-211,[        assertEquals("The message column is not correct (2).", "This is another message 02.",],,testDriverManagerConfig,212-212,[                resultSet.getString("message"));],,testDriverManagerConfig,213-213,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testDriverManagerConfig,214-214,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testDriverManagerConfig,216-216,[        assertFalse("There should not be three rows.", resultSet.next());],,testDriverManagerConfig,217-217,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,237-237,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,239-239,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,241-241,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,242-242,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,243-243,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,244-244,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,245-245,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,246-246,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,247-247,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,248-248,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,249-249,[                resultSet.getString("message"));],,testFactoryMethodConfig,250-250,[        assertEquals("The exception column is not correct (1).", "",],,testFactoryMethodConfig,251-251,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,253-253,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,255-255,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,256-256,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,257-257,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,258-258,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,259-259,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,260-260,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,261-261,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,262-262,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,263-263,[                resultSet.getString("message"));],,testFactoryMethodConfig,264-264,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,265-265,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,267-267,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,268-268,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,236-236,[        final Statement statement = this.connection.createStatement();],,testFactoryMethodConfig,237-237,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM fmLogEntry ORDER BY id");],,testFactoryMethodConfig,239-239,[        assertTrue("There should be at least one row.", resultSet.next());],,testFactoryMethodConfig,241-241,[        long date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,242-242,[        assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testFactoryMethodConfig,243-243,[        assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,244-244,[        assertEquals("The literal column is not correct (1).", "Some Other Literal Value",],,testFactoryMethodConfig,245-245,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,246-246,[        assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getNString("level"));],,testFactoryMethodConfig,247-247,[        assertEquals("The logger column is not correct (1).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,248-248,[        assertEquals("The message column is not correct (1).", "Factory logged message 01.",],,testFactoryMethodConfig,249-249,[                resultSet.getString("message"));],,testFactoryMethodConfig,250-250,[        assertEquals("The exception column is not correct (1).", "",],,testFactoryMethodConfig,251-251,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,253-253,[        assertTrue("There should be two rows.", resultSet.next());],,testFactoryMethodConfig,255-255,[        date = resultSet.getTimestamp("eventDate").getTime();],,testFactoryMethodConfig,256-256,[        assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testFactoryMethodConfig,257-257,[        assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testFactoryMethodConfig,258-258,[        assertEquals("The literal column is not correct (2).", "Some Other Literal Value",],,testFactoryMethodConfig,259-259,[                resultSet.getString("literalColumn"));],,testFactoryMethodConfig,260-260,[        assertEquals("The level column is not correct (2).", "ERROR", resultSet.getNString("level"));],,testFactoryMethodConfig,261-261,[        assertEquals("The logger column is not correct (2).", logger.getName(), resultSet.getNString("logger"));],,testFactoryMethodConfig,262-262,[        assertEquals("The message column is not correct (2).", "Error from factory 02.",],,testFactoryMethodConfig,263-263,[                resultSet.getString("message"));],,testFactoryMethodConfig,264-264,[        assertEquals("The exception column is not correct (2).", stackTrace,],,testFactoryMethodConfig,265-265,[                IOUtils.readStringAndClose(resultSet.getNClob("exception").getCharacterStream(), -1));],,testFactoryMethodConfig,267-267,[        assertFalse("There should not be three rows.", resultSet.next());],,testFactoryMethodConfig,268-268,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith10000Events,297-297,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM dmLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000Events,299-299,[        resultSet.last();],,testPerformanceOfAppenderWith10000Events,300-300,[        assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000Events,302-302,[        System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000Events,304-304,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith10000Events,295-295,[        final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,testPerformanceOfAppenderWith10000Events,297-297,[        final ResultSet resultSet = statement.executeQuery("SELECT * FROM dmLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000Events,299-299,[        resultSet.last();],,testPerformanceOfAppenderWith10000Events,300-300,[        assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000Events,302-302,[        System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000Events,304-304,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDataSourceConfig,144-144,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testDriverManagerConfig,186-186,[        final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testFactoryMethodConfig,236-236,[        final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jdbc/AbstractJdbcAppenderTest.java,testPerformanceOfAppenderWith10000Events,295-295,[        final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSourceTest.java,testDataSource01,84-84,[        this.context.bind("java:/comp/env/jdbc/Logging01", dataSource);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jdbc/DataSourceConnectionSourceTest.java,testDataSource02,112-112,[        this.context.bind("java:/comp/env/jdbc/Logging02", dataSource);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jdbc/DriverManagerConnectionSource.java,createConnectionSource,94-94,[        if (driver == null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jdbc/FactoryMethodConnectionSource.java,createConnectionSource,95-95,[            } catch (final Exception e) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jdbc/JDBCAppender.java,createAppender,97-97,[        if (manager == null) {],,
SECURITY,SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING,org/apache/logging/log4j/core/appender/db/jdbc/JDBCDatabaseManager.java,connectInternal,58-58,[        this.statement = this.connection.prepareStatement(this.sqlStatement);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,getConfigConnection,39-39,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcH2AppenderTest.java,newConnection,44-44,[        return DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,getConfigConnection,39-39,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j;ifexists=true", USER_ID, PASSWORD);],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jdbc/JdbcHyperSqlAppenderTest.java,newConnection,44-44,[        return DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,101-101,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,98-98,[            final PrintWriter writer = new PrintWriter(outputStream);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,163-163,[            final String stackTrace = outputStream.toString().replace("\r\n", "\n");],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,160-160,[            final PrintWriter writer = new PrintWriter(outputStream);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,112-112,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,114-114,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,116-116,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,117-117,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,118-118,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,119-119,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,120-120,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,121-121,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,122-122,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,123-123,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,125-125,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,127-127,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,128-128,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,129-129,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,130-130,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,131-131,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,133-133,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,134-134,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,136-136,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,138-138,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,139-139,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,140-140,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,141-141,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,142-142,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,143-143,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,144-144,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,145-145,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,147-147,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,149-149,[            this.tearDown();],,testBaseJpaEntityAppender,150-150,[        }],,testBaseJpaEntityAppender,151-151,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,111-111,[            final Statement statement = this.connection.createStatement();],,testBaseJpaEntityAppender,112-112,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBaseLogEntry ORDER BY id");],,testBaseJpaEntityAppender,114-114,[            assertTrue("There should be at least one row.", resultSet.next());],,testBaseJpaEntityAppender,116-116,[            long date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,117-117,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBaseJpaEntityAppender,118-118,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,119-119,[            assertEquals("The level column is not correct (1).", "INFO", resultSet.getString("level"));],,testBaseJpaEntityAppender,120-120,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,121-121,[            assertEquals("The message column is not correct (1).", "Test my message 01.",],,testBaseJpaEntityAppender,122-122,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,123-123,[            assertNull("The exception column is not correct (1).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,125-125,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBaseJpaEntityAppender,127-127,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,128-128,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBaseJpaEntityAppender,129-129,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,130-130,[            assertEquals("The level column is not correct (2).", "ERROR", resultSet.getString("level"));],,testBaseJpaEntityAppender,131-131,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,132-132,[            assertEquals("The message column is not correct (2).", "This is another message 02.",],,testBaseJpaEntityAppender,133-133,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,134-134,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("exception"));],,testBaseJpaEntityAppender,136-136,[            assertTrue("There should be three rows.", resultSet.next());],,testBaseJpaEntityAppender,138-138,[            date = resultSet.getTimestamp("eventDate").getTime();],,testBaseJpaEntityAppender,139-139,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBaseJpaEntityAppender,140-140,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBaseJpaEntityAppender,141-141,[            assertEquals("The level column is not correct (3).", "WARN", resultSet.getString("level"));],,testBaseJpaEntityAppender,142-142,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("logger"));],,testBaseJpaEntityAppender,143-143,[            assertEquals("The message column is not correct (3).", "A final warning has been issued.",],,testBaseJpaEntityAppender,144-144,[                    resultSet.getString("message"));],,testBaseJpaEntityAppender,145-145,[            assertNull("The exception column is not correct (3).", resultSet.getString("exception"));],,testBaseJpaEntityAppender,147-147,[            assertFalse("There should not be four rows.", resultSet.next());],,testBaseJpaEntityAppender,149-149,[            this.tearDown();],,testBaseJpaEntityAppender,150-150,[        }],,testBaseJpaEntityAppender,151-151,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,174-174,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,176-176,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,178-178,[            long date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,179-179,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,180-180,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,181-181,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,182-182,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,183-183,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,184-184,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,185-185,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,187-187,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,189-189,[            date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,190-190,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,191-191,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,192-192,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,193-193,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,195-195,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,196-196,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,198-198,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,200-200,[            date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,201-201,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,202-202,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,203-203,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,204-204,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,205-205,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,206-206,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,207-207,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,209-209,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,211-211,[            this.tearDown();],,testBasicJpaEntityAppender,212-212,[        }],,testBasicJpaEntityAppender,213-213,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,173-173,[            final Statement statement = this.connection.createStatement();],,testBasicJpaEntityAppender,174-174,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testBasicJpaEntityAppender,176-176,[            assertTrue("There should be at least one row.", resultSet.next());],,testBasicJpaEntityAppender,178-178,[            long date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,179-179,[            assertTrue("The date should be later than pre-logging (1).", date >= millis);],,testBasicJpaEntityAppender,180-180,[            assertTrue("The date should be earlier than now (1).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,181-181,[            assertEquals("The level column is not correct (1).", "DEBUG", resultSet.getString("level"));],,testBasicJpaEntityAppender,182-182,[            assertEquals("The logger column is not correct (1).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,183-183,[            assertEquals("The message column is not correct (1).", "Test my debug 01.",],,testBasicJpaEntityAppender,184-184,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,185-185,[            assertNull("The exception column is not correct (1).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,187-187,[            assertTrue("There should be at least two rows.", resultSet.next());],,testBasicJpaEntityAppender,189-189,[            date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,190-190,[            assertTrue("The date should be later than pre-logging (2).", date >= millis);],,testBasicJpaEntityAppender,191-191,[            assertTrue("The date should be earlier than now (2).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,192-192,[            assertEquals("The level column is not correct (2).", "WARN", resultSet.getString("level"));],,testBasicJpaEntityAppender,193-193,[            assertEquals("The logger column is not correct (2).", logger1.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,194-194,[            assertEquals("The message column is not correct (2).", "This is another warning 02.",],,testBasicJpaEntityAppender,195-195,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,196-196,[            assertEquals("The exception column is not correct (2).", stackTrace, resultSet.getString("thrown"));],,testBasicJpaEntityAppender,198-198,[            assertTrue("There should be three rows.", resultSet.next());],,testBasicJpaEntityAppender,200-200,[            date = resultSet.getLong("millis");],,testBasicJpaEntityAppender,201-201,[            assertTrue("The date should be later than pre-logging (3).", date >= millis);],,testBasicJpaEntityAppender,202-202,[            assertTrue("The date should be earlier than now (3).", date <= System.currentTimeMillis());],,testBasicJpaEntityAppender,203-203,[            assertEquals("The level column is not correct (3).", "FATAL", resultSet.getString("level"));],,testBasicJpaEntityAppender,204-204,[            assertEquals("The logger column is not correct (3).", logger2.getName(), resultSet.getString("loggerName"));],,testBasicJpaEntityAppender,205-205,[            assertEquals("The message column is not correct (3).", "A fatal warning has been issued.",],,testBasicJpaEntityAppender,206-206,[                    resultSet.getString("message"));],,testBasicJpaEntityAppender,207-207,[            assertNull("The exception column is not correct (3).", resultSet.getString("thrown"));],,testBasicJpaEntityAppender,209-209,[            assertFalse("There should not be four rows.", resultSet.next());],,testBasicJpaEntityAppender,211-211,[            this.tearDown();],,testBasicJpaEntityAppender,212-212,[        }],,testBasicJpaEntityAppender,213-213,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,243-243,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,245-245,[            resultSet.last();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,246-246,[            assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,248-248,[            System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,251-251,[            this.tearDown();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,252-252,[        }],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,253-253,[    }],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,241-241,[            final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,243-243,[            final ResultSet resultSet = statement.executeQuery("SELECT * FROM jpaBasicLogEntry ORDER BY id");],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,245-245,[            resultSet.last();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,246-246,[            assertEquals("The number of records is not correct.", 10001, resultSet.getRow());],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,248-248,[            System.out.println("Wrote 10,000 log events in " + elapsed + " nanoseconds (" + elapsedMilli +],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,251-251,[            this.tearDown();],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,252-252,[        }],,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,253-253,[    }],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBaseJpaEntityAppender,111-111,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testBasicJpaEntityAppender,173-173,[            final Statement statement = this.connection.createStatement();],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE,org/apache/logging/log4j/core/appender/db/jpa/AbstractJpaAppenderTest.java,testPerformanceOfAppenderWith10000EventsUsingBasicEntity,241-241,[            final Statement statement = this.connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/JPAAppender.java,createAppender,111-111,[            if (manager == null) {],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,34-34,[        Connection connection = DriverManager.getConnection("jdbc:h2:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,36-36,[        Statement statement = connection.createStatement();],,setUpConnection,37-37,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaH2AppenderTest.java,setUpConnection,36-36,[        Statement statement = connection.createStatement();],,setUpConnection,43-43,[        statement = connection.createStatement();],,
SECURITY,DMI_EMPTY_DB_PASSWORD,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,39-39,[        Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:Log4j", USER_ID, PASSWORD);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,41-41,[        Statement statement = connection.createStatement();],,setUpConnection,42-42,[        statement.executeUpdate("CREATE TABLE jpaBaseLogEntry ( " +],,
BAD_PRACTICE,ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH,org/apache/logging/log4j/core/appender/db/jpa/JpaHyperSqlAppenderTest.java,setUpConnection,41-41,[        Statement statement = connection.createStatement();],,setUpConnection,48-48,[        statement = connection.createStatement();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextMapJsonAttributeConverter.java,,62-62,[            return OBJECT_MAPPER.readValue(s, new TypeReference<Map<String, String>>() { });],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/jpa/converter/ContextStackJsonAttributeConverter.java,,64-64,[            list = ContextMapJsonAttributeConverter.OBJECT_MAPPER.readValue(s, new TypeReference<List<String>>() { });],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvert01,46-46,[        final String converted = this.converter.convertToDatabaseColumn(message);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullOrBlankToEntityAttribute,64-64,[        assertNull("The converted attribute should be null (1).", this.converter.convertToEntityAttribute(null));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/db/jpa/converter/MessageAttributeConverterTest.java,testConvertNullToDatabaseColumn,59-59,[        assertNull("The converted value should be null.", this.converter.convertToDatabaseColumn(null));],,
STYLE,DMI_USELESS_SUBSTRING,org/apache/logging/log4j/core/appender/db/jpa/converter/StackTraceElementAttributeConverter.java,convertString,75-75,[                fileName = parenthesisContents.substring(0);],,
MALICIOUS_CODE,DP_DO_INSIDE_DO_PRIVILEGED,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,<clinit>,46-46,[            THROWABLE_CAUSE.setAccessible(true);],,<clinit>,48-48,[            THROWABLE_MESSAGE.setAccessible(true);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,167-167,[                        THROWABLE_MESSAGE.set(throwable, cause);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,201-201,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,218-218,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,179-179,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,234-234,[        } catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverter.java,getThrowable,226-226,[        } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/db/jpa/converter/ThrowableAttributeConverterTest.java,getStackTrace,91-91,[            returnValue += "\tat " + element.toString() + "\n";],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/db/nosql/NoSQLAppender.java,createAppender,88-88,[        if (manager == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,179-182,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,274-277,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,280-283,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<CouchDBObject[]>() {,                 @Override,                 public CouchDBObject[] answer() throws Throwable {,                     return new CouchDBObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,286-289,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,409-412,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,415-418,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<CouchDBObject[]>() {,                 @Override,                 public CouchDBObject[] answer() throws Throwable {,                     return new CouchDBObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,421-424,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,427-430,[            expect(this.connection.createList(anyInt())).andAnswer(new IAnswer<CouchDBObject[]>() {,                 @Override,                 public CouchDBObject[] answer() throws Throwable {,                     return new CouchDBObject[(Integer) getCurrentArguments()[0]];],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/appender/db/nosql/NoSQLDatabaseManagerTest.java,,433-436,[            expect(this.connection.createObject()).andAnswer(new IAnswer<CouchDBObject>() {,                 @Override,                 public CouchDBObject answer() throws Throwable {,                     return new CouchDBObject();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/appender/db/nosql/couch/CouchDBProvider.java,createNoSQLProvider,132-132,[                protocol = protocol.toLowerCase();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/db/nosql/mongo/MongoDBProvider.java,createNoSQLProvider,168-168,[            } catch (final Exception e) {],,createNoSQLProvider,197-197,[                } catch (final Exception e) {],,
PERFORMANCE,SBSC_USE_STRINGBUFFER_CONCATENATION,org/apache/logging/log4j/core/appender/db/nosql/mongo/MongoDBProvider.java,createNoSQLProvider,137-137,[                        description += " { " + address.getHost() + ", " + address.getPort() + " } ";],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java,valueOf,139-139,[            if (op == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/RewriteAppenderTest.java,testFilter,121-121,[        assertTrue("Events were generated", list == null || list.size() == 0);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/AbstractRollingAppenderSizeTest.java,deleteDir,86-86,[            for (final File file : files) {],,deleteDir,85-85,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/AbstractRollingAppenderSizeTest.java,testAppender,71-71,[        assertTrue("No files created", files.length > 0);],,testAppender,70-70,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/AbstractRollingAppenderSizeTest.java,deleteDir,87-87,[                file.delete();],,deleteDir,89-89,[            dir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeAscending,299-299,[                        toRenameBase.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeDescending,196-196,[                        toRenameBase.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java,,53-64,[        public MyRollingManager(final TriggeringPolicy policy, final RolloverStrategy strategy) {,             super("testfile", "target/rolling1/test1-%i.log.gz", new ByteArrayOutputStream(),,                 false, 0, System.currentTimeMillis(), policy, strategy, null, null);,         }, ,         public void setFileTime(final long timestamp) {,             this.timestamp = timestamp;,         }, ,         @Override,         public long getFileTime() {,             return timestamp;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,85-85,[            for (final File file : files) {],,deleteDir,84-84,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,testAppender,70-70,[        assertTrue("No files created", files.length > 0);],,testAppender,69-69,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,86-86,[                file.delete();],,deleteDir,88-88,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,85-85,[            for (final File file : files) {],,deleteDir,84-84,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,testAppender,70-70,[        assertTrue("No files created", files.length > 0);],,testAppender,69-69,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,86-86,[                file.delete();],,deleteDir,88-88,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,83-83,[            for (final File file : files) {],,deleteDir,82-82,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,testAppender,67-67,[        assertTrue("No files created", files.length > 0);],,testAppender,66-66,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,84-84,[                file.delete();],,deleteDir,86-86,[            dir.delete();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,101-101,[        return initialTime;],,,112-112,[                initialTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,93-93,[        return size;],,,84-84,[        size += length;],,,111-111,[                size = 0;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createFileAfterRollover,121-121,[        final OutputStream os = new FileOutputStream(getFileName(), isAppend());],,createFileAfterRollover,122-122,[        setOutputStream(os);],,createFileAfterRollover,123-123,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,280-280,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,283-283,[                file.createNewFile();],,
BAD_PRACTICE,RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,write,89-89,[        if (isImmediateFlush || isEndOfBatch.get() == Boolean.TRUE) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,146-146,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java,createManager,142-142,[                parent.mkdirs();],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_dataExceedingBufferSize,87-87,[                file.getName(), "", os, append, flushNow, triggerSize, time,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testWrite_multiplesOfBufferSize,56-56,[                file.getName(), "", os, append, flushNow, triggerSize, time,],,
CORRECTNESS,NP_NULL_ON_SOME_PATH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManagerTest.java,testAppendDoesNotOverwriteExistingFile,116-116,[            fos.close();],,testAppendDoesNotOverwriteExistingFile,110-110,[        FileOutputStream fos = null;],,testAppendDoesNotOverwriteExistingFile,112-112,[            fos = new FileOutputStream(file);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/helper/AbstractAction.java,,90-90,[        return complete;],,,70-70,[            complete = true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,copyFile,126-126,[            srcStream = new FileInputStream(source);],,copyFile,127-127,[            destStream = new FileOutputStream(destination);],,copyFile,132-132,[            if (srcChannel != null) {],,copyFile,133-133,[                srcChannel.close();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,execute,96-96,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,copyFile,118-118,[            destination.createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,execute,107-107,[                source.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,testEmpty,71-71,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,testNoParent,85-85,[        final PrintStream pos = new PrintStream(file);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,testRename1,55-55,[        final PrintStream pos = new PrintStream(file);],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,deleteDir,112-112,[            for (final File file : files) {],,deleteDir,111-111,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,deleteFiles,123-123,[            for (final File file : files) {],,deleteFiles,122-122,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,beforeClass,39-39,[        file.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,deleteDir,113-113,[                file.delete();],,deleteDir,115-115,[            dir.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,deleteFiles,124-124,[                file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameActionTest.java,testNoParent,99-99,[                dest.delete();],,testNoParent,100-100,[                file.delete();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/GZCompressAction.java,execute,94-94,[            final FileInputStream fis = new FileInputStream(source);],,execute,95-95,[            final FileOutputStream fos = new FileOutputStream(destination);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/ZipCompressAction.java,execute,95-95,[     *                     does not cause an exception to be thrown or affect return value.],,execute,96-96,[     * @param level the compression level],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppender2Test.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppender2Test.java,setupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppenderTest.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppenderTest.java,setupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,setupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingDefaultAppenderTest.java,setupClass,61-61,[        file.delete();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLogger.java,calculateRingBufferSize,143-143,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLogger.java,getExceptionHandler,178-178,[        } catch (final Exception ignored) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,callAppenders,110-110,[        helper.callAppendersFromAnotherThread(event);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,createRingBufferAdmin,141-141,[        return helper.createRingBufferAdmin(contextName, getName());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,calculateRingBufferSize,157-157,[        } catch (final Exception ex) {],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,release,274-274,[                Thread.sleep(HALF_A_SECOND);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/AsyncLoggerConfigHelper.java,,89-96,[            = new EventTranslatorTwoArg<Log4jEventWrapper, LogEvent, AsyncLoggerConfig>() {, ,         @Override,         public void translateTo(Log4jEventWrapper ringBufferElement, long sequence, ,                 LogEvent logEvent, AsyncLoggerConfig loggerConfig) {,             ringBufferElement.event = logEvent;,             ringBufferElement.loggerConfig = loggerConfig;,         }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,51-51,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest.java,testAdditivity,55-55,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,59-59,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerConfigTest2.java,testConsecutiveReconfigure,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerLocationTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,60-60,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTest.java,testAsyncLogWritesToLog,54-54,[        f.delete();],,testAsyncLogWritesToLog,63-63,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,62-62,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestCachedThreadName.java,testAsyncLogUsesCachedThreadName,54-54,[        f.delete();],,testAsyncLogUsesCachedThreadName,68-68,[        f.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,63-63,[        final BufferedReader reader = new BufferedReader(new FileReader(f));],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/AsyncLoggerTestUncachedThreadName.java,testAsyncLogUsesCurrentThreadName,55-55,[        f.delete();],,testAsyncLogUsesCurrentThreadName,69-69,[        f.delete();],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/core/async/AsyncLogger.java,,82-293,[    private static final StatusLogger LOGGER = StatusLogger.getLogger();,     private static final ThreadNameStrategy THREAD_NAME_STRATEGY = ThreadNameStrategy.create();, ,     static enum ThreadNameStrategy { // LOG4J2-467,         CACHED {,             public String getThreadName(Info info) {,                 return info.cachedThreadName;,             },         },,         UNCACHED {,             public String getThreadName(Info info) {,                 return Thread.currentThread().getName();,             },         };,         abstract String getThreadName(Info info);, ,         static ThreadNameStrategy create() {,             String name = System.getProperty("AsyncLogger.ThreadNameStrategy", CACHED.name());,             try {,                 return ThreadNameStrategy.valueOf(name);,             } catch (Exception ex) {,                 return CACHED;,             },         },     },     private static volatile Disruptor<RingBufferLogEvent> disruptor;,     private static Clock clock = ClockFactory.getClock();, ,     private static ExecutorService executor = Executors,             .newSingleThreadExecutor(new DaemonThreadFactory("AsyncLogger-"));,     private static ThreadLocal<Info> threadlocalInfo = new ThreadLocal<Info>();, ,     static {,         LOGGER.debug("AsyncLogger.ThreadNameStrategy={}", THREAD_NAME_STRATEGY);,         final int ringBufferSize = calculateRingBufferSize();, ,         final WaitStrategy waitStrategy = createWaitStrategy();,         disruptor = new Disruptor<RingBufferLogEvent>(RingBufferLogEvent.FACTORY, ringBufferSize, executor,,                 ProducerType.MULTI, waitStrategy);,         final EventHandler<RingBufferLogEvent>[] handlers = new RingBufferLogEventHandler[] {//,         new RingBufferLogEventHandler() };,         disruptor.handleExceptionsWith(getExceptionHandler());,         disruptor.handleEventsWith(handlers);, ,         LOGGER.debug("Starting AsyncLogger disruptor with ringbuffer size {}...", disruptor.getRingBuffer(),                 .getBufferSize());,         disruptor.start();,     }, ,     private static int calculateRingBufferSize() {,         int ringBufferSize = RINGBUFFER_DEFAULT_SIZE;,         final String userPreferredRBSize = System.getProperty("AsyncLogger.RingBufferSize",,                 String.valueOf(ringBufferSize));,         try {,             int size = Integer.parseInt(userPreferredRBSize);,             if (size < RINGBUFFER_MIN_SIZE) {,                 size = RINGBUFFER_MIN_SIZE;,                 LOGGER.warn("Invalid RingBufferSize {}, using minimum size {}.", userPreferredRBSize,,                         RINGBUFFER_MIN_SIZE);,             },             ringBufferSize = size;,         } catch (final Exception ex) {,             LOGGER.warn("Invalid RingBufferSize {}, using default size {}.", userPreferredRBSize, ringBufferSize);,         },         return Util.ceilingNextPowerOfTwo(ringBufferSize);,     }, ,     private static WaitStrategy createWaitStrategy() {,         final String strategy = System.getProperty("AsyncLogger.WaitStrategy");,         LOGGER.debug("property AsyncLogger.WaitStrategy={}", strategy);,         if ("Sleep".equals(strategy)) {,             LOGGER.debug("disruptor event handler uses SleepingWaitStrategy");,             return new SleepingWaitStrategy();,         } else if ("Yield".equals(strategy)) {,             LOGGER.debug("disruptor event handler uses YieldingWaitStrategy");,             return new YieldingWaitStrategy();,         } else if ("Block".equals(strategy)) {,             LOGGER.debug("disruptor event handler uses BlockingWaitStrategy");,             return new BlockingWaitStrategy();,         },         LOGGER.debug("disruptor event handler uses SleepingWaitStrategy");,         return new SleepingWaitStrategy();,     }, ,     private static ExceptionHandler getExceptionHandler() {,         final String cls = System.getProperty("AsyncLogger.ExceptionHandler");,         if (cls == null) {,             LOGGER.debug("No AsyncLogger.ExceptionHandler specified");,             return null;,         },         try {,             @SuppressWarnings("unchecked"),             final Class<? extends ExceptionHandler> klass = (Class<? extends ExceptionHandler>) Class.forName(cls);,             final ExceptionHandler result = klass.newInstance();,             LOGGER.debug("AsyncLogger.ExceptionHandler=" + result);,             return result;,         } catch (final Exception ignored) {,             LOGGER.debug("AsyncLogger.ExceptionHandler not set: error creating " + cls + ": ", ignored);,             return null;,         },     }, ,     /**,      * Constructs an {@code AsyncLogger} with the specified context, name and,      * message factory.,      * ,      * @param context context of this logger,      * @param name name of this logger,      * @param messageFactory message factory of this logger,      */,     public AsyncLogger(final LoggerContext context, final String name, final MessageFactory messageFactory) {,         super(context, name, messageFactory);,     }, ,     /**,      * Tuple with the event translator and thread name for a thread.,      */,     static class Info {,         private final RingBufferLogEventTranslator translator;,         private final String cachedThreadName;,         public Info(RingBufferLogEventTranslator translator, String threadName) {,             this.translator = translator;,             this.cachedThreadName = threadName;,         },     }, ,     @Override,     public void log(final Marker marker, final String fqcn, final Level level, final Message data, final Throwable t) {,         Info info = threadlocalInfo.get();,         if (info == null) {,             info = new Info(new RingBufferLogEventTranslator(), Thread.currentThread().getName());,             threadlocalInfo.set(info);,         }, ,         final boolean includeLocation = config.loggerConfig.isIncludeLocation();,         info.translator.setValues(this, getName(), marker, fqcn, level, data, t, //, ,                 // config properties are taken care of in the EventHandler,                 // thread in the #actualAsyncLog method, ,                 // needs shallow copy to be fast (LOG4J2-154),                 ThreadContext.getImmutableContext(), //, ,                 // needs shallow copy to be fast (LOG4J2-154),                 ThreadContext.getImmutableStack(), //, ,                 // Thread.currentThread().getName(), //,                 // info.cachedThreadName, //,                 THREAD_NAME_STRATEGY.getThreadName(info), // LOG4J2-467, ,                 // location: very expensive operation. LOG4J2-153:,                 // Only include if "includeLocation=true" is specified,,                 // exclude if not specified or if "false" was specified.,                 includeLocation ? location(fqcn) : null,, ,                 // System.currentTimeMillis());,                 // CoarseCachedClock: 20% faster than system clock, 16ms gaps,                 // CachedClock: 10% faster than system clock, smaller gaps,                 clock.currentTimeMillis());, ,         disruptor.publishEvent(info.translator);,     }, ,     private StackTraceElement location(final String fqcnOfLogger) {,         return Log4jLogEvent.calcLocation(fqcnOfLogger);,     }, ,     /**,      * This method is called by the EventHandler that processes the,      * RingBufferLogEvent in a separate thread.,      * ,      * @param event the event to log,      */,     public void actualAsyncLog(final RingBufferLogEvent event) {,         final Map<Property, Boolean> properties = config.loggerConfig.getProperties();,         event.mergePropertiesIntoContextMap(properties, config.config.getStrSubstitutor());,         config.logEvent(event);,     }, ,     public static void stop() {,         final Disruptor<RingBufferLogEvent> temp = disruptor;, ,         // Must guarantee that publishing to the RingBuffer has stopped,         // before we call disruptor.shutdown(),         disruptor = null; // client code fails with NPE if log after stop = OK,         temp.shutdown();, ,         // wait up to 10 seconds for the ringbuffer to drain,         final RingBuffer<RingBufferLogEvent> ringBuffer = temp.getRingBuffer();,         for (int i = 0; i < MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN; i++) {,             if (ringBuffer.hasAvailableCapacity(ringBuffer.getBufferSize())) {,                 break;,             },             try {,                 // give ringbuffer some time to drain...,                 Thread.sleep(HALF_A_SECOND);,             } catch (final InterruptedException e) {,                 // ignored,             },         },         executor.shutdown(); // finally, kill the processor thread,         threadlocalInfo = new ThreadLocal<Info>(); // LOG4J2-323,     }, ,     /**,      * Creates and returns a new {@code RingBufferAdmin} that instruments the,      * ringbuffer of the {@code AsyncLogger}.,      * ,      * @param contextName name of the global {@code AsyncLoggerContext},      */,     public static RingBufferAdmin createRingBufferAdmin(String contextName) {,         return RingBufferAdmin.forAsyncLogger(disruptor.getRingBuffer(), contextName);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEvent.java,execute,99-99,[        asyncLogger.actualAsyncLog(this);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,onEvent,50-50,[            sequenceCallback.set(sequence);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MTPerfTest.java,runTestAndPrintResult,65-65,[        new File("perftest.log").createNewFile();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/MTPerfTest.java,runTestAndPrintResult,64-64,[        new File("perftest.log").delete();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/MTPerfTest.java,runTestAndPrintResult,68-68,[        PerfTest.throughput = false;],,runTestAndPrintResult,72-72,[        PerfTest.throughput = true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTest.java,reportResult,142-142,[            final FileWriter writer = new FileWriter(file, true);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,89-89,[        System.exit(0);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/async/perftest/PerfTest.java,reportResult,142-142,[            final FileWriter writer = new FileWriter(file, true);],,reportResult,143-143,[            writer.write(result);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,81-81,[                throughput = true;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,doMain,78-78,[                verbose = true;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/async/perftest/PerfTest.java,runTestAndPrintResult,118-118,[        throughput = false;],,runTestAndPrintResult,123-123,[        throughput = true;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,301-301,[            final FileReader reader = new FileReader(config._temp);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,main,305-305,[            config._temp.delete();],,main,315-315,[        new File("perftest.log").delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,349-349,[                gc.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,runPerfTest,351-351,[            new File("gc.log").renameTo(gc);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,362-362,[                        process.getInputStream()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,361-361,[                final BufferedReader in = new BufferedReader(new InputStreamReader(],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,run,368-368,[                } catch (final Exception ignored) {],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/async/perftest/PerfTestDriver.java,compareTo,129-129,[            return (int) Math.signum(other._stats._averageOpsPerSec],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,main,172-172,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,88-96,[                    switch (i) {,                     case 0:,                         sb.append("\t").append((long) stats.avgLatency);,                         break;,                     case 1:,                         sb.append("\t").append((long) stats.latency99Pct);,                         break;,                     case 2:,                         sb.append("\t").append((long) stats.latency99_99Pct);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,85-85,[                final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,latencyTable,87-87,[                    final Stats stats = sub.get(subKey);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,117-117,[            final Map<String, Stats> sub = results.get(key);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,throughputTable,119-119,[                final Stats stats = sub.get(subKey);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/async/perftest/PerfTestResultFormatter.java,,153-165,[        return new Comparator<String>() {,             List<String> expected = Arrays.asList("1 thread", "2 threads",,                     "4 threads", "8 threads", "16 threads", "32 threads",,                     "64 threads");, ,             @Override,             public int compare(final String o1, final String o2) {,                 final int i1 = expected.indexOf(o1);,                 final int i2 = expected.indexOf(o2);,                 if (i1 < 0 || i2 < 0) {,                     return o1.compareTo(o2);,                 },                 return i1 - i2;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j1.java,runLatencyTest,51-51,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLog4j2.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/core/async/perftest/RunLogback.java,runLatencyTest,53-53,[            final long PAUSE_NANOS = 10000 * threadCount;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,cleanupClass,63-63,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/AdvertiserTest.java,setupClass,42-42,[        file.delete();],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/logging/log4j/core/config/AppenderControl.java,callAppender,85-85,[            if (!appender.isStarted()) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/BaseConfiguration.java,createAdvertiser,197-197,[            attributes.put("content", new String(buffer));],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/BaseConfiguration.java,setToDefault,317-317,[        final Level level = levelName != null && Level.valueOf(levelName) != null ?],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/BaseConfiguration.java,createPluginObject,627-627,[            } catch (final Exception ex) {],,createPluginObject,641-641,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/BaseConfiguration.java,createPluginObject,617-848,[        final Class<T> clazz = type.getPluginClass();, ,         if (Map.class.isAssignableFrom(clazz)) {,             try {,                 @SuppressWarnings("unchecked"),                 final Map<String, Object> map = (Map<String, Object>) clazz.newInstance();,                 for (final Node child : node.getChildren()) {,                     map.put(child.getName(), child.getObject());,                 },                 return map;,             } catch (final Exception ex) {,                 LOGGER.warn("Unable to create Map for " + type.getElementName() + " of class " +,                     clazz);,             },         }, ,         if (List.class.isAssignableFrom(clazz)) {,             try {,                 @SuppressWarnings("unchecked"),                 final List<Object> list = (List<Object>) clazz.newInstance();,                 for (final Node child : node.getChildren()) {,                     list.add(child.getObject());,                 },                 return list;,             } catch (final Exception ex) {,                 LOGGER.warn("Unable to create List for " + type.getElementName() + " of class " +,                     clazz);,             },         }, ,         Method factoryMethod = null;, ,         for (final Method method : clazz.getMethods()) {,             if (method.isAnnotationPresent(PluginFactory.class)) {,                 factoryMethod = method;,                 break;,             },         },         if (factoryMethod == null) {,             return null;,         }, ,         final Annotation[][] parmArray = factoryMethod.getParameterAnnotations();,         final Class<?>[] parmClasses = factoryMethod.getParameterTypes();,         if (parmArray.length != parmClasses.length) {,             LOGGER.error("Number of parameter annotations does not equal the number of paramters");,         },         final Object[] parms = new Object[parmClasses.length];, ,         int index = 0;,         final Map<String, String> attrs = node.getAttributes();,         final List<Node> children = node.getChildren();,         final StringBuilder sb = new StringBuilder();,         final List<Node> used = new ArrayList<Node>();, ,         /*,          * For each parameter:,          * If the parameter is an attribute store the value of the attribute in the parameter array.,          * If the parameter is an element:,          *   Determine if the required parameter is an array.,          *     If so, if a child contains the array, use it,,          *      otherwise create the array from all child nodes of the correct type.,          *     Store the array into the parameter array.,          *   If not an array, store the object in the child node into the parameter array.,          */,         for (final Annotation[] parmTypes : parmArray) {,             String[] aliases = null;,             for (final Annotation a: parmTypes) {,                 if (a instanceof PluginAliases) {,                     aliases = ((PluginAliases) a).value();,                 },             },             for (final Annotation a : parmTypes) {,                 if (a instanceof PluginAliases) {,                     continue;,                 },                 if (sb.length() == 0) {,                     sb.append(" with params(");,                 } else {,                     sb.append(", ");,                 },                 if (a instanceof PluginNode) {,                     parms[index] = node;,                     sb.append("Node=").append(node.getName());,                 } else if (a instanceof PluginConfiguration) {,                     parms[index] = this;,                     if (this.name != null) {,                         sb.append("Configuration(").append(name).append(")");,                     } else {,                         sb.append("Configuration");,                     },                 } else if (a instanceof PluginValue) {,                     final String name = ((PluginValue) a).value();,                     String v = node.getValue();,                     if (v == null) {,                         v = getAttrValue("value", null, attrs);,                     },                     final String value = subst.replace(event, v);,                     sb.append(name).append("=\"").append(value).append("\"");,                     parms[index] = value;,                 } else if (a instanceof PluginAttribute) {,                     PluginAttribute attr = (PluginAttribute) a;,                     final String name = attr.value();,                     final String value = subst.replace(event, getAttrValue(name, aliases, attrs));,                     sb.append(name).append("=\"").append(value).append("\"");,                     parms[index] = value;,                 } else if (a instanceof PluginElement) {,                     final PluginElement elem = (PluginElement) a;,                     final String name = elem.value();,                     if (parmClasses[index].isArray()) {,                         final Class<?> parmClass = parmClasses[index].getComponentType();,                         final List<Object> list = new ArrayList<Object>();,                         sb.append(name).append("={");,                         boolean first = true;,                         for (final Node child : children) {,                             final PluginType<?> childType = child.getType();,                             if (elem.value().equalsIgnoreCase(childType.getElementName()) ||,                                 parmClass.isAssignableFrom(childType.getPluginClass())) {,                                 used.add(child);,                                 if (!first) {,                                     sb.append(", ");,                                 },                                 first = false;,                                 final Object obj = child.getObject();,                                 if (obj == null) {,                                     LOGGER.error("Null object returned for " + child.getName() + " in " +,                                         node.getName());,                                     continue;,                                 },                                 if (obj.getClass().isArray()) {,                                     printArray(sb, (Object[]) obj);,                                     parms[index] = obj;,                                     break;,                                 },                                 sb.append(child.toString());,                                 list.add(obj);,                             },                         },                         sb.append("}");,                         if (parms[index] != null) {,                             break;,                         },                         if (list.size() > 0 && !parmClass.isAssignableFrom(list.get(0).getClass())) {,                             LOGGER.error("Attempted to assign List containing class " +,                                 list.get(0).getClass().getName() + " to array of type " + parmClass +,                                 " for attribute " + name);,                             break;,                         },                         final Object[] array = (Object[]) Array.newInstance(parmClass, list.size());,                         int i = 0;,                         for (final Object obj : list) {,                             array[i] = obj;,                             ++i;,                         },                         parms[index] = array;,                     } else {,                         final Class<?> parmClass = parmClasses[index];,                         boolean present = false;,                         for (final Node child : children) {,                             final PluginType<?> childType = child.getType();,                             if (elem.value().equals(childType.getElementName()) ||,                                 parmClass.isAssignableFrom(childType.getPluginClass())) {,                                 sb.append(child.getName()).append("(").append(child.toString()).append(")");,                                 present = true;,                                 used.add(child);,                                 parms[index] = child.getObject();,                                 break;,                             },                         },                         if (!present) {,                             sb.append("null");,                         },                     },                 },             },             ++index;,         },         if (sb.length() > 0) {,             sb.append(")");,         }, ,         if (attrs.size() > 0) {,             final StringBuilder eb = new StringBuilder();,             for (final String key : attrs.keySet()) {,                 if (eb.length() == 0) {,                     eb.append(node.getName());,                     eb.append(" contains ");,                     if (attrs.size() == 1) {,                         eb.append("an invalid element or attribute ");,                     } else {,                         eb.append("invalid attributes ");,                     },                 } else {,                     eb.append(", ");,                 },                 eb.append("\"");,                 eb.append(key);,                 eb.append("\"");, ,             },             LOGGER.error(eb.toString());,         }, ,         if (!type.isDeferChildren() && used.size() != children.size()) {,             for (final Node child : children) {,                 if (used.contains(child)) {,                     continue;,                 },                 final String nodeType = node.getType().getElementName();,                 final String start = nodeType.equals(node.getName()) ? node.getName() : nodeType + " " + node.getName();,                 LOGGER.error(start + " has no parameter that matches element " + child.getName());,             },         }, ,         try {,             final int mod = factoryMethod.getModifiers();,             if (!Modifier.isStatic(mod)) {,                 LOGGER.error(factoryMethod.getName() + " method is not static on class " +,                     clazz.getName() + " for element " + node.getName());,                 return null;,             },             LOGGER.debug("Calling {} on class {} for element {}{}", factoryMethod.getName(), clazz.getName(),,                 node.getName(), sb.toString());,             //if (parms.length > 0) {,                 return factoryMethod.invoke(null, parms);,             //},             //return factoryMethod.invoke(null, node);,         } catch (final Exception e) {,             LOGGER.error("Unable to invoke method " + factoryMethod.getName() + " in class " +,                 clazz.getName() + " for element " + node.getName(), e);,         },         return null;],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/BaseConfiguration.java,addLoggerAppender,421-421,[        appenders.putIfAbsent(appender.getName(), appender);],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/BaseConfiguration.java,,113-113,[    private final boolean started = false;],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/config/BaseConfiguration.java,getAttrValue,865-865,[                final String attr = attrs.get(key);],,
MT_CORRECTNESS,DL_SYNCHRONIZATION_ON_SHARED_CONSTANT,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInstance,117-117,[            synchronized(TEST_PREFIX) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInputFromString,279-279,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInstance,137-137,[                        } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getConfiguration,375-375,[                    } catch (Exception ex) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getSupportedTypes,455-455,[            return null;],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,compareTo,343-349,[            final int w = wf.weight;,             if (weight == w) {,                 return 0;,             } else if (weight > w) {,                 return -1;,             } else {,                 return 1;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/DefaultConfiguration.java,<init>,61-61,[        final Level level = levelName != null && Level.valueOf(levelName) != null ?],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/FileOutputTest.java,cleanupClass,62-62,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/FileOutputTest.java,setupClass,41-41,[        file.delete();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/JSONConfiguration.java,<init>,155-155,[        } catch (final Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/JSONConfiguration.java,,321-330,[    private class Status {,         private final JsonNode node;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final JsonNode node, final ErrorType errorType) {,             this.name = name;,             this.node = node;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/JSONConfiguration.java,,328-328,[            this.node = node;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/JSONConfigurationFactory.java,,33-33,[    public static final String[] SUFFIXES = new String[] {".json", ".jsn"};],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/JSONConfigurationFactory.java,,41-41,[    private final File configFile = null;],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/LoggerConfig.java,createLogger,363-363,[            }],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/LoggerConfig.java,createLogger,382-382,[                wait(WAIT_TIME * (retries + 1));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/config/Node.java,toString,104-104,[    public void setObject(final Object obj) {],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/TestConfigurator.java,testBadFileName,322-322,[            dir.append(element.toUpperCase());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/XMLConfiguration.java,,388-397,[    private class Status {,         private final Element element;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final Element element, final ErrorType errorType) {,             this.name = name;,             this.element = element;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/XMLConfiguration.java,,395-395,[            this.element = element;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/XMLConfigurationFactory.java,,31-31,[    public static final String[] SUFFIXES = new String[] {".xml", "*"};],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/XMLConfigurationTest.java,logToFile,92-92,[        final BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(logFile)));],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/config/XMLConfigurationTest.java,logToFile,87-87,[        final FileOutputStream fos = new FileOutputStream(logFile, false);],,logToFile,88-88,[        fos.flush();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,collectPlugins,185-185,[            map.put(plugin.name().toLowerCase(), pluginType);],,collectPlugins,191-191,[                    map.put(alias.trim().toLowerCase(), pluginType);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,getPluginType,115-115,[        return plugins.get(name.toLowerCase());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/PluginManager.java,decode,246-246,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/PluginManager.java,encode,278-278,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,encode,261-261,[            file.mkdirs();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/config/plugins/PluginManager.java,collectPlugins,154-154,[                pluginTypeMap = map;],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/core/config/plugins/PluginType.java,,29-52,[    private static final long serialVersionUID = 4743255148794846612L;, ,     private final Class<T> pluginClass;,     private final String elementName;,     private final boolean printObject;,     private final boolean deferChildren;, ,     public PluginType(final Class<T> clazz, final String name, final boolean printObj, final boolean deferChildren) {,         this.pluginClass = clazz;,         this.elementName = name;,         this.printObject = printObj;,         this.deferChildren = deferChildren;,     }, ,     public Class<T> getPluginClass() {,         return this.pluginClass;,     }, ,     public String getElementName() {,         return this.elementName;,     }, ,     public boolean isObjectPrintable() {,         return this.printObject;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/filter/BurstFilter.java,,167-213,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         @Override,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         @Override,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
BAD_PRACTICE,NM_METHOD_NAMING_CONVENTION,org/apache/logging/log4j/core/filter/RegexFilterTest.java,TestNoMsg,58-65,[        final RegexFilter filter = RegexFilter.createFilter(".* test .*", null, null, null);,         filter.start();,         assertTrue(filter.isStarted());,         assertTrue(filter.filter(null, Level.DEBUG, null, (String)null, (Throwable)null) == Filter.Result.DENY);,         assertTrue(filter.filter(null, Level.DEBUG, null, (Message)null, (Throwable)null) == Filter.Result.DENY);,         assertTrue(filter.filter(null, Level.DEBUG, null, null, (Object[])null) == Filter.Result.DENY);, ,     }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/helpers/Closer.java,closeSilent,42-42,[        } catch (final Exception ignored) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/helpers/Closer.java,closeSilent,98-98,[        } catch (final Exception ignored) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/helpers/Closer.java,closeSilent,70-70,[        } catch (final Exception ignored) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/helpers/CyclicBuffer.java,,92-92,[        return 0 == numElems;],,,62-62,[        if (numElems < ring.length) {],,,63-63,[            numElems++;],,,74-74,[        final T[] array = makeArray(clazz, numElems);],,,76-76,[        while (numElems > 0) {],,,77-77,[            numElems--;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/helpers/NameUtil.java,md5,42-42,[            digest.update(string.getBytes());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/helpers/NameUtil.java,md5,53-53,[        } catch (final Exception ex) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/helpers/OptionConverter.java,toFileSize,171-171,[        if (str != null) {],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/core/helpers/Transform.java,escapeJsonControlCharacters,145-147,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,escapeJsonControlCharacters,149-151,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,escapeJsonControlCharacters,153-155,[                buf.append(escBs);,                 buf.append(ch);                ,                 break;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/helpers/UUIDTest.java,,106-121,[        public Worker(final UUID[] uuids, final long[] elapsed, final int index, final int count) {,             this.uuids = uuids;,             this.index = index;,             this.count = count;,             this.elapsed = elapsed;,         }, ,         @Override,         public void run() {,             final int pos = index * count;,             final long start = System.nanoTime();,             for (int i=pos; i < pos + count; ++i) {,                 uuids[i] = UUIDUtil.getTimeBasedUUID();,             },             elapsed[index] = System.nanoTime() - start;,         }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/helpers/UUIDUtil.java,<clinit>,75-75,[                    if (method != null) {],,<clinit>,86-86,[                            if (method != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/helpers/UUIDUtil.java,<clinit>,92-92,[            } catch (final Exception ex) {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/core/impl/ReflectionComparison.java,testCreateObjects,87-87,[            new StringFormattedMessage("Hello %1", i);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/impl/ThrowableProxy.java,getSuppressed,488-488,[                return null;],,getSuppressed,491-491,[        return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,setSuppressed,501-501,[            } catch (final Exception ignore) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,getSuppressed,487-487,[            } catch (final Exception ignore) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,resolvePackageElement,434-434,[            } catch (final Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/impl/ThrowableProxy.java,,510-517,[    class CacheEntry {,         private final StackTracePackageElement element;,         private final ClassLoader loader;, ,         public CacheEntry(final StackTracePackageElement element, final ClassLoader loader) {,             this.element = element;,             this.loader = loader;,         }],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/core/jmx/Server.java,escape,73-81,[            switch (c) {,             case ',':,             case '=':,             case ':':,             case '\\':,             case '*':,             case '?':,                 sb.append('\\');,                 needsQuotes = true;],,
CORRECTNESS,VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED,org/apache/logging/log4j/core/jmx/Server.java,unregisterContext,197-197,[        final String search = String.format(pattern, contextName, "*");],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerAppenders,314-314,[            final Appender appender = map.get(name);],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/jmx/Server.java,registerLoggerConfigs,297-297,[            final LoggerConfig cfg = map.get(name);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/jmx/Server.java,propertyChange,163-163,[                    } catch (final Exception ex) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/layout/AbstractStringLayout.java,<init>,41-41,[     * @return The formatted event as a byte array.],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JSONLayout.java,getFooter,315-315,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/JSONLayout.java,getHeader,299-299,[            return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,createPatternParser,183-183,[            return new PatternParser(config, KEY, LogEventPatternConverter.class);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,setConversionPattern,128-128,[        if (pattern == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testRegex,141-141,[        assertEquals("org/apache/logging/log4j/core/layout/PatternLayoutTest Hello, world!", new String(result));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,168-168,[        assertEquals(event1.getMillis() / 1000 + " Hello, world 1!", new String(result1));],,testUnixTime,173-173,[        assertEquals(event2.getMillis() / 1000 + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,151-151,[        assertEquals(event1.getMillis() + " Hello, world 1!", new String(result1));],,testUnixTime,156-156,[        assertEquals(event2.getMillis() + " Hello, world 2!", new String(result2));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTimeMillis,185-185,[        assertEquals(event1.getMillis() + " Hello, world 1!", new String(result1));],,testUnixTimeMillis,190-190,[        assertEquals(event2.getMillis() + " Hello, world 2!", new String(result2));],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testUnixTime,145-158,[        final LoggerContext ctx = (LoggerContext) LogManager.getContext();,         final PatternLayout layout = PatternLayout.createLayout(pattern + " %m", ctx.getConfiguration(), null, null,,                 null);,         final LogEvent event1 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 1!"), null);,         final byte[] result1 = layout.toByteArray(event1);,         assertEquals(event1.getMillis() + " Hello, world 1!", new String(result1));,         // System.out.println("event1=" + event1.getMillis());,         final LogEvent event2 = new Log4jLogEvent(this.getClass().getName(), null,,                 "org.apache.logging.log4j.core.Logger", Level.INFO, new SimpleMessage("Hello, world 2!"), null);,         final byte[] result2 = layout.toByteArray(event2);,         assertEquals(event2.getMillis() + " Hello, world 2!", new String(result2));,         // System.out.println("event2=" + event2.getMillis());,     }],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/layout/RFC5424Layout.java,getId,315-315,[        final String type = isStructured ? ((StructuredDataMessage) message).getType() : null;],,getId,311-311,[    }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/RFC5424Layout.java,,693-717,[        public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {,             this.discardIfEmpty = discardIfEmpty;,             this.fields = fields;,         }, ,         boolean discard() {,             if (discardIfEmpty == false) {,                 return false;,             },             boolean foundNotEmptyValue = false;,             for (final Map.Entry<String, String> entry : fields.entrySet()) {,                 if (Strings.isNotEmpty(entry.getValue())) {,                     foundNotEmptyValue = true;,                     break;,                 },             },             return !foundNotEmptyValue;,         }, ,         void union(final Map<String, String> fields) {,             this.fields.putAll(fields);,         }, ,         Map<String, String> getFields() {,             return this.fields;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/SerializedLayout.java,,124-130,[        public PrivateObjectOutputStream(final OutputStream os) throws IOException {,             super(os);,         }, ,         @Override,         protected void writeStreamHeader() {,         }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XMLLayout.java,getFooter,338-338,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XMLLayout.java,getHeader,314-314,[            return null;],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,46-125,[    private class MyLogEvent implements LogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public Level getLevel() {,             return null;,         }, ,         @Override,         public String getLoggerName() {,             return null;,         }, ,         @Override,         public StackTraceElement getSource() {,             return null;,         }, ,         @Override,         public Message getMessage() {,             return null;,         }, ,         @Override,         public Marker getMarker() {,             return null;,         }, ,         @Override,         public String getThreadName() {,             return null;,         }, ,         @Override,         public long getMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();,         }, ,         @Override,         public Throwable getThrown() {,             return null;,         }, ,         @Override,         public Map<String, String> getContextMap() {,             return null;,         }, ,         @Override,         public ThreadContext.ContextStack getContextStack() {,             return null;,         }, ,         @Override,         public String getFQCN() {,             return null;,         }, ,         @Override,         public boolean isEndOfBatch() {,             return false;,         }, ,         @Override,         public void setEndOfBatch(final boolean endOfBatch) {,         }, ,         @Override,         public boolean isIncludeLocation() {,             return false;,         }, ,         @Override,         public void setIncludeLocation(final boolean locationRequired) {,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,46-125,[    private class MyLogEvent implements LogEvent {,         /**,          * Generated serial version ID.,          */,         private static final long serialVersionUID = -2663819677970643109L;, ,         @Override,         public Level getLevel() {,             return null;,         }, ,         @Override,         public String getLoggerName() {,             return null;,         }, ,         @Override,         public StackTraceElement getSource() {,             return null;,         }, ,         @Override,         public Message getMessage() {,             return null;,         }, ,         @Override,         public Marker getMarker() {,             return null;,         }, ,         @Override,         public String getThreadName() {,             return null;,         }, ,         @Override,         public long getMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();,         }, ,         @Override,         public Throwable getThrown() {,             return null;,         }, ,         @Override,         public Map<String, String> getContextMap() {,             return null;,         }, ,         @Override,         public ThreadContext.ContextStack getContextStack() {,             return null;,         }, ,         @Override,         public String getFQCN() {,             return null;,         }, ,         @Override,         public boolean isEndOfBatch() {,             return false;,         }, ,         @Override,         public void setEndOfBatch(final boolean endOfBatch) {,         }, ,         @Override,         public boolean isIncludeLocation() {,             return false;,         }, ,         @Override,         public void setIncludeLocation(final boolean locationRequired) {,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/AbstractSocketServerTest.java,,50-56,[        public ThreadFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Filter.Result filter(final LogEvent event) {,             return event.getThreadName().equals(Thread.currentThread().getName()) ? onMatch : onMismatch;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueAppenderTest.java,,56-56,[    Logger root = ctx.getLogger("JMSQueueTest");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueAppenderTest.java,,68-68,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,before,84-84,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,before,81-81,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,testReconnect,119-119,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/JMSQueueManager.java,,124-124,[            info.session.close();],,,131-131,[            info.conn.close();],,,137-137,[        info = null;],,,117-117,[        if (info != null) {],,,104-104,[        if (info == null) {],,,108-108,[            super.send(object, info.session, info.sender);],,,105-105,[            info = connect(context, factoryBindingName, queueBindingName, userName, password, false);],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/JMSQueueReceiver.java,usage,104-104,[        System.exit(1);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueTest.java,,75-75,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/JMSQueueTest.java,,126-140,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSTopicFailoverTest.java,before,83-83,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSTopicFailoverTest.java,before,80-80,[        config = ctx.getConfiguration();],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/JMSTopicReceiver.java,usage,102-102,[        System.exit(1);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSTopicTest.java,,75-75,[        receiver = new JMSTopicReceiver(FACTORY_NAME, TOPIC_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/JMSTopicTest.java,,127-141,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
CORRECTNESS,BSHIFT_WRONG_ADD_PRIORITY,org/apache/logging/log4j/core/net/Priority.java,getValue,70-70,[        return facility.getCode() << 3 + severity.getCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/net/SMTPManager.java,,343-349,[                return new Authenticator() {,                     private final PasswordAuthentication passwordAuthentication =,                         new PasswordAuthentication(username, password);, ,                     @Override,                     protected PasswordAuthentication getPasswordAuthentication() {,                         return passwordAuthentication;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,69-69,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,69-69,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,147-147,[                    final BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/SocketReconnectTest.java,run,149-149,[                    if (line.equals("Shutdown")) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/SocketServer.java,run,193-193,[                    } catch (final Exception ex) {],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/net/SocketTest.java,closeQuietly,100-103,[        if (null != executor) {,             executor.shutdownNow();,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/net/SocketTest.java,closeQuietly,106-109,[        if (null != testServer) {,             testServer.close();,         },     }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/TCPSocketManager.java,,207-207,[                        connector = null;],,,115-115,[            if (connector != null && !immediateFail) {],,,116-116,[                connector.latch();],,,127-127,[                if (retry && connector == null) {],,,128-128,[                    connector = new Reconnector(this);],,,129-129,[                    connector.setDaemon(true);],,,130-130,[                    connector.setPriority(Thread.MIN_PRIORITY);],,,131-131,[                    connector.start();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/net/TCPSocketManager.java,write,118-118,[            if (socket == null) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/core/net/TCPSocketManager.java,<init>,86-86,[            connector.start();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/TLSSocketManager.java,,114-114,[        private class TLSSocketManagerFactoryException extends Exception {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/UDPSocketServer.java,main,99-99,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/UDPSocketServer.java,,58-58,[    private final int maxBufferSize = 1024 * 65 + 1024;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,28-28,[        this.numberOfMessagesToReceive = numberOfMessagesToReceive;],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/mock/MockSyslogServer.java,,30-30,[        this.port = port;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockTCPSyslogServer.java,run,57-57,[                            final String line = new String(buffer, 0, i);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/net/mock/MockTCPSyslogServer.java,run,52-52,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/net/mock/MockTCPSyslogServer.java,run,69-69,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockTCPSyslogServer.java,shutdown,41-41,[        thread.interrupt();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTLSSyslogServer.java,closeSockets,96-96,[            catch(Exception e) {}],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/mock/MockTLSSyslogServer.java,shutdown,53-53,[            catch (Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/mock/MockTLSSyslogServer.java,,77-77,[        syslogReader = createTLSSyslogReader(clientSocketInputStream);],,,111-111,[                message = syslogReader.read();],,
MT_CORRECTNESS,NO_NOTIFY_NOT_NOTIFYALL,org/apache/logging/log4j/core/net/mock/MockTLSSyslogServer.java,processFrames,120-120,[            this.notify();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/mock/MockUDPSyslogServer.java,run,47-47,[                final String str = new String(packet.getData(), 0, packet.getLength());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/net/mock/MockUDPSyslogServer.java,shutdown,35-35,[        thread.interrupt();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/LegacyBSDTLSSyslogInputStreamReader.java,read,47-47,[                message = buffer.toString();],,read,53-53,[        message = buffer.toString();],,
CORRECTNESS,EQ_SELF_USE_OBJECT,org/apache/logging/log4j/core/net/ssl/SSLConfiguration.java,equals,216-232,[        if (config == null),             return false;, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null),             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         else,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;, ,         if (trustStoreConfig != null),             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         else,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;, ,         return keyStoreEquals && trustStoreEquals;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/net/ssl/SSLConfiguration.java,equals,216-232,[        if (config == null),             return false;, ,         boolean keyStoreEquals = false;,         boolean trustStoreEquals = false;, ,         if (keyStoreConfig != null),             keyStoreEquals = keyStoreConfig.equals(config.keyStoreConfig);,         else,             keyStoreEquals = keyStoreConfig == config.keyStoreConfig;, ,         if (trustStoreConfig != null),             trustStoreEquals = trustStoreConfig.equals(config.trustStoreConfig);,         else,             trustStoreEquals = trustStoreConfig == config.trustStoreConfig;, ,         return keyStoreEquals && trustStoreEquals;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/SSLConfigurationTest.java,connectionFailsWithoutValidServerCertificate,53-53,[        os.write("GET config/login_verify2?".getBytes());],,
CORRECTNESS,EQ_SELF_USE_OBJECT,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,59-75,[        if (config == null),             return false;, ,         boolean locationEquals = false;,         boolean passwordEquals = false;, ,         if (location != null),             locationEquals = location.equals(config.location);,         else,             locationEquals = location == config.location;, ,         if (password != null),             passwordEquals = password.equals(config.password);,         else,             passwordEquals = password == config.password;, ,         return locationEquals && passwordEquals;],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,68-68,[            locationEquals = location == config.location;],,
BAD_PRACTICE,ES_COMPARING_STRINGS_WITH_EQ,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,73-73,[            passwordEquals = password == config.password;],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,equals,59-75,[        if (config == null),             return false;, ,         boolean locationEquals = false;,         boolean passwordEquals = false;, ,         if (location != null),             locationEquals = location.equals(config.location);,         else,             locationEquals = location == config.location;, ,         if (password != null),             passwordEquals = password.equals(config.password);,         else,             passwordEquals = password == config.password;, ,         return locationEquals && passwordEquals;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/net/ssl/StoreConfiguration.java,getPasswordAsCharArray,49-49,[            return null;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/net/ssl/TLSSyslogInputStreamReader.java,calculateNextMessageLength,88-88,[        nextMessageLength = new Integer(new String(length));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TLSSyslogInputStreamReader.java,buildMessage,67-67,[        String message = messageBuffer.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/ssl/TLSSyslogInputStreamReader.java,calculateNextMessageLength,88-88,[        nextMessageLength = new Integer(new String(length));],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/net/ssl/TLSSyslogInputStreamReader.java,calculateNextMessageLength,88-88,[        nextMessageLength = new Integer(new String(length));],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/core/net/ssl/TLSSyslogInputStreamReaderBase.java,,29-29,[        this.messageFormat = messageFormat;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/AnsiEscape.java,createSequence,325-325,[            } catch (final Exception ex) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/DatePatternConverter.java,,239-239,[        output.append(cachedDateString);],,,236-236,[                cachedDateString = formatter.format(timestamp);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/HighlightConverter.java,createLevelStyleMap,150-150,[                if (level == null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/LevelPatternConverter.java,newInstance,68-68,[            if (pair == null || pair.length != 2) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,434-434,[            if (converterClass == null && rules != null) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,434-434,[            if (converterClass == null && rules != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,499-499,[        } catch (final Exception ex) {],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,51-51,[    private final String mdcMsgPattern1 = "%m : %X%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,52-52,[    private final String mdcMsgPattern2 = "%m : %X{key1}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,53-53,[    private final String mdcMsgPattern3 = "%m : %X{key2}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,54-54,[    private final String mdcMsgPattern4 = "%m : %X{key3}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,55-55,[    private final String mdcMsgPattern5 = "%m : %X{key1},%X{key2},%X{key3}%n";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,48-48,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,45-45,[    static String OUTPUT_FILE   = "output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,46-46,[    static String WITNESS_FILE  = "witness/PatternParser";],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java,,68-68,[        toAppendTo.append(relative);],,,65-65,[                relative = Long.toString(timestamp - startTime);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.java,formatSubShortOption,100-100,[            if (trace !=null && trace.length > 0) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,99-99,[                    for (int index = 2; clazz != null; ++index) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,115-115,[                } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,60-60,[        final BufferedReader in1 = new BufferedReader(new FileReader(file1));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,62-62,[            open(testClass, file2)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,outputFile,114-114,[        final BufferedReader in1 = new BufferedReader(new InputStreamReader(is));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,<clinit>,40-40,[        catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,start,61-61,[            catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,stop,78-78,[            catch (final Exception e) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java,,163-163,[        if (this.loggerContext != null) {],,,164-164,[            ContextAnchor.THREAD_CONTEXT.set(this.loggerContext);],,,121-121,[        this.loggerContext = loggerContext;],,,136-136,[        this.loggerContext = Configurator.initialize(this.name, this.getClassLoader(), location, this.servletContext);],,,149-149,[            if (this.loggerContext != null) {],,,154-154,[                this.loggerContext.stop();],,,155-155,[                this.loggerContext.setExternalContext(null);],,,156-156,[                this.loggerContext = null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,261-261,[        if (manager == null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,195-195,[                } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,testNotConnected,313-313,[        } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getBody,417-417,[        return new String(baos.toByteArray());],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getAppender,406-406,[        return logger.getAppenders().get(name);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,,76-76,[        ctx = (LoggerContext) LogManager.getContext();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,235-235,[        if (rpcClient != null) {],,,242-242,[        rpcClient = null;],,,237-237,[                rpcClient.close();],,,165-165,[        if (rpcClient == null) {],,,169-169,[        if (rpcClient != null) {],,,171-171,[                rpcClient.append(event);],,,166-166,[            rpcClient = connect(agents, retries, connectTimeout, requestTimeout);],,,173-173,[                rpcClient.close();],,,174-174,[                rpcClient = null;],,,139-139,[        if (rpcClient == null) {],,,143-143,[        if (rpcClient != null) {],,,140-140,[            rpcClient = connect(agents, retries, connectTimeout, requestTimeout);],,,148-148,[                rpcClient.close();],,,149-149,[                rpcClient = null;],,,146-146,[                rpcClient.appendBatch(events.getEvents());],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,47-47,[    private final int current = 0;],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,findFreePorts,293-293,[                    } catch (final Exception ex) {],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,222-222,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,getBody,205-205,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,214-214,[            for (final File child : files) {],,deleteFiles,213-213,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,setUp,104-104,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,teardown,113-113,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,testFailover,186-186,[            final Event event = alternate.poll();],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,findFreePorts,319-319,[                    } catch (final Exception ex) {],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,247-247,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,getBody,230-230,[            return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,239-239,[            for (final File child : files) {],,deleteFiles,238-238,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,setUp,104-104,[        ctx = (LoggerContext) LogManager.getContext(false);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,findFreePorts,458-458,[                    } catch (final Exception ex) {],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,384-384,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,getBody,367-367,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,deleteFiles,376-376,[            for (final File child : files) {],,deleteFiles,375-375,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,setUp,106-106,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/flume/appender/FlumePersistentAppenderTest.java,,297-309,[        public WriterThread(int start, int stop) {,             this.start = start;,             this.stop = stop;,         }, ,         public void run() {,             for (int i = start; i < stop; ++i) {,                 final StructuredDataMessage msg = new StructuredDataMessage(,                     "Test", "Test Multiple " + i, "Test");,                 msg.put("counter", Integer.toString(i));,                 EventLogger.logEvent(msg);,             },         }],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,send,215-215,[        } catch (final Exception ex) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,<init>,129-129,[        this.worker.start();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createManager,446-446,[                                } catch (final Exception ex) {],,createManager,460-460,[            } catch (final Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,call,324-324,[                        } catch (Exception ex) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,,834-834,[            return isOpen;],,,838-838,[            isOpen = true;],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,waitForOpen,847-847,[            wait(timeout);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,591-591,[                                        } catch (Exception ex) {],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,sendBatch,701-701,[                                    } catch (Exception ex) {],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,540-540,[                                        status = cursor.getFirst(key, data, LockMode.RMW);],,run,559-559,[                                        if (cursor != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,run,618-618,[                    } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,sendBatch,757-757,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,794-794,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RR_NOT_CHECKED,org/apache/logging/log4j/flume/appender/FlumePersistentManager.java,createEvent,783-783,[                dais.read(bytes, 0, length);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,findFreePorts,234-234,[                    } catch (final Exception ex) {],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,163-163,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,146-146,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,deleteFiles,155-155,[            for (final File child : files) {],,deleteFiles,154-154,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,setUp,102-102,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,getBody,140-146,[        final ByteArrayOutputStream baos = new ByteArrayOutputStream();,         final InputStream is = new GZIPInputStream(new ByteArrayInputStream(event.getBody()));,         int n = 0;,         while (-1 != (n = is.read())) {,             baos.write(n);,         },         return new String(baos.toByteArray());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,111-111,[        alternate.stop();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/flume/appender/FlumePersistentPerf.java,teardown,110-110,[        primary.stop();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/jcl/LoggerTest.java,setupClass,50-50,[        ctx.getConfiguration();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGUI.java,installLookAndFeel,219-219,[        } catch (final Exception ex) {],,
BAD_PRACTICE,SE_BAD_FIELD,org/apache/logging/log4j/jmx/gui/Client.java,,57-152,[            IOException {,         this.connector = Assert.isNotNull(connector, "JMXConnector");,         this.connector.connect();,         this.connection = connector.getMBeanServerConnection();,         init();,     }, ,     /**,      * Constructs a new {@code Client} object and creates proxies for all known,      * remote MBeans.,      *,      * @param mBeanServerConnection the MBean server connection through which to,      *            communicate with the remote mbeans,      * @throws MalformedObjectNameException if a problem occurred identifying,      *             one of the remote mbeans,      * @throws IOException if the connection failed,      */,     public Client(final MBeanServerConnection mBeanServerConnection),             throws MalformedObjectNameException, IOException {,         this.connection = mBeanServerConnection;,         init();,     }, ,     private void init() throws MalformedObjectNameException, IOException {,         statusLoggerAdmin = JMX.newMBeanProxy(connection, //,                 new ObjectName(StatusLoggerAdminMBean.NAME), //,                 StatusLoggerAdminMBean.class, true);, ,         contextSelectorAdmin = JMX.newMBeanProxy(connection, //,                 new ObjectName(ContextSelectorAdminMBean.NAME), //,                 ContextSelectorAdminMBean.class, false);, ,         contextAdminList = new ArrayList<LoggerContextAdminMBean>();,         final String pattern = String.format(LoggerContextAdminMBean.PATTERN, "*");,         final ObjectName search = new ObjectName(pattern);,         final Set<ObjectName> found = connection.queryNames(search, null);,         for (final ObjectName contextName : found) {,             final LoggerContextAdminMBean ctx = JMX.newMBeanProxy(connection, //,                     contextName, //,                     LoggerContextAdminMBean.class, false);,             contextAdminList.add(ctx);, ,             // TODO Appenders, LoggerConfigs,         },     }, ,     /**,      * Returns a proxy that allows operations to be performed on the remote,      * {@code ContextSelectorAdminMBean}.,      *,      * @return a proxy to the remote {@code ContextSelectorAdminMBean},      */,     public ContextSelectorAdminMBean getContextSelectorAdmin() {,         return contextSelectorAdmin;,     }, ,     /**,      * Returns a list of proxies that allow operations to be performed on the,      * remote {@code LoggerContextAdminMBean}s.,      *,      * @return a list of proxies to the remote {@code LoggerContextAdminMBean}s,      */,     public List<LoggerContextAdminMBean> getLoggerContextAdmins() {,         return new ArrayList<LoggerContextAdminMBean>(contextAdminList);,     }, ,     /**,      * Closes the client connection to its server. Any ongoing or new requests,      * to the MBeanServerConnection will fail.,      */,     public void close() {,         try {,             connector.close();,         } catch (final IOException e) {,             e.printStackTrace();,         },     }, ,     /**,      * Returns the MBean server connection through which to communicate with the,      * remote mbeans.,      *,      * @return the MBean server connection,      */,     public MBeanServerConnection getConnection() {,         return connection;,     }, ,     /**,      * Returns a proxy that allows operations to be performed on the remote,      * {@code StatusLoggerAdminMBean}.,      *,      * @return a proxy to the remote {@code StatusLoggerAdminMBean},      */,     public StatusLoggerAdminMBean getStatusLoggerAdmin() {,         return statusLoggerAdmin;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/jmx/gui/ClientGUI.java,run,185-185,[                } catch (final Exception ex) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,44-44,[        this.isAlive = thread.isAlive();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,41-41,[        this.longName = thread.toString();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/message/ExtendedThreadInformation.java,printStack,63-66,[                        break;,                     case WAITING:,                         sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());],,printStack,68-71,[                        break;,                     case TIMED_WAITING:,                         sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testNoArgs,61-61,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testParamNoArgs,82-82,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testStringNoArgs,39-39,[        msg = new FormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/FormattedMessageTest.java,,29-29,[    String[] array = new String[LOOP_CNT];],,
STYLE,EQ_DOESNT_OVERRIDE_EQUALS,org/apache/logging/log4j/message/ParameterizedMessage.java,equals,254-271,[     * @param arguments      the arguments to be used to replace placeholders.,      * @return the formatted message.,      */,     public static String format(final String messagePattern, final Object[] arguments) {,         if (messagePattern == null || arguments == null || arguments.length == 0) {,             return messagePattern;,         }, ,         final StringBuilder result = new StringBuilder();,         int escapeCounter = 0;,         int currentArgument = 0;,         for (int i = 0; i < messagePattern.length(); i++) {,             final char curChar = messagePattern.charAt(i);,             if (curChar == ESCAPE_CHAR) {,                 escapeCounter++;,             } else {,                 if (curChar == DELIM_START) {,                     if (i < messagePattern.length() - 1) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/LocalizedMessageTest.java,,31-31,[    String[] array = new String[LOOP_CNT];],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/MessageFormatMessageTest.java,testNoArgs,40-40,[        msg = new MessageFormatMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/MessageFormatMessageTest.java,,30-30,[    String[] array = new String[LOOP_CNT];],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testFormattedParameterizedPerf,118-118,[        formattedTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testMessageFormatPerf,90-90,[        msgFormatTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testParameterizedPerf,104-104,[        paramTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testStringPerf,76-76,[        stringTime = timer.getElapsedNanoTime();],,
STYLE,IM_BAD_CHECK_FOR_ODD,org/apache/logging/log4j/message/ParameterizedMessage.java,format,309-309,[        }],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/ParameterizedMessageTest.java,testNoArgs,38-38,[    }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/SimpleMessage.java,getParameters,65-65,[    public Object[] getParameters() {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/StringFormattedMessageTest.java,testNoArgs,40-40,[        msg = new StringFormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/StringFormattedMessageTest.java,,30-30,[    String[] array = new String[LOOP_CNT];],,
STYLE,UC_USELESS_CONDITION,org/apache/logging/log4j/message/StructuredDataId.java,<init>,96-96,[        this.name = name;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/logging/log4j/message/StructuredDataMessage.java,,47-287,[        FULL,     }, ,     /**,      * Constructor based on a String id.,      * @param id The String id.,      * @param msg The message.,      * @param type The message type.,      */,     public StructuredDataMessage(final String id, final String msg, final String type) {,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     },     /**,      * Constructor based on a String id.,      * @param id The String id.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final String id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type) {,         this.id = id;,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = id;,         this.message = msg;,         this.type = type;,     }, , ,     /**,      * Constructor based on a StructuredDataMessage.,      * @param msg The StructuredDataMessage.,      * @param map The StructuredData map.,      */,     private StructuredDataMessage(final StructuredDataMessage msg, final Map<String, String> map) {,         super(map);,         this.id = msg.id;,         this.message = msg.message;,         this.type = msg.type;,     }, , ,     /**,      * Basic constructor.,      */,     protected StructuredDataMessage() {, ,     }, ,     /**,      * Returns the supported formats.,      * @return An array of the supported format names.,      */,     @Override,     public String[] getFormats() {,         final String[] formats = new String[Format.values().length];,         int i = 0;,         for (final Format format : Format.values()) {,             formats[i++] = format.name();,         },         return formats;,     }, ,     /**,      * Returns the id.,      * @return the StructuredDataId.,      */,     public StructuredDataId getId() {,         return id;,     }, ,     /**,      * Sets the id from a String.,      * @param id The String id.,      */,     protected void setId(final String id) {,         this.id = new StructuredDataId(id, null, null);,     }, ,     /**,      * Sets the id.,      * @param id The StructuredDataId.,      */,     protected void setId(final StructuredDataId id) {,         this.id = id;,     }, ,     /**,      * Sets the type.,      * @return the type.,      */,     public String getType() {,         return type;,     }, ,     protected void setType(final String type) {,         if (type.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("structured data type exceeds maximum length of 32 characters: " + type);,         },         this.type = type;,     }, ,     /**,      * Returns the message.,      * @return the message.,      */,     @Override,     public String getFormat() {,         return message;,     }, ,     protected void setMessageFormat(final String msg) {,         this.message = msg;,     }, , ,     @Override,     protected void validate(final String key, final String value) {,         validateKey(key);,     }, ,     private void validateKey(final String key) {,         if (key.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("Structured data keys are limited to 32 characters. key: " + key);,         },         final char[] chars = key.toCharArray();,         for (final char c : chars) {,             if (c < '!' || c > '~' || c == '=' || c == ']' || c == '"') {,                 throw new IllegalArgumentException("Structured data keys must contain printable US ASCII characters" +,                         "and may not contain a space, =, ], or \"");,             },         },     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @return The formatted String.,      */,     @Override,     public String asString() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @param format The format identifier. Ignored in this implementation.,      * @return The formatted String.,      */, ,     @Override,     public String asString(final String format) {,         try {,             return asString(EnglishEnums.valueOf(Format.class, format), null);,         } catch (final IllegalArgumentException ex) {,             return asString();,         },     }, ,     /**,      * Formats the structured data as described in RFC 5424.,      *,      * @param format           "full" will include the type and message. null will return only the STRUCTURED-DATA as,      *                         described in RFC 5424,      * @param structuredDataId The SD-ID as described in RFC 5424. If null the value in the StructuredData,      *                         will be used.,      * @return The formatted String.,      */,     public final String asString(final Format format, final StructuredDataId structuredDataId) {,         final StringBuilder sb = new StringBuilder();,         final boolean full = Format.FULL.equals(format);,         if (full) {,             final String type = getType();,             if (type == null) {,                 return sb.toString();,             },             sb.append(getType()).append(" ");,         },         StructuredDataId id = getId();,         if (id != null) {,             id = id.makeId(structuredDataId);,         } else {,             id = structuredDataId;,         },         if (id == null || id.getName() == null) {,             return sb.toString();,         },         sb.append("[");,         sb.append(id);,         sb.append(" ");,         appendMap(sb);,         sb.append("]");,         if (full) {,             final String msg = getFormat();,             if (msg != null) {,                 sb.append(" ").append(msg);,             },         },         return sb.toString();,     }, ,     /**,      * Formats the message and return it.,      * @return the formatted message.,      */,     @Override,     public String getFormattedMessage() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Formats the message according the the specified format.],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/ThreadDumpMessage.java,getParameters,113-113,[     * and the StackTraceElement array as the value;],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,testMessageWithLocks,53-53,[            try {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,72-80,[        final ThreadDumpMessage msg = new ThreadDumpMessage("Test");,         final String expected = "ThreadDumpMessage[Title=\"Test\"]";,         assertEquals(expected, msg.toString());,     }, ,     private class Thread1 extends Thread {,         private final ReentrantLock lock;, ,         public Thread1(final ReentrantLock lock) {],,
MT_CORRECTNESS,ESync_EMPTY_SYNC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,94-94,[        public Thread2(final Object obj) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,86-95,[            lock.lock();,             lock.unlock();,         },     }, ,     private class Thread2 extends Thread {,         private final Object obj;, ,         public Thread2(final Object obj) {,             this.obj = obj;],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,95-95,[            this.obj = obj;],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/logging/log4j/osgi/AbstractLoadBundleTest.java,afterClass,51-53,[        if (OsgiFramework != null) {,             OsgiFramework.stop();,             OsgiFramework = null;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/osgi/BundleTestInfo.java,<init>,44-44,[            fileReader = new FileReader(fileName);],,
CORRECTNESS,UR_UNINIT_READ,org/apache/logging/log4j/samples/app/LoggingApp.java,<init>,65-65,[        if (events == null) {],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/samples/app/LoggingApp.java,run,107-107,[                    Thread.sleep(rand * 1000);],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingApp.java,run,114-114,[                    final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingController.java,run,110-110,[                            final int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/samples/app/MockEventsSupplier.java,,33-33,[    static Random ran = new Random();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,lowerFirst,38-38,[        return String.valueOf(name.charAt(0)).toLowerCase() + name.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,methodCaseName,73-73,[        return variable.substring(0, 1).toUpperCase() + variable.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,upperFirst,34-34,[        return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,log,150-150,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,log,149-149,[            t.printStackTrace(new PrintStream(baos));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLoggerContext.java,<init>,91-91,[                ps = new PrintStream(os);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/simple/SimpleLoggerContext.java,,45-45,[    private final Properties simpleLogProps = new Properties();],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/apache/logging/log4j/spi/AbstractLoggerWrapper.java,,44-44,[    }],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,120-120,[        return sb.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,119-119,[        }],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/logging/log4j/status/StatusLogger.java,add,261-261,[                return logger.isInfoEnabled(marker);],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/status/StatusLogger.java,,255-263,[                return logger.isFatalEnabled(marker);,             case TRACE:,                 return logger.isTraceEnabled(marker);,             case DEBUG:,                 return logger.isDebugEnabled(marker);,             case INFO:,                 return logger.isInfoEnabled(marker);,             case WARN:,                 return logger.isWarnEnabled(marker);],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/status/StatusLogger.java,,255-263,[                return logger.isFatalEnabled(marker);,             case TRACE:,                 return logger.isTraceEnabled(marker);,             case DEBUG:,                 return logger.isDebugEnabled(marker);,             case INFO:,                 return logger.isInfoEnabled(marker);,             case WARN:,                 return logger.isWarnEnabled(marker);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/CatchingTagTest.java,setUpClass,52-52,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/EntryTagTest.java,setUpClass,51-51,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,testException,39-39,[        assertNull("The exception should be null (1).", this.tag.getException());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/ExceptionAwareTagSupportTest.java,,32-32,[        this.tag = new ExceptionAwareTagSupport() {],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/ExitTagTest.java,setUpClass,51-51,[        context.getConfiguration();],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/IfEnabledTagTest.java,setUpClass,46-46,[        context.getConfiguration();],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/taglib/LogTagTest.java,testLevel,39-39,[        assertNull("The level should be null (1).", this.tag.getLevel());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,35-38,[        this.context = new MockPageContext() {,             @Override,             public Object getPage() {,                 return page == null ? this : page;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,41-41,[        this.tag = new LoggerAwareTagSupport() {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,111-111,[        final Object page = new Object() {};],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggerAwareTagSupportTest.java,,132-132,[        final Object page = new Object() {};],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,setUpClass,56-56,[        context.getConfiguration();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/taglib/LoggingMessageTagSupportTest.java,,71-76,[        this.tag = new LoggingMessageTagSupport() {,             private static final long serialVersionUID = 1L;, ,             @Override,             protected Level getLevel() {,                 return level;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/test/appender/ListAppender.java,write,94-94,[        final String str = new String(bytes);],,
STYLE,RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT,org/apache/logging/slf4j/OptionalTest.java,setupClass,55-55,[        ctx.getConfiguration();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/slf4j/SLF4JLogger.java,log,73-74,[                    logger.error(getMarker(marker), data.getFormattedMessage(), data.getParameters(), t);,                     break;],,log,76-76,[                    logger.error(getMarker(marker), data.getFormattedMessage(), data.getParameters(), t);],,
STYLE,REC_CATCH_EXCEPTION,org/slf4j/helpers/EventDataConverter.java,convertEvent,46-46,[        } catch (final Exception ex) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/slf4j/impl/StaticLoggerBinder.java,,33-33,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/slf4j/impl/StaticLoggerBinder.java,,33-33,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
