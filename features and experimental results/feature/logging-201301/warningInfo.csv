STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/BasicConfigurationFactory.java,<init>,54-54,[            final Level level = (levelName != null && Level.valueOf(levelName) != null) ? Level.valueOf(levelName) : Level.DEBUG;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/log4j/BasicConfigurationFactory.java,,50-60,[        public BasicConfiguration() {,             final LoggerConfig root = getRootLogger();,             setName("BasicConfiguration");,             final String levelName = System.getProperty(DEFAULT_LEVEL);,             final Level level = (levelName != null && Level.valueOf(levelName) != null) ? Level.valueOf(levelName) : Level.DEBUG;,             root.setLevel(level);,         }, ,         @Override,         protected void doConfigure() {,         }],,
I18N,DM_CONVERT_CASE,org/apache/log4j/Level.java,toLevel,176-176,[        final String s = sArg.toUpperCase();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/log4j/Level.java,readObject,223-223,[        if (levelStr == null) {],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testALL,208-208,[        assertTrue(Level.ALL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testDEBUG,192-192,[        assertTrue(Level.DEBUG instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testERROR,168-168,[        assertTrue(Level.ERROR instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testFATAL,160-160,[        assertTrue(Level.FATAL instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testINFO,184-184,[        assertTrue(Level.INFO instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testOFF,152-152,[        assertTrue(Level.OFF instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testTRACE,200-200,[        assertTrue(Level.TRACE instanceof Level);],,
STYLE,BC_VACUOUS_INSTANCEOF,org/apache/log4j/LevelTest.java,testWARN,176-176,[        assertTrue(Level.WARN instanceof Level);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testDEBUG,192-193,[        assertTrue(Level.DEBUG instanceof Level);,     }],,testDebug,117-155,[        currentLevel = Level.DEBUG;, ,         currentEvent = events[0];,         debug("Hello");,         debug(null, "Hello");,         currentEvent = events[1];,         debug(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         debug("Hello", t);,         debug(null, "Hello", t);,         currentEvent = events[3];,         debug(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         debug(obj);,         currentEvent = events[5];,         debug(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         debug(obj, t);,         debug(null, obj, t);,         currentEvent = events[7];,         debug(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         debug(pattern, p1, p2);,         currentEvent = events[9];,         debug(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         debug(simple);,         debug(null, simple);,         debug(null, simple, null);,         currentEvent = events[11];,         debug(simple, t);,         debug(null, simple, t);,         currentEvent = events[12];,         debug(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         debug(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         debug(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testERROR,168-169,[        assertTrue(Level.ERROR instanceof Level);,     }],,testError,243-281,[        currentLevel = Level.ERROR;, ,         currentEvent = events[0];,         error("Hello");,         error(null, "Hello");,         currentEvent = events[1];,         error(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         error("Hello", t);,         error(null, "Hello", t);,         currentEvent = events[3];,         error(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         error(obj);,         currentEvent = events[5];,         error(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         error(obj, t);,         error(null, obj, t);,         currentEvent = events[7];,         error(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         error(pattern, p1, p2);,         currentEvent = events[9];,         error(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         error(simple);,         error(null, simple);,         error(null, simple, null);,         currentEvent = events[11];,         error(simple, t);,         error(null, simple, t);,         currentEvent = events[12];,         error(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         error(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         error(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testFATAL,160-161,[        assertTrue(Level.FATAL instanceof Level);,     }],,testFatal,98-99,[        assertTrue(Priority.FATAL instanceof Level);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testINFO,184-185,[        assertTrue(Level.INFO instanceof Level);,     }],,testInfo,159-197,[        currentLevel = Level.INFO;, ,         currentEvent = events[0];,         info("Hello");,         info(null, "Hello");,         currentEvent = events[1];,         info(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         info("Hello", t);,         info(null, "Hello", t);,         currentEvent = events[3];,         info(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         info(obj);,         currentEvent = events[5];,         info(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         info(obj, t);,         info(null, obj, t);,         currentEvent = events[7];,         info(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         info(pattern, p1, p2);,         currentEvent = events[9];,         info(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         info(simple);,         info(null, simple);,         info(null, simple, null);,         currentEvent = events[11];,         info(simple, t);,         info(null, simple, t);,         currentEvent = events[12];,         info(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         info(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         info(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testTRACE,200-201,[        assertTrue(Level.TRACE instanceof Level);,     }],,testTrace,394-414,[        final ListAppender appender = new ListAppender("List");,         appender.start();,         final Logger root = Logger.getRootLogger();,         root.getLogger().addAppender(appender);,         root.setLevel(Level.INFO);, ,         final Logger tracer = Logger.getLogger("com.example.Tracer");,         tracer.setLevel(Level.TRACE);, ,         tracer.trace("Message 1");,         root.trace("Discarded Message");,         root.trace("Discarded Message");, ,         final List<LogEvent> msgs = appender.getEvents();,         assertEquals(1, msgs.size());,         final LogEvent event = (LogEvent) msgs.get(0);,         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());,         assertEquals("Message 1", event.getMessage().getFormat());,         appender.stop();,         root.getLogger().removeAppender(appender);,     }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LevelTest.java,testWARN,176-177,[        assertTrue(Level.WARN instanceof Level);,     }],,testWarn,201-239,[        currentLevel = Level.WARN;, ,         currentEvent = events[0];,         warn("Hello");,         warn(null, "Hello");,         currentEvent = events[1];,         warn(MarkerManager.getMarker("TEST"), "Hello");,         currentEvent = events[2];,         warn("Hello", t);,         warn(null, "Hello", t);,         currentEvent = events[3];,         warn(MarkerManager.getMarker("TEST"), "Hello", t);,         currentEvent = events[4];,         warn(obj);,         currentEvent = events[5];,         warn(MarkerManager.getMarker("TEST"), obj);,         currentEvent = events[6];,         warn(obj, t);,         warn(null, obj, t);,         currentEvent = events[7];,         warn(MarkerManager.getMarker("TEST"), obj, t);,         currentEvent = events[8];,         warn(pattern, p1, p2);,         currentEvent = events[9];,         warn(MarkerManager.getMarker("TEST"), pattern, p1, p2);,         currentEvent = events[10];,         warn(simple);,         warn(null, simple);,         warn(null, simple, null);,         currentEvent = events[11];,         warn(simple, t);,         warn(null, simple, t);,         currentEvent = events[12];,         warn(MarkerManager.getMarker("TEST"), simple, null);,         currentEvent = events[13];,         warn(MarkerManager.getMarker("TEST"), simple, t);,         currentEvent = events[14];,         warn(MarkerManager.getMarker("TEST"), simple);,     }],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/log4j/LevelTest.java,,98-100,[            super(,                 Level.INFO.level, Level.INFO.levelStr, Level.INFO.syslogEquivalent);,         }],,
BAD_PRACTICE,NM_CONFUSING,org/apache/log4j/LoggerTest.java,tearDown,83-87,[        final LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();,         ctx.reconfigure();,         a1 = null;,         a2 = null;,     }],,teardown,67-68,[        deleteFile();,     }],,
BAD_PRACTICE,HE_EQUALS_USE_HASHCODE,org/apache/log4j/Priority.java,equals,130-134,[        if (o instanceof Priority) {,             final Priority r = (Priority) o;,             return this.level == r.level;,         } else {,             return false;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,118-118,[            final FileInputStream is = new FileInputStream(witnessFile);],,assertStreamEquals,119-119,[            final int bytesRead = is.read(expected);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/log4j/util/SerializationTestHelper.java,assertStreamEquals,146-146,[            final FileOutputStream os = new FileOutputStream(witnessFile);],,assertStreamEquals,147-147,[            os.write(actual);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/log4j/util/SerializationTestHelper.java,deserializeStream,75-75,[        final ObjectInputStream objIs = new ObjectInputStream(fileIs);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,105-105,[                BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,106-106,[                PrintWriter out = new PrintWriter(socket.getOutputStream());],,
MT_CORRECTNESS,NN_NAKED_NOTIFY,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,87-87,[                    notifyAll();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,98-98,[                    if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,run,120-120,[        } catch (Exception e) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,stop,152-152,[            serverSocket.close();],,
MT_CORRECTNESS,UW_UNCOND_WAIT,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,268-268,[                server.wait();],,
MT_CORRECTNESS,WA_NOT_IN_LOOP,org/apache/logging/dumbster/smtp/SimpleSmtpServer.java,start,268-268,[                server.wait();],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/dumbster/smtp/SmtpMessage.java,toString,142-142,[            List values = (List) headers.get(name);],,
I18N,DM_CONVERT_CASE,org/apache/logging/dumbster/smtp/SmtpRequest.java,createRequest,189-189,[            String su = s.toUpperCase();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testDebug,117-117,[        currentLevel = Level.DEBUG;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testError,243-243,[        currentLevel = Level.ERROR;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testFatal,285-285,[        currentLevel = Level.FATAL;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testInfo,159-159,[        currentLevel = Level.INFO;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testTrace,75-75,[        currentLevel = Level.TRACE;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/AbstractLoggerTest.java,testWarn,201-201,[        currentLevel = Level.WARN;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getByteBuffer,258-258,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,getBytes,264-264,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,135-135,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j,182-182,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2,210-210,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2Debug,219-219,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4j2IsDebug,171-171,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,log4jIsDebug,152-152,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logback,191-191,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackDebug,200-200,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,logbackIsDebug,161-161,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToChannel,247-247,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToStream,238-238,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,writeToWriter,229-229,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,129-129,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,130-130,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/DebugDisabledPerformanceComparison.java,testRawPerformance,135-135,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,136-136,[        final long result3 = writeToWriter(COUNT, w);],,
BAD_PRACTICE,NM_CONFUSING,org/apache/logging/log4j/EventLoggerTest.java,setup,39-40,[        results.clear();,     }],,setUp,87-117,[        eventSource = new AvroSource();,         channel = new MemoryChannel();, ,         Configurables.configure(channel, new Context());, ,         avroLogger = (Logger) LogManager.getLogger("avrologger");,         /*,         * Clear out all other appenders associated with this logger to ensure we're,         * only hitting the Avro appender.,         */,         removeAppenders(avroLogger);,         final Context context = new Context();,         testPort = String.valueOf(testServerPort);,         context.put("port", testPort);,         context.put("bind", "0.0.0.0");,         Configurables.configure(eventSource, context);, ,         final List<Channel> channels = new ArrayList<Channel>();,         channels.add(channel);, ,         final ChannelSelector cs = new ReplicatingChannelSelector();,         cs.setChannels(channels);, ,         eventSource.setChannelProcessor(new ChannelProcessor(cs));, ,         eventSource.start();, ,     	  Assert.assertTrue("Reached start or error", LifecycleController.waitForOneOf(,             eventSource, LifecycleState.START_OR_ERROR));,         Assert.assertEquals("Server is started", LifecycleState.START, eventSource.getLifecycleState());,     }],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,log4j2,123-123,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/FilterPerformanceComparison.java,logback,113-113,[        final Integer j = new Integer(2);],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/FormatterLoggerManualExample.java,,21-21,[    public static Logger logger = LogManager.getFormatterLogger("Foo");],,
PERFORMANCE,BX_UNBOXING_IMMEDIATELY_REBOXED,org/apache/logging/log4j/LogManager.java,<clinit>,104-104,[                    final Integer priority = weight == null ? -1 : Integer.valueOf(weight);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/LogManager.java,<clinit>,104-104,[                    final Integer priority = weight == null ? -1 : Integer.valueOf(weight);],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/LoggerTest.java,mdc,313-313,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/LoggerTest.java,mdc,313-313,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getByteBuffer,184-184,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,getBytes,190-190,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,110-110,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j,126-126,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,log4j2,145-145,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,logback,135-135,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToChannel,173-173,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToStream,164-164,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceComparison.java,writeToWriter,155-155,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,104-104,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,105-105,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceComparison.java,testRawPerformance,110-110,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,111-111,[        final long result3 = writeToWriter(COUNT, w);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getByteBuffer,131-131,[        buf.put(s.getBytes());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,getBytes,137-137,[        return s.getBytes();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,76-76,[        final Writer w = new FileWriter("target/testwriter.log", true);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToChannel,120-120,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToStream,111-111,[        final Integer j = new Integer(2);],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/PerformanceRun.java,writeToWriter,102-102,[        final Integer j = new Integer(2);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,70-70,[        final OutputStream os = new FileOutputStream("target/testos.log", true);],,testRawPerformance,71-71,[        final long result1 = writeToStream(COUNT, os);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/PerformanceRun.java,testRawPerformance,76-76,[        final Writer w = new FileWriter("target/testwriter.log", true);],,testRawPerformance,77-77,[        final long result3 = writeToWriter(COUNT, w);],,
STYLE,UC_USELESS_OBJECT,org/apache/logging/log4j/ReflectionComparison.java,createObjects,96-96,[            msg = new StringFormattedMessage("Hello %1", i);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,log,76-76,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/TestLogger.java,log,75-75,[            t.printStackTrace(new PrintStream(baos));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/ThreadContextTest.java,,60-73,[        public TestThread(StringBuilder sb) {,             this.sb = sb;,         }, ,         @Override,         public void run() {,             String greeting = ThreadContext.get("Greeting");,             if (greeting == null) {,                 sb.append("null");,             } else {,                 sb.append(greeting);,             },             ThreadContext.clear();,         }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/BasicConfigurationFactory.java,getSupportedTypes,38-38,[        return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/BasicConfigurationFactory.java,<init>,54-54,[            final Level level = (l != null && Level.valueOf(l) != null) ? Level.valueOf(l) : Level.ERROR;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/BasicConfigurationFactory.java,,50-56,[        public BasicConfiguration() {, ,             final LoggerConfig root = getRootLogger();,             final String l = System.getProperty(DEFAULT_LEVEL);,             final Level level = (l != null && Level.valueOf(l) != null) ? Level.valueOf(l) : Level.ERROR;,             root.setLevel(level);,         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/FileConfigTest.java,testReconfiguration,78-78,[        file.setLastModified(newTime);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/FileConfigTest.java,before,65-65,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/FileConfigTest.java,before,62-62,[        config = ctx.getConfiguration();],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/Logger.java,getLevel,99-99,[        return config.level;],,setLevel,89-92,[        if (level != null) {,             config = new PrivateConfig(config, level);,         },     }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS,org/apache/logging/log4j/core/Logger.java,,236-334,[    protected class PrivateConfig {,         private final LoggerConfig loggerConfig;,         private final Configuration config;,         private final Level level;,         private final int intLevel;,         private final Logger logger;, ,         public PrivateConfig(final Configuration config, final Logger logger) {,             this.config = config;,             this.loggerConfig = config.getLoggerConfig(getName());,             this.level = this.loggerConfig.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final Level level) {,             this.config = pc.config;,             this.loggerConfig = pc.loggerConfig;,             this.level = level;,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         public PrivateConfig(final PrivateConfig pc, final LoggerConfig lc) {,             this.config = pc.config;,             this.loggerConfig = lc;,             this.level = lc.getLevel();,             this.intLevel = this.level.intLevel();,             this.logger = pc.logger;,         }, ,         protected void logEvent(final LogEvent event) {,             config.getConfigurationMonitor().checkConfiguration();,             loggerConfig.log(event);,         }, ,         boolean filter(final Level level, final Marker marker, final String msg) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final String msg, final Object... p1) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, p1);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Object msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();,         }, ,         boolean filter(final Level level, final Marker marker, final Message msg, final Throwable t) {,             config.getConfigurationMonitor().checkConfiguration();,             final Filter filter = config.getFilter();,             if (filter != null) {,                 final Filter.Result r = filter.filter(logger, level, marker, msg, t);,                 if (r != Filter.Result.NEUTRAL) {,                     return r == Filter.Result.ACCEPT;,                 },             }, ,             return intLevel >= level.intLevel();],,
BAD_PRACTICE,NM_SAME_SIMPLE_NAME_AS_INTERFACE,org/apache/logging/log4j/core/LoggerContext.java,,44-330,[public class LoggerContext implements org.apache.logging.log4j.spi.LoggerContext, ConfigurationListener, LifeCycle {, ,     private static final StatusLogger logger = StatusLogger.getLogger();, ,     private final ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();, ,     /**,      * The Configuration is volatile to guarantee that initialization of the Configuration has completed before,      * the reference is updated.,      */,     private volatile Configuration config = new DefaultConfiguration();, ,     private Object externalContext;, ,     private final String name;, ,     private final URI configLocation;, ,     /**,      * Status of the LoggerContext.,      */,     public enum Status {,         /** Initialized but not yet started. */,         INITIALIZED,,         /** In the process of starting. */,         STARTING,,         /** Is active. */,         STARTED,,         /** Shutdown is in progress. */,         STOPPING,,         /** Has shutdown. */,         STOPPED,     }, ,     private volatile Status status = Status.INITIALIZED;, ,     private final Lock configLock = new ReentrantLock();, ,     /**,      * Constructor taking only a name.,      * @param name The context name.,      */,     public LoggerContext(final String name) {,         this(name, null, (URI) null);,     }, ,     /**,      * Constructor taking a name and a reference to an external context.,      * @param name The context name.,      * @param externalContext The external context.,      */,     public LoggerContext(final String name, final Object externalContext) {,         this(name, externalContext, (URI) null);,     }, ,     /**,      * Constructor taking a name, external context and a configuration URI.,      * @param name The context name.,      * @param externalContext The external context.,      * @param configLocn The location of the configuration as a URI.,      */,     public LoggerContext(final String name, final Object externalContext, final URI configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         this.configLocation = configLocn;,     }, ,     /**,      * Constructor taking a name external context and a configuration location String. The location,      * must be resolvable to a File.,      * @param name The configuration location.,      * @param externalContext The external context.,      * @param configLocn The configuration location.,      */,     public LoggerContext(final String name, final Object externalContext, final String configLocn) {,         this.name = name;,         this.externalContext = externalContext;,         if (configLocn != null) {,             URI uri;,             try {,                 uri = new File(configLocn).toURI();,             } catch (final Exception ex) {,                 uri = null;,             },             configLocation = uri;,         } else {,             configLocation = null;,         },     }, ,     public void start() {,         if (configLock.tryLock()) {,             try {,                 if (status == Status.INITIALIZED) {,                     status = Status.STARTING;,                     reconfigure();,                     status = Status.STARTED;,                 },             } finally {,                 configLock.unlock();,             },         },     }, ,     public void stop() {,         configLock.lock();,         try {,             status = Status.STOPPING;,             updateLoggers(new NullConfiguration());,             config.stop();,             externalContext = null;,             status = Status.STOPPED;,         } finally {,             configLock.unlock();,         },     }, ,     /**,      * Gets the name.,      *,      * @return the name.,      */,     public String getName() {,         return name;,     }, ,     public Status getStatus() {,         return status;,     }, ,     public boolean isStarted() {,         return status == Status.STARTED;,     }, ,     /**,      * Set the external context.,      * @param context The external context.,      */,     public void setExternalContext(final Object context) {,         this.externalContext = context;,     }, ,     /**,      * Returns the external context.,      * @return The external context.,      */,     public Object getExternalContext() {,         return this.externalContext;,     }, ,     /**,      * Obtain a Logger from the Context.,      * @param name The name of the Logger to return.,      * @return The Logger.,      */,     public Logger getLogger(final String name) {,         return getLogger(name, null);,     }, ,     /**,      * Obtain a Logger from the Context.,      * @param name The name of the Logger to return.,      * @param messageFactory The message factory is used only when creating a logger, subsequent use does not change the logger but will log a warning if mismatched.,      * @return The Logger.,      */,     public Logger getLogger(final String name, final MessageFactory messageFactory) {,         Logger logger = loggers.get(name);,         if (logger != null) {,             AbstractLogger.checkMessageFactory(logger, messageFactory);,             return logger;,         }, ,         logger = newInstance(this, name, messageFactory);,         final Logger prev = loggers.putIfAbsent(name, logger);,         return prev == null ? logger : prev;,     }, ,     /**,      * Determine if the specified Logger exists.,      * @param name The Logger name to search for.,      * @return True if the Logger exists, false otherwise.,      */,     public boolean hasLogger(final String name) {,         return loggers.containsKey(name);,     }, ,     /**,      * Returns the current Configuration. The Configuration will be replaced when a reconfigure occurs.,      * @return The Configuration.,      */,     public Configuration getConfiguration() {,         return config;,     }, ,     /**,      * Add a Filter to the Configuration. Filters that are added through the API will be lost,      * when a reconfigure occurs.,      * @param filter The Filter to add.,      */,     public void addFilter(final Filter filter) {,         config.addFilter(filter);,     }, ,     /**,      * Removes a Filter from the current Configuration.,      * @param filter The Filter to remove.,      */,     public void removeFiler(final Filter filter) {,         config.removeFilter(filter);,     }, ,     /**,      * Set the Configuration to be used.,      * @param config The new Configuration.,      * @return The previous Configuration.,      */,     public synchronized Configuration setConfiguration(final Configuration config) {,         if (config == null) {,             throw new NullPointerException("No Configuration was provided");,         },         final Configuration prev = this.config;,         config.addListener(this);,         Map<String, String> map = new HashMap<String, String>();,         map.put("hostName", NetUtils.getLocalHostname());,         map.put("contextName", name);,         config.addComponent(Configuration.CONTEXT_PROPERTIES, map);,         config.start();,         this.config = config;,         updateLoggers();,         if (prev != null) {,             prev.removeListener(this);,             prev.stop();,         },         return prev;,     }, ,     /**,      *  Reconfigure the context.,      */,     public synchronized void reconfigure() {,         logger.debug("Reconfiguration started for context " + name);,         final Configuration instance = ConfigurationFactory.getInstance().getConfiguration(name, configLocation);,         setConfiguration(instance);,         /*instance.start();,         Configuration old = setConfiguration(instance);,         updateLoggers();,         if (old != null) {,             old.stop();,         } */,         logger.debug("Reconfiguration completed");,     }, ,     /**,      * Cause all Loggers to be updated against the current Configuration.,      */,     public void updateLoggers() {,         updateLoggers(this.config);,     }, ,     /**,      * Cause all Logger to be updated against the specified Configuration.,      * @param config The Configuration.,      */,     public void updateLoggers(final Configuration config) {,         for (final Logger logger : loggers.values()) {,             logger.updateConfiguration(config);,         },     }, ,     /**,      * Cause a reconfiguration to take place when the underlying configuration file changes.,      * @param reconfigurable The Configuration that can be reconfigured.,      */,     public synchronized void onChange(final Reconfigurable reconfigurable) {,         logger.debug("Reconfiguration started for context " + name);,         final Configuration config = reconfigurable.reconfigure();,         if (config != null) {,             setConfiguration(config);,             logger.debug("Reconfiguration completed");,         } else {,             logger.debug("Reconfiguration failed");,         },     }, , ,     private Logger newInstance(final LoggerContext ctx, final String name, final MessageFactory messageFactory) {,         return new Logger(ctx, name, messageFactory);],,
MT_CORRECTNESS,UG_SYNC_SET_UNSYNC_GET,org/apache/logging/log4j/core/LoggerContext.java,getConfiguration,235-235,[        return config;],,setConfiguration,261-277,[        if (config == null) {,             throw new NullPointerException("No Configuration was provided");,         },         final Configuration prev = this.config;,         config.addListener(this);,         Map<String, String> map = new HashMap<String, String>();,         map.put("hostName", NetUtils.getLocalHostname());,         map.put("contextName", name);,         config.addComponent(Configuration.CONTEXT_PROPERTIES, map);,         config.start();,         this.config = config;,         updateLoggers();,         if (prev != null) {,             prev.removeListener(this);,             prev.stop();,         },         return prev;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/core/LoggerTest.java,mdc,219-219,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/LoggerTest.java,mdc,219-219,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/LoggerTest.java,testReconfiguration,249-249,[        file.setLastModified(newTime);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,77-77,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,74-74,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,79-79,[                host = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/LoggerTest.java,before,81-81,[                noThrown = (ListAppender) entry.getValue();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabled,69-69,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugDisabledByLevel,82-82,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,debugLogger,95-95,[        System.gc();],,
PERFORMANCE,DM_GC,org/apache/logging/log4j/core/SimplePerfTest.java,setupClass,55-55,[        System.gc();],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/core/SimplePerfTest.java,,132-140,[    private static class SimpleRandom extends Random {,         private int low = 5;,         private int high = 55;, ,         @Override,         public int nextInt() {,             high = 36969 * (high & 65535) + (high >> 16);,             low = 18000 * (low & 65535) + (low >> 16);,             return (high << 16) + low;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_TOSTRING,org/apache/logging/log4j/core/StrictXMLConfigTest.java,mdc,135-135,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
PERFORMANCE,DM_NUMBER_CTOR,org/apache/logging/log4j/core/StrictXMLConfigTest.java,mdc,135-135,[        ThreadContext.put("TestYear", new Integer(2010).toString());],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedPerfTest.java,,64-69,[    public class DebugDisabledRunnable implements Runnable {,         public void run() {,             for (int i=0; i < LOOP_CNT; ++i) {,                 logger.isDebugEnabled();,             },         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedPerfTest.java,,72-77,[     public class DebugLoggerRunnable implements Runnable {,         public void run() {,             for (int i=0; i < LOOP_CNT; ++i) {,                 logger.debug("This is a test");,             },         }],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,105-105,[            for (final File file : files) {],,deleteDir,104-104,[            final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/ThreadedTest.java,deleteDir,106-106,[                file.delete();],,deleteDir,108-108,[            dir.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/ThreadedTest.java,,90-98,[        public StateSettingRunnable(final State state) {,             this.state = state;,         },         public void run() {,             for (int i=0; i < LOOP_CNT*4; ++i) {,                 Thread.yield();,                 state.setState();,             },         }],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/core/Timer.java,,32-252,[    private static long NANO_PER_SECOND = 1000000000L;,     private static long NANO_PER_MINUTE = NANO_PER_SECOND * 60;,     private static long NANO_PER_HOUR = NANO_PER_MINUTE * 60;, , ,     /**,      * Constructor.,      * @param name the timer name.,      */,     public Timer(final String name),     {,         this(name, 0);,     }, ,     /**,      * Constructor.,      *,      * @param name the timer name.,      */,     public Timer(final String name, final int iterations),     {,         m_name = name;,         m_startTime = 0;,         m_status = "Stopped";,         m_iterations = (iterations > 0) ? iterations : 0;,     }, ,     /**,      * Start the timer.,      */,     public void start(),     {,         m_startTime = System.nanoTime();,         m_elapsedTime = 0;,         m_status = "Start";,     }, ,     /**,      * Stop the timer.,      */,     public void stop(),     {,         m_elapsedTime += System.nanoTime() - m_startTime;,         m_startTime = 0;,         m_status = "Stop";,     }, ,     /**,      * Pause the timer.,      */,     public void pause(),     {,         m_elapsedTime += System.nanoTime() - m_startTime;,         m_startTime = 0;,         m_status = "Pause";,     }, ,     /**,      * Resume the timer.,      */,     public void resume(),     {,         m_startTime = System.nanoTime();,         m_status = "Resume";,     }, ,     /**,      * Accessor for the name.,      * @return the timer's name.,      */,     public String getName(),     {,         return m_name;,     }, ,     /**,      * Access the elapsed time.,      *,      * @return the elapsed time.,      */,     public long getElapsedTime(),     {,         return m_elapsedTime / 1000000;,     }, ,     /**,      * Access the elapsed time.,      *,      * @return the elapsed time.,      */,     public long getElapsedNanoTime(),     {,         return m_elapsedTime;,     }, ,     /**,      * Returns the name of the last operation performed on this timer (Start, Stop, Pause or,      * Resume).,      * @return the string representing the last operation performed.,      */,     public String getStatus(),     {,         return m_status;,     }, ,     /**,      * Returns the String representation of the timer based upon its current state,      */,     @Override,     public String toString(),     {,         final StringBuilder result = new StringBuilder("Timer ").append(m_name);,         if (m_status.equals("Start")),         {,             result.append(" started");,         },         else if (m_status.equals("Pause")),         {,             result.append(" paused");,         },         else if (m_status.equals("Resume")),         {,             result.append(" resumed");,         },         else if (m_status.equals("Stop")),         {,             long nanoseconds = m_elapsedTime;,             // Get elapsed hours,             long hours = nanoseconds / NANO_PER_HOUR;,             // Get remaining nanoseconds,             nanoseconds = nanoseconds % NANO_PER_HOUR;,             // Get minutes,             long minutes = nanoseconds / NANO_PER_MINUTE;,             // Get remaining nanoseconds,             nanoseconds = nanoseconds % NANO_PER_MINUTE;,             // Get seconds,             long seconds = nanoseconds / NANO_PER_SECOND;,             // Get remaining nanoseconds,             nanoseconds = nanoseconds % NANO_PER_SECOND;, ,             String elapsed = "";, ,             if (hours > 0),             {,                 elapsed += hours + " hours ";,             },             if (minutes > 0 || hours > 0),             {,                 elapsed += minutes + " minutes ";,             }, ,             DecimalFormat numFormat = null;,             numFormat = new DecimalFormat("#0");,             elapsed += numFormat.format(seconds) + '.';,             numFormat = new DecimalFormat("000000000");,             elapsed += numFormat.format(nanoseconds) + " seconds";,             result.append(" stopped. Elapsed time: ").append(elapsed);,             if (m_iterations > 0),             {,                 nanoseconds = m_elapsedTime / m_iterations;,                 // Get elapsed hours,                 hours = nanoseconds / NANO_PER_HOUR;,                 // Get remaining nanoseconds,                 nanoseconds = nanoseconds % NANO_PER_HOUR;,                 // Get minutes,                 minutes = nanoseconds / NANO_PER_MINUTE;,                 // Get remaining nanoseconds,                 nanoseconds = nanoseconds % NANO_PER_MINUTE;,                 // Get seconds,                 seconds = nanoseconds / NANO_PER_SECOND;,                 // Get remaining nanoseconds,                 nanoseconds = nanoseconds % NANO_PER_SECOND;, ,                 elapsed = "";, ,                 if (hours > 0),                 {,                     elapsed += hours + " hours ";,                 },                 if (minutes > 0 || hours > 0),                 {,                     elapsed += minutes + " minutes ";,                 }, ,                 numFormat = new DecimalFormat("#0");,                 elapsed += numFormat.format(seconds) + '.';,                 numFormat = new DecimalFormat("000000000");,                 elapsed += numFormat.format(nanoseconds) + " seconds";,                 result.append(" Average per iteration: ").append(elapsed);,             },         },         else,         {,             result.append(" ").append(m_status);,         },         return result.toString();,     }, ,     @Override,     public boolean equals(final Object o) {,         if (this == o) return true;,         if (!(o instanceof Timer)) return false;, ,         final Timer timer = (Timer) o;, ,         if (m_elapsedTime != timer.m_elapsedTime) return false;,         if (m_startTime != timer.m_startTime) return false;,         if (m_name != null ? !m_name.equals(timer.m_name) : timer.m_name != null) return false;,         if (m_status != null ? !m_status.equals(timer.m_status) : timer.m_status != null) return false;, ,         return true;,     }, ,     @Override,     public int hashCode() {,         int result;,         result = (m_name != null ? m_name.hashCode() : 0);,         result = 29 * result + (m_status != null ? m_status.hashCode() : 0);,         result = 29 * result + (int) (m_startTime ^ (m_startTime >>> 32));,         result = 29 * result + (int) (m_elapsedTime ^ (m_elapsedTime >>> 32));,         return result;],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/XMLEvents.java,,59-65,[        public TransferMessage() {,             super("Transfer@18060", null, "Audit");,         }, ,         public void setCompletionStatus(final String msg) {,             setMessageFormat(msg);,         }],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/core/XMLEvents.java,,59-65,[        public TransferMessage() {,             super("Transfer@18060", null, "Audit");,         }, ,         public void setCompletionStatus(final String msg) {,             setMessageFormat(msg);,         }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/XMLEvents.java,,59-65,[        public TransferMessage() {,             super("Transfer@18060", null, "Audit");,         }, ,         public void setCompletionStatus(final String msg) {,             setMessageFormat(msg);,         }],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/appender/AsynchAppender.java,run,209-209,[                    } catch (final Exception ex) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/appender/AsynchAppender.java,run,203-203,[                final Log4jLogEvent event = Log4jLogEvent.deserialize(s);],,run,195-195,[                    if (s != null && s instanceof String && SHUTDOWN.equals(s.toString())) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/AsynchAppender.java,shutdown,237-237,[                queue.offer(SHUTDOWN);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppender.java,getOutputStream,100-100,[        final PrintStream printStream = target == Target.SYSTEM_OUT ?],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/ConsoleAppender.java,getOutputStream,116-116,[            } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,68-68,[        final String msg = baos.toString();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/ConsoleAppenderTest.java,testFollow,65-65,[        System.setOut(new PrintStream(baos));],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/FailoverAppender.java,callAppender,122-122,[            primary.callAppender(event);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/appender/FailoversPlugin.java,createFailovers,50-50,[            return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/FileAppender.java,createAppender,100-100,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,129-129,[            final InputStreamReader isr = new InputStreamReader(is);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,testMultipleVMs,130-130,[            final BufferedReader br = new BufferedReader(isr);],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/appender/FileAppenderTest.java,verifyFile,167-167,[        final DataInputStream is = new DataInputStream(new BufferedInputStream(fis));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/FileAppenderTest.java,,195-208,[        public FileWriterRunnable(final boolean lock, final int count)  {,             this.lock = lock;,             this.count = count;,         },         public void run() {,             final Thread thread = Thread.currentThread();, ,             try {,                 writer(lock, count, thread.getName());, ,             } catch (final Exception ex) {,                 throw new RuntimeException(ex);,             },         }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/FileManager.java,createManager,149-149,[                parent.mkdirs();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/RollingFileAppender.java,createAppender,141-141,[        if (manager == null) {],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/appender/SMTPAppender.java,createAppender,127-127,[        final int bufferSize = bufferSizeNum == null ? 512 : Integer.valueOf(bufferSizeNum);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SMTPAppender.java,createAppender,138-138,[        if (manager == null) {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,89-89,[        tcpCount = 0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,teardown,90-90,[        udpCount = 0;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,182-182,[                if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,run,156-156,[            } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SocketAppenderTest.java,shutdown,141-141,[            thread.interrupt();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,teardown,94-94,[        tcpCount = 0;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,teardown,95-95,[        udpCount = 0;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,run,281-281,[                                final String line = new String(buffer, 0, i);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,run,276-276,[                    if (socket != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,run,294-294,[                } catch (final Exception ex) {],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,shutdown,264-264,[            thread.interrupt();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,run,240-240,[                    final String str = new String(packet.getData(), 0, packet.getLength());],,
STYLE,UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR,org/apache/logging/log4j/core/appender/SyslogAppenderTest.java,shutdown,229-229,[            thread.interrupt();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/appender/rewrite/MapRewritePolicy.java,valueOf,131-131,[            if (op == null) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeAscending,284-284,[                        toRenameBase.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,purgeDescending,181-181,[                        toRenameBase.delete();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicyTest.java,,53-64,[        public MyRollingManager(final TriggeringPolicy policy, final RolloverStrategy strategy) {,             super("testfile", "target/rolling1/test1-%i.log.gz", new ByteArrayOutputStream(),,                 false, 0, System.currentTimeMillis(), policy, strategy);,         }, ,         public void setFileTime(final long timestamp) {,             this.timestamp = timestamp;,         }, ,         @Override,         public long getFileTime() {,             return timestamp;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,81-81,[            for (final File file : files) {],,deleteDir,80-80,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,testAppender,67-67,[        assertTrue("No files created", files.length > 0);],,testAppender,66-66,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderSizeTest.java,deleteDir,82-82,[                file.delete();],,deleteDir,84-84,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,84-84,[            for (final File file : files) {],,deleteDir,83-83,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,testAppender,70-70,[        assertTrue("No files created", files.length > 0);],,testAppender,69-69,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeAndSizeTest.java,deleteDir,85-85,[                file.delete();],,deleteDir,87-87,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,84-84,[            for (final File file : files) {],,deleteDir,83-83,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,testAppender,70-70,[        assertTrue("No files created", files.length > 0);],,testAppender,69-69,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderTimeTest.java,deleteDir,85-85,[                file.delete();],,deleteDir,87-87,[            dir.delete();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,82-82,[            for (final File file : files) {],,deleteDir,81-81,[            final File[] files = dir.listFiles();],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,testAppender,67-67,[        assertTrue("No files created", files.length > 0);],,testAppender,66-66,[        final File[] files = dir.listFiles();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingAppenderUncompressedTest.java,deleteDir,83-83,[                file.delete();],,deleteDir,85-85,[            dir.delete();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,93-93,[        return initialTime;],,,104-104,[                initialTime = System.currentTimeMillis();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,,85-85,[        return size;],,,76-76,[        size += length;],,,103-103,[                size = 0;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,checkRollover,105-105,[                final OutputStream os = new FileOutputStream(getFileName(), isAppend());],,checkRollover,106-106,[                setOutputStream(os);],,checkRollover,109-109,[            }],,checkRollover,111-111,[    }],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,260-260,[                parent.mkdirs();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,createManager,263-263,[                file.createNewFile();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/appender/rolling/helper/AbstractAction.java,,86-86,[        return complete;],,,68-68,[            complete = true;],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,copyFile,120-120,[            srcStream = new FileInputStream(source);],,copyFile,121-121,[            destStream = new FileOutputStream(destination);],,copyFile,126-126,[            if (srcChannel != null) {],,copyFile,127-127,[                srcChannel.close();],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,execute,96-96,[            } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/rolling/helper/FileRenameAction.java,copyFile,112-112,[            destination.createNewFile();],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/GZCompressAction.java,execute,95-95,[            final FileInputStream fis = new FileInputStream(source);],,execute,96-96,[            final FileOutputStream fos = new FileOutputStream(destination);],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/appender/rolling/helper/ZipCompressAction.java,execute,96-96,[            final FileInputStream fis = new FileInputStream(source);],,execute,97-97,[            final FileOutputStream fos = new FileOutputStream(destination);],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppender2Test.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppender2Test.java,setupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppenderTest.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/JSONRoutingAppenderTest.java,setupClass,61-61,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,cleanupClass,70-70,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/appender/routing/RoutingAppenderTest.java,setupClass,61-61,[        file.delete();],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/BaseConfiguration.java,setToDefault,233-233,[        final Level level = levelName != null && Level.valueOf(levelName) != null ? Level.valueOf(levelName) : Level.ERROR;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/BaseConfiguration.java,createPluginObject,516-516,[            } catch (final Exception ex) {],,createPluginObject,529-529,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/BaseConfiguration.java,createPluginObject,507-726,[        final Class clazz = type.getPluginClass();, ,         if (Map.class.isAssignableFrom(clazz)) {,             try {,                 final Map<String, Object> map = (Map<String, Object>) clazz.newInstance();,                 for (final Node child : node.getChildren()) {,                     map.put(child.getName(), child.getObject());,                 },                 return map;,             } catch (final Exception ex) {,                 LOGGER.warn("Unable to create Map for " + type.getElementName() + " of class " +,                     clazz);,             },         }, ,         if (List.class.isAssignableFrom(clazz)) {,             try {,                 final List<Object> list = (List<Object>) clazz.newInstance();,                 for (final Node child : node.getChildren()) {,                     list.add(child.getObject());,                 },                 return list;,             } catch (final Exception ex) {,                 LOGGER.warn("Unable to create List for " + type.getElementName() + " of class " +,                     clazz);,             },         }, ,         Method factoryMethod = null;, ,         for (final Method method : clazz.getMethods()) {,             if (method.isAnnotationPresent(PluginFactory.class)) {,                 factoryMethod = method;,                 break;,             },         },         if (factoryMethod == null) {,             return null;,         }, ,         final Annotation[][] parmArray = factoryMethod.getParameterAnnotations();,         final Class[] parmClasses = factoryMethod.getParameterTypes();,         if (parmArray.length != parmClasses.length) {,             LOGGER.error("Number of parameter annotations does not equal the number of paramters");,         },         final Object[] parms = new Object[parmClasses.length];, ,         int index = 0;,         final Map<String, String> attrs = node.getAttributes();,         final List<Node> children = node.getChildren();,         final StringBuilder sb = new StringBuilder();,         final List<Node> used = new ArrayList<Node>();, ,         /*,          * For each parameter:,          * If the parameter is an attribute store the value of the attribute in the parameter array.,          * If the parameter is an element:,          *   Determine if the required parameter is an array.,          *     If so, if a child contains the array, use it,,          *      otherwise create the array from all child nodes of the correct type.,          *     Store the array into the parameter array.,          *   If not an array, store the object in the child node into the parameter array.,          */,         for (final Annotation[] parmTypes : parmArray) {,             for (final Annotation a : parmTypes) {,                 if (sb.length() == 0) {,                     sb.append(" with params(");,                 } else {,                     sb.append(", ");,                 },                 if (a instanceof PluginNode) {,                     parms[index] = node;,                     sb.append("Node=").append(node.getName());,                 } else if (a instanceof PluginConfiguration) {,                     parms[index] = this;,                     if (this.name != null) {,                         sb.append("Configuration(").append(name).append(")");,                     } else {,                         sb.append("Configuration");,                     },                 } else if (a instanceof PluginValue) {,                     final String name = ((PluginValue) a).value();,                     String v = node.getValue();,                     if (v == null) {,                         v = getAttrValue("value", attrs);,                     },                     final String value = subst.replace(event, v);,                     sb.append(name).append("=\"").append(value).append("\"");,                     parms[index] = value;,                 } else if (a instanceof PluginAttr) {,                     final String name = ((PluginAttr) a).value();,                     final String value = subst.replace(event, getAttrValue(name, attrs));,                     sb.append(name).append("=\"").append(value).append("\"");,                     parms[index] = value;,                 } else if (a instanceof PluginElement) {,                     final PluginElement elem = (PluginElement) a;,                     final String name = elem.value();,                     if (parmClasses[index].isArray()) {,                         final Class parmClass = parmClasses[index].getComponentType();,                         final List<Object> list = new ArrayList<Object>();,                         sb.append(name).append("={");,                         boolean first = true;,                         for (final Node child : children) {,                             final PluginType childType = child.getType();,                             if (elem.value().equalsIgnoreCase(childType.getElementName()) ||,                                 parmClass.isAssignableFrom(childType.getPluginClass())) {,                                 used.add(child);,                                 if (!first) {,                                     sb.append(", ");,                                 },                                 first = false;,                                 final Object obj = child.getObject();,                                 if (obj == null) {,                                     LOGGER.error("Null object returned for " + child.getName() + " in " +,                                         node.getName());,                                     continue;,                                 },                                 if (obj.getClass().isArray()) {,                                     printArray(sb, (Object[]) obj);,                                     parms[index] = obj;,                                     break;,                                 },                                 sb.append(child.toString());,                                 list.add(obj);,                             },                         },                         sb.append("}");,                         if (parms[index] != null) {,                             break;,                         },                         if (list.size() > 0 && !parmClass.isAssignableFrom(list.get(0).getClass())) {,                             LOGGER.error("Attempted to assign List containing class " +,                                 list.get(0).getClass().getName() + " to array of type " + parmClass +,                                 " for attribute " + name);,                             break;,                         },                         final Object[] array = (Object[]) Array.newInstance(parmClass, list.size());,                         int i = 0;,                         for (final Object obj : list) {,                             array[i] = obj;,                             ++i;,                         },                         parms[index] = array;,                     } else {,                         final Class parmClass = parmClasses[index];,                         boolean present = false;,                         for (final Node child : children) {,                             final PluginType childType = child.getType();,                             if (elem.value().equals(childType.getElementName()) ||,                                 parmClass.isAssignableFrom(childType.getPluginClass())) {,                                 sb.append(child.getName()).append("(").append(child.toString()).append(")");,                                 present = true;,                                 used.add(child);,                                 parms[index] = child.getObject();,                                 break;,                             },                         },                         if (!present) {,                             sb.append("null");,                         },                     },                 },             },             ++index;,         },         if (sb.length() > 0) {,             sb.append(")");,         }, ,         if (attrs.size() > 0) {,             final StringBuilder eb = new StringBuilder();,             for (final String key : attrs.keySet()) {,                 if (eb.length() == 0) {,                     eb.append(node.getName());,                     eb.append(" contains ");,                     if (attrs.size() == 1) {,                         eb.append("an invalid element or attribute ");,                     } else {,                         eb.append("invalid attributes ");,                     },                 } else {,                     eb.append(", ");,                 },                 eb.append("\"");,                 eb.append(key);,                 eb.append("\"");, ,             },             LOGGER.error(eb.toString());,         }, ,         if (!type.isDeferChildren() && used.size() != children.size()) {,             for (final Node child : children) {,                 if (used.contains(child)) {,                     continue;,                 },                 final String nodeType = node.getType().getElementName();,                 final String start = nodeType.equals(node.getName()) ? node.getName() : nodeType + " " + node.getName();,                 LOGGER.error(start + " has no parameter that matches element " + child.getName());,             },         }, ,         try {,             final int mod = factoryMethod.getModifiers();,             if (!Modifier.isStatic(mod)) {,                 LOGGER.error(factoryMethod.getName() + " method is not static on class " +,                     clazz.getName() + " for element " + node.getName());,                 return null;,             },             LOGGER.debug("Calling {} on class {} for element {}{}", factoryMethod.getName(), clazz.getName(),,                 node.getName(), sb.toString());,             //if (parms.length > 0) {,                 return factoryMethod.invoke(null, parms);,             //},             //return factoryMethod.invoke(null, node);,         } catch (final Exception e) {,             LOGGER.error("Unable to invoke method " + factoryMethod.getName() + " in class " +,                 clazz.getName() + " for element " + node.getName(), e);,         },         return null;],,
MT_CORRECTNESS,RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED,org/apache/logging/log4j/core/config/BaseConfiguration.java,addLoggerAppender,317-317,[        appenders.putIfAbsent(name, appender);],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/BaseConfiguration.java,,98-98,[    private final boolean started = false;],,
PERFORMANCE,WMI_WRONG_MAP_ITERATOR,org/apache/logging/log4j/core/config/BaseConfiguration.java,getAttrValue,743-743,[                final String attr = attrs.get(key);],,
CORRECTNESS,RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInstance,109-109,[                final Integer weight = o.value();],,getInstance,110-110,[                if (o != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInputFromString,236-236,[        } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getInstance,113-113,[            } catch (final Exception ex) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,getSupportedTypes,402-402,[            return null;],,
BAD_PRACTICE,EQ_COMPARETO_USE_OBJECT_EQUALS,org/apache/logging/log4j/core/config/ConfigurationFactory.java,compareTo,299-305,[            final int w = wf.weight;,             if (weight == w) {,                 return 0;,             } else if (weight > w) {,                 return -1;,             } else {,                 return 1;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/config/DefaultConfiguration.java,<init>,56-56,[        final Level level = levelName != null && Level.valueOf(levelName) != null ? Level.valueOf(levelName) : Level.ERROR;],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/FileOutputTest.java,cleanupClass,62-62,[        file.delete();],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/FileOutputTest.java,setupClass,41-41,[        file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/JSONConfiguration.java,<init>,99-99,[                                stream = new PrintStream(new FileOutputStream(destFile));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/JSONConfiguration.java,<init>,147-147,[        } catch (final Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/JSONConfiguration.java,,296-305,[    private class Status {,         private final JsonNode node;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final JsonNode node, final ErrorType errorType) {,             this.name = name;,             this.node = node;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/JSONConfiguration.java,,303-303,[            this.node = node;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/JSONConfigurationFactory.java,,32-32,[    public static final String[] SUFFIXES = new String[] {".json", ".jsn"};],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/JSONConfigurationFactory.java,,39-39,[    private final File configFile = null;],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/TestConfigurator.java,testBadFileName,248-248,[            dir.append(CHARS[i].toUpperCase());],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/TestConfigurator.java,testReconfiguration,160-160,[        file.setLastModified(System.currentTimeMillis() - 120000);],,testReconfiguration,172-172,[        file.setLastModified(System.currentTimeMillis());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/config/XMLConfiguration.java,<init>,119-119,[                                stream = new PrintStream(new FileOutputStream(destFile));],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/config/XMLConfiguration.java,,324-333,[    private class Status {,         private final Element element;,         private final String name;,         private final ErrorType errorType;, ,         public Status(final String name, final Element element, final ErrorType errorType) {,             this.name = name;,             this.element = element;,             this.errorType = errorType;,         }],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/config/XMLConfiguration.java,,331-331,[            this.element = element;],,
MALICIOUS_CODE,MS_PKGPROTECT,org/apache/logging/log4j/core/config/XMLConfigurationFactory.java,,31-31,[    public static final String[] SUFFIXES = new String[] {".xml", "*"};],,
EXPERIMENTAL,OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE,org/apache/logging/log4j/core/config/XMLConfigurationTest.java,logToFile,102-102,[        final FileOutputStream fos = new FileOutputStream(LOGFILE, false);],,logToFile,103-103,[        fos.flush();],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/config/XMLConfigurationTest.java,logToFile,107-107,[        final DataInputStream is = new DataInputStream(new BufferedInputStream(new FileInputStream(LOGFILE)));],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,collectPlugins,176-176,[            map.put(p.name().toLowerCase(), new PluginType(item, type, p.printObject(), p.deferChildren()));],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,getPluginType,110-110,[        return plugins.get(name.toLowerCase());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/PluginManager.java,decode,228-228,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/config/plugins/PluginManager.java,encode,258-258,[        } catch (final Exception ex) {],,
BAD_PRACTICE,RV_RETURN_VALUE_IGNORED_BAD_PRACTICE,org/apache/logging/log4j/core/config/plugins/PluginManager.java,encode,240-240,[            file.mkdirs();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/config/plugins/PluginManager.java,collectPlugins,148-148,[                pluginTypeMap = map;],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/core/config/plugins/ResolverUtil.java,loadImplementationsInDirectory,303-303,[        for (final File file : files) {],,loadImplementationsInDirectory,300-300,[        final File[] files = location.listFiles();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/filter/BurstFilter.java,,163-207,[    private class LogDelay implements Delayed {, ,         private long expireTime;, ,         public LogDelay() {,         }, ,         public void setDelay(final long delay) {,             this.expireTime = delay + System.nanoTime();,         }, ,         public long getDelay(final TimeUnit timeUnit) {,             return timeUnit.convert(expireTime - System.nanoTime(), TimeUnit.NANOSECONDS);,         }, ,         public int compareTo(final Delayed delayed) {,             if (this.expireTime < ((LogDelay) delayed).expireTime) {,                 return -1;,             } else if (this.expireTime > ((LogDelay) delayed).expireTime) {,                 return 1;,             },             return 0;,         }, ,         @Override,         public boolean equals(final Object o) {,             if (this == o) {,                 return true;,             },             if (o == null || getClass() != o.getClass()) {,                 return false;,             }, ,             final LogDelay logDelay = (LogDelay) o;, ,             if (expireTime != logDelay.expireTime) {,                 return false;,             }, ,             return true;,         }, ,         @Override,         public int hashCode() {,             return (int) (expireTime ^ (expireTime >>> HASH_SHIFT));],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/filter/ThreadContextMapFilter.java,,55-55,[                this.value = entry.getValue().get(0);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/helpers/CyclicBuffer.java,,80-80,[        return 0 == numElems;],,,58-58,[        if (numElems < ring.length) {],,,59-59,[            numElems++;],,,66-66,[        T[] array = makeArray(clazz, numElems);],,,68-68,[        while (numElems > 0) {],,,69-69,[            numElems--;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/helpers/NameUtil.java,md5,40-40,[            digest.update(string.getBytes());],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/helpers/NameUtil.java,md5,51-51,[        } catch (Exception ex) {],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/helpers/OptionConverter.java,toFileSize,192-192,[                return Long.valueOf(s) * multiplier;],,
PERFORMANCE,DM_BOXED_PRIMITIVE_FOR_PARSING,org/apache/logging/log4j/core/helpers/OptionConverter.java,toInt,156-156,[                return Integer.valueOf(s);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/helpers/OptionConverter.java,toFileSize,190-190,[        if (s != null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/helpers/UUIDTest.java,,106-121,[        public Worker(final UUID[] uuids, final long[] elapsed, final int index, final int count) {,             this.uuids = uuids;,             this.index = index;,             this.count = count;,             this.elapsed = elapsed;,         }, ,         @Override,         public void run() {,             final int pos = index * count;,             final long start = System.nanoTime();,             for (int i=pos; i < pos + count; ++i) {,                 uuids[i] = UUIDUtil.getTimeBasedUUID();,             },             elapsed[index] = System.nanoTime() - start;,         }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/helpers/UUIDUtil.java,<clinit>,73-73,[                    if (method != null) {],,<clinit>,84-84,[                            if (method != null) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/helpers/UUIDUtil.java,<clinit>,90-90,[            } catch (final Exception ex) {],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/impl/ThrowableProxy.java,getSuppressedProxies,529-529,[                return null;],,getSuppressedProxies,532-532,[        return null;],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,setSuppressed,542-542,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,getCallerClass,439-439,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,getSuppressedProxies,528-528,[            } catch (final Exception ex) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/impl/ThrowableProxy.java,resolvePackageElement,412-412,[            } catch (final Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/impl/ThrowableProxy.java,,551-558,[    private class CacheEntry {,         private final StackTracePackageElement element;,         private final ClassLoader loader;, ,         public CacheEntry(final StackTracePackageElement element, final ClassLoader loader) {,             this.element = element;,             this.loader = loader;,         }],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/layout/AbstractStringLayout.java,<init>,40-40,[            if (String.class.getMethod("getBytes", new Class[] {Charset.class}) != null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/AbstractStringLayout.java,getBytes,96-96,[                return str.getBytes();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/layout/HTMLLayout.java,,102-102,[        this.contentType = contentType;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,createPatternParser,151-151,[            return new PatternParser(config, KEY, LogEventPatternConverter.class);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/layout/PatternLayout.java,setConversionPattern,118-118,[        if (pattern == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/layout/PatternLayoutTest.java,testRegex,144-144,[        assertEquals("org/apache/logging/log4j/core/layout/PatternLayoutTest Hello, world!", new String(result));],,
CORRECTNESS,NP_ALWAYS_NULL,org/apache/logging/log4j/core/layout/RFC5424Layout.java,createLayout,484-484,[                LOGGER.error("Charset " + charsetName + " is not supported for layout, using " + charset.displayName());],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/RFC5424Layout.java,createPatternParser,175-175,[            return new PatternParser(config, PatternLayout.KEY, LogEventPatternConverter.class,],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/layout/RFC5424Layout.java,createLayout,484-484,[                LOGGER.error("Charset " + charsetName + " is not supported for layout, using " + charset.displayName());],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/layout/RFC5424Layout.java,getId,355-355,[        sb.append(getId(id));],,getId,351-351,[        if (id == null && defaultId == null) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/RFC5424Layout.java,,425-427,[    private class NoopChecker implements ListChecker {,         public boolean check(final String key) {,             return true;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/layout/SerializedLayout.java,,109-115,[        public PrivateObjectOutputStream(final OutputStream os) throws IOException {,             super(os);,         }, ,         @Override,         protected void writeStreamHeader() {,         }],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XMLLayout.java,getFooter,210-210,[            return null;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/core/layout/XMLLayout.java,getHeader,194-194,[            return null;],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,46-90,[    private class MyLogEvent implements LogEvent {,         public Level getLevel() {,             return null;,         }, ,         public String getLoggerName() {,             return null;,         }, ,         public StackTraceElement getSource() {,             return null;,         }, ,         public Message getMessage() {,             return null;,         }, ,         public Marker getMarker() {,             return null;,         }, ,         public String getThreadName() {,             return null;,         }, ,         public long getMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();,         }, ,         public Throwable getThrown() {,             return null;,         }, ,         public Map<String, String> getContextMap() {,             return null;,         }, ,         public ThreadContext.ContextStack getContextStack() {,             return null;,         }, ,         public String getFQCN() {,             return null;],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,46-90,[    private class MyLogEvent implements LogEvent {,         public Level getLevel() {,             return null;,         }, ,         public String getLoggerName() {,             return null;,         }, ,         public StackTraceElement getSource() {,             return null;,         }, ,         public Message getMessage() {,             return null;,         }, ,         public Marker getMarker() {,             return null;,         }, ,         public String getThreadName() {,             return null;,         }, ,         public long getMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();,         }, ,         public Throwable getThrown() {,             return null;,         }, ,         public Map<String, String> getContextMap() {,             return null;,         }, ,         public ThreadContext.ContextStack getContextStack() {,             return null;,         }, ,         public String getFQCN() {,             return null;],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/lookup/DateLookupTest.java,,46-90,[    private class MyLogEvent implements LogEvent {,         public Level getLevel() {,             return null;,         }, ,         public String getLoggerName() {,             return null;,         }, ,         public StackTraceElement getSource() {,             return null;,         }, ,         public Message getMessage() {,             return null;,         }, ,         public Marker getMarker() {,             return null;,         }, ,         public String getThreadName() {,             return null;,         }, ,         public long getMillis() {,             final Calendar cal = Calendar.getInstance();,             cal.set(2011, 11, 30, 10, 56, 35);,             return cal.getTimeInMillis();,         }, ,         public Throwable getThrown() {,             return null;,         }, ,         public Map<String, String> getContextMap() {,             return null;,         }, ,         public ThreadContext.ContextStack getContextStack() {,             return null;,         }, ,         public String getFQCN() {,             return null;],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueAppenderTest.java,,69-69,[    Logger root = ctx.getLogger("JMSQueueTest");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueAppenderTest.java,,81-81,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,before,83-83,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,before,80-80,[        config = ctx.getConfiguration();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSQueueFailoverTest.java,testReconnect,118-118,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/JMSQueueManager.java,,122-122,[            info.session.close();],,,129-129,[            info.conn.close();],,,135-135,[        info = null;],,,115-115,[        if (info != null) {],,,102-102,[        if (info == null) {],,,106-106,[            super.send(object, info.session, info.sender);],,,103-103,[            info = connect(context, factoryBindingName, queueBindingName, userName, password, false);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/JMSQueueReceiver.java,main,83-83,[        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/JMSQueueReceiver.java,usage,101-101,[        System.exit(1);],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/JMSQueueReceiver.java,main,88-88,[            if (s.equalsIgnoreCase("exit")) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSQueueTest.java,,76-76,[        receiver = new JMSQueueReceiver(FACTORY_NAME, QUEUE_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/JMSQueueTest.java,,127-141,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSTopicFailoverTest.java,before,82-82,[                app = (ListAppender) entry.getValue();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/JMSTopicFailoverTest.java,before,79-79,[        config = ctx.getConfiguration();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/JMSTopicReceiver.java,main,82-82,[        final BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));],,
BAD_PRACTICE,DM_EXIT,org/apache/logging/log4j/core/net/JMSTopicReceiver.java,usage,99-99,[        System.exit(1);],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/JMSTopicReceiver.java,main,87-87,[            if (s.equalsIgnoreCase("exit")) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/JMSTopicTest.java,,76-76,[        receiver = new JMSTopicReceiver(FACTORY_NAME, TOPIC_NAME, null, null);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/JMSTopicTest.java,,127-141,[        public MessageFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Result filter(final LogEvent event) {,             final StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();,             for (final StackTraceElement element : stackTrace) {,                 if (element.getMethodName().equals("onMessage")) {,                     return onMatch;,                 } else if (element.getMethodName().equals("testServer")) {,                     return onMismatch;,                 },             },             return onMismatch;],,
CORRECTNESS,BSHIFT_WRONG_ADD_PRIORITY,org/apache/logging/log4j/core/net/Priority.java,getValue,70-70,[        return facility.getCode() << 3 + severity.getCode();],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC_ANON,org/apache/logging/log4j/core/net/SMTPManager.java,,320-324,[                return new Authenticator() {,                     private final PasswordAuthentication passwordAuthentication = new PasswordAuthentication(username, password);, ,                     protected PasswordAuthentication getPasswordAuthentication() {,                         return passwordAuthentication;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,69-69,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/net/SocketMessageLossTest.java,testSocket,69-69,[            final BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketReconnectTest.java,testReconnect,70-70,[            BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,testReconnect,92-92,[                reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
BAD_PRACTICE,OS_OPEN_STREAM,org/apache/logging/log4j/core/net/SocketReconnectTest.java,testReconnect,70-70,[            BufferedReader reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,testReconnect,92-92,[                reader = new BufferedReader(new InputStreamReader(futureIn.get()));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/net/SocketServer.java,main,97-97,[        final BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));],,
MT_CORRECTNESS,LI_LAZY_INIT_STATIC,org/apache/logging/log4j/core/net/SocketServer.java,<init>,67-68,[        if (logger == null) {,             logger = LogManager.getLogger(this);],,
STYLE,NP_DEREFERENCE_OF_READLINE_VALUE,org/apache/logging/log4j/core/net/SocketServer.java,main,100-100,[            if (line.equalsIgnoreCase("Quit") || line.equalsIgnoreCase("Stop") || line.equalsIgnoreCase("Exit")) {],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/core/net/SocketServer.java,<init>,68-68,[            logger = LogManager.getLogger(this);],,
BAD_PRACTICE,DE_MIGHT_IGNORE,org/apache/logging/log4j/core/net/SocketServer.java,run,194-194,[                    } catch (final Exception ex) {],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/net/SocketServerTest.java,,53-53,[    private static BlockingQueue<LogEvent> list = new ArrayBlockingQueue<LogEvent>(10);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/net/SocketServerTest.java,,123-129,[        public ThreadFilter(final Result onMatch, final Result onMismatch) {,             super(onMatch, onMismatch);,         }, ,         @Override,         public Filter.Result filter(final LogEvent event) {,             return event.getThreadName().equals(Thread.currentThread().getName()) ? onMatch : onMismatch;],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/net/SocketTest.java,closeQuietly,104-107,[        if (null != executor) {,             executor.shutdownNow();,         },     }],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/core/net/SocketTest.java,closeQuietly,110-113,[        if (null != testServer) {,             testServer.close();,         },     }],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/TCPSocketManager.java,,179-179,[                        connector = null;],,,103-103,[            if (connector != null) {],,,104-104,[                connector.latch();],,,115-115,[            if (retry && connector == null) {],,,116-116,[                connector = new Reconnector(this);],,,117-117,[                connector.setDaemon(true);],,,118-118,[                connector.setPriority(Thread.MIN_PRIORITY);],,,119-119,[                connector.start();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/net/TCPSocketManager.java,,178-178,[                        socket = sock;],,,102-102,[        if (socket == null) {],,,106-106,[            if (socket == null) {],,,113-113,[            socket.setSendBufferSize(length);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/net/TCPSocketManager.java,write,106-106,[            if (socket == null) {],,
MT_CORRECTNESS,SC_START_IN_CTOR,org/apache/logging/log4j/core/net/TCPSocketManager.java,<init>,76-76,[            connector.start();],,
CORRECTNESS,DMI_INVOKING_TOSTRING_ON_ARRAY,org/apache/logging/log4j/core/pattern/AbstractStyleNameConverter.java,toPatternFormatterList,371-371,[            LOGGER.error("No PatternParser created for config=" + config + ", options=" + options);],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/AnsiEscape.java,createSequence,327-327,[            } catch (final Exception ex) {],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/DatePatternConverter.java,,169-169,[        output.append(cachedDate);],,,166-166,[                cachedDate = simpleFormat.format(timestamp);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/HighlightConverter.java,createLevelStyleMap,145-145,[                if (level == null) {],,
CORRECTNESS,NP_NULL_PARAM_DEREF,org/apache/logging/log4j/core/pattern/LevelPatternConverter.java,newInstance,69-69,[            levelMap.put(level, pair[1].trim());],,newInstance,66-66,[            if (level == null) {],,newInstance,67-67,[                LOGGER.error("Invalid Level {}", pair[0].trim());],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/LevelPatternConverter.java,newInstance,61-61,[            if (pair == null || pair.length != 2) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,434-434,[            if ((converterClass == null) && (rules != null)) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/pattern/PatternParser.java,finalizeConverter,536-536,[            if ((converterId == null) || (converterId.length() == 0)) {],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,434-434,[            if ((converterClass == null) && (rules != null)) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/pattern/PatternParser.java,createConverter,499-499,[        } catch (final Exception ex) {],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,51-51,[    private final String mdcMsgPattern1 = "%m : %X%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,52-52,[    private final String mdcMsgPattern2 = "%m : %X{key1}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,53-53,[    private final String mdcMsgPattern3 = "%m : %X{key2}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,54-54,[    private final String mdcMsgPattern4 = "%m : %X{key3}%n";],,
PERFORMANCE,SS_SHOULD_BE_STATIC,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,55-55,[    private final String mdcMsgPattern5 = "%m : %X{key1},%X{key2},%X{key3}%n";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,48-48,[    Logger root = ctx.getLogger("");],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,45-45,[    static String OUTPUT_FILE   = "output/PatternParser";],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/core/pattern/PatternParserTest.java,,46-46,[    static String WITNESS_FILE  = "witness/PatternParser";],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/core/pattern/RelativeTimePatternConverter.java,,68-68,[        toAppendTo.append(relative);],,,65-65,[                relative = Long.toString(timestamp - startTime);],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,78-78,[                    for (int index = 2; clazz != null; ++index) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,getContext,95-95,[                } catch (final Exception ex) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,60-60,[        final BufferedReader in1 = new BufferedReader(new FileReader(file1));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,compare,62-62,[            open(testClass, file2)));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Compare.java,outputFile,114-114,[        final BufferedReader in1 = new BufferedReader(new InputStreamReader(is));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,<clinit>,40-40,[        catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,start,61-61,[            catch (final Exception e) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/util/Profiler.java,stop,78-78,[            catch (final Exception e) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Transformer.java,transform,65-65,[    final BufferedReader input = new BufferedReader(new FileReader(in));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Transformer.java,transform,66-66,[    final PrintStream output = new PrintStream(new FileOutputStream(out));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Transformer.java,transform,36-36,[    final BufferedReader input = new BufferedReader(new FileReader(in));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/core/util/Transformer.java,transform,37-37,[    final PrintStream output = new PrintStream(new FileOutputStream(out, false));],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/core/web/Log4jContextListener.java,getClassLoader,87-87,[            } catch (Exception ex) {],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/core/web/Log4jContextListenerTest.java,,120-227,[    private class MockServletContext implements ServletContext {,         private String name;, ,         private Hashtable<String, String> params = new Hashtable<String, String>();, ,         private Hashtable<String, Object> attrs = new Hashtable<String, Object>();, , ,         public ServletContext getContext(String s) {,             return null;,         }, ,         public int getMajorVersion() {,             return 0;,         }, ,         public int getMinorVersion() {,             return 0;,         }, ,         public String getMimeType(String s) {,             return null;,         }, ,         public Set getResourcePaths(String s) {,             return null;,         }, ,         public URL getResource(String s) throws MalformedURLException {,             return null;,         }, ,         public InputStream getResourceAsStream(String s) {,             return null;,         }, ,         public RequestDispatcher getRequestDispatcher(String s) {,             return null;,         }, ,         public RequestDispatcher getNamedDispatcher(String s) {,             return null;,         }, ,         public Servlet getServlet(String s) throws ServletException {,             return null;,         }, ,         public Enumeration getServlets() {,             return null;,         }, ,         public Enumeration getServletNames() {,             return null;,         }, ,         public void log(String s) {,             System.out.println(s);,         }, ,         public void log(Exception e, String s) {,             System.out.println(s);,             e.printStackTrace();,         }, ,         public void log(String s, Throwable throwable) {,             System.out.println(s);,             throwable.printStackTrace();,         }, ,         public String getRealPath(String s) {,             return null;,         }, ,         public String getServerInfo() {,             return "Mock";,         }, ,         public void setInitParameter(String key, String value) {,             params.put(key, value);,         }, ,         public String getInitParameter(String s) {,             return params.get(s);,         }, ,         public Enumeration getInitParameterNames() {,             return params.keys();,         }, ,         public Object getAttribute(String s) {,             return attrs.get(s);,         }, ,         public Enumeration getAttributeNames() {,             return attrs.keys();,         }, ,         public void setAttribute(String s, Object o) {,             attrs.put(s, o);,         }, ,         public void removeAttribute(String s) {,             attrs.remove(s);,         }, ,         public String getServletContextName() {,             return null;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/flume/appender/FlumeAppender.java,createAppender,176-176,[        if (manager == null) {],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getBody,351-351,[            return new String(baos.toByteArray());],,
PERFORMANCE,UPM_UNCALLED_PRIVATE_METHOD,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,getAppender,340-341,[        final Map<String,Appender> map = logger.getAppenders();,         return map.get(name);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java,,77-77,[        ctx = (LoggerContext) LogManager.getContext();],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,254-254,[        client = null;],,,147-147,[                final Status status = (batch == null) ? client.append(avroEvent) : client.appendBatch(batch);],,,183-183,[                    client = c;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,117-117,[        return current;],,,220-220,[                current = i;],,,165-165,[            if (index == current) {],,,149-149,[                    throw new AvroRemoteException("RPC communication failed to " + agents[current].getHost() +],,,155-155,[                    msg = "Error writing to " + getName() + " at " + agents[current].getHost() + ":" +],,,184-184,[                    current = i;],,
MT_CORRECTNESS,IS2_INCONSISTENT_SYNC,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,247-247,[        if (transceiver != null) {],,,249-249,[                transceiver.close();],,,172-172,[                    transceiver = null;],,,230-230,[            if (transceiver == null) {],,,238-238,[            return SpecificRequestor.getClient(AvroSourceProtocol.class, transceiver);],,,231-231,[                transceiver = new NettyTransceiver(new InetSocketAddress(hostname, port));],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/flume/appender/FlumeAvroManager.java,,260-270,[    private static class EventList extends ArrayList<AvroFlumeEvent> {, ,         public synchronized List<AvroFlumeEvent> addAndGet(final AvroFlumeEvent event, final int batchSize) {,             super.add(event);,             if (this.size() >= batchSize) {,                 final List<AvroFlumeEvent> events = new ArrayList<AvroFlumeEvent>();,                 events.addAll(this);,                 clear();,                 return events;,             } else {,                 return null;],,
STYLE,SF_SWITCH_NO_DEFAULT,org/apache/logging/log4j/flume/appender/FlumeConfigurationBuilder.java,load,86-92,[                    switch (error.getErrorOrWarning()) {,                         case ERROR:,                             isError = true;,                             LOGGER.error(sb.toString());,                             break;,                         case WARNING:,                             LOGGER.warn(sb.toString());],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,284-284,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,getBody,267-267,[        return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,deleteFiles,276-276,[            for (final File child : files) {],,deleteFiles,275-275,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAgentTest.java,setUp,139-139,[        ctx = (LoggerContext) LogManager.getContext(false);],,
STYLE,DLS_DEAD_LOCAL_STORE_IN_RETURN,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,285-285,[        return result &= file.delete();],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,getBody,268-268,[            return new String(baos.toByteArray());],,
STYLE,NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,deleteFiles,277-277,[            for (final File child : files) {],,deleteFiles,276-276,[            final File[] files = file.listFiles();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedAppenderTest.java,setUp,139-139,[        ctx = (LoggerContext) LogManager.getContext(false);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/flume/appender/FlumeEmbeddedManager.java,,61-61,[        this.shortName = shortName;],,
BAD_PRACTICE,SE_NO_SERIALVERSIONID,org/apache/logging/log4j/flume/appender/FlumeEvent.java,,59-272,[    private final Map<String, String> ctx = new HashMap<String, String>();, ,     private final boolean compress;, ,     /**,      * Construct the FlumeEvent.,      * @param event The Log4j LogEvent.,      * @param includes A comma separated list of MDC elements to include.,      * @param excludes A comma separated list of MDC elements to exclude.,      * @param required A comma separated list of MDC elements that are required to be defined.,      * @param mdcPrefix The value to prefix to MDC keys.,      * @param eventPrefix The value to prefix to event keys.,      * @param compress If true the event body should be compressed.,      */,     public FlumeEvent(final LogEvent event, final String includes, final String excludes, final String required,,                       String mdcPrefix, String eventPrefix, final boolean compress) {,         this.event = event;,         this.compress = compress;,         final Map<String, String> headers = getHeaders();,         headers.put(TIMESTAMP, Long.toString(event.getMillis()));,         if (mdcPrefix == null) {,             mdcPrefix = DEFAULT_MDC_PREFIX;,         },         if (eventPrefix == null) {,             eventPrefix = DEFAULT_EVENT_PREFIX;,         },         final Map<String, String> mdc = event.getContextMap();,         if (includes != null) {,             final String[] array = includes.split(",");,             if (array.length > 0) {,                 for (String str : array) {,                     str = str.trim();,                     if (mdc.containsKey(str)) {,                         ctx.put(str, mdc.get(str));,                     },                 },             },         } else if (excludes != null) {,             final String[] array = excludes.split(",");,             if (array.length > 0) {,                 final List<String> list = new ArrayList<String>(array.length);,                 for (final String value : array) {,                     list.add(value.trim());,                 },                 for (final Map.Entry<String, String> entry : mdc.entrySet()) {,                     if (!list.contains(entry.getKey())) {,                         ctx.put(entry.getKey(), entry.getValue());,                     },                 },             },         } else {,             ctx.putAll(mdc);,         }, ,         if (required != null) {,             final String[] array = required.split(",");,             if (array.length > 0) {,                 for (String str : array) {,                     str = str.trim();,                     if (!mdc.containsKey(str)) {,                         throw new LoggingException("Required key " + str + " is missing from the MDC");,                     },                 },             },         },         final Message message = event.getMessage();,         if (message instanceof MapMessage) {,             if (message instanceof StructuredDataMessage) {,                 addStructuredData(eventPrefix, headers, (StructuredDataMessage) message);,             },             addMapData(eventPrefix, headers, (MapMessage) message);,         }, ,         addContextData(mdcPrefix, headers, ctx);, ,         addGuid(headers);,     }, ,     protected void addStructuredData(final String prefix, final Map<String, String> fields, final StructuredDataMessage msg) {,         fields.put(prefix + EVENT_TYPE, msg.getType());,         final StructuredDataId id = msg.getId();,         fields.put(prefix + EVENT_ID, id.getName());,     }, ,     protected void addMapData(final String prefix, final Map<String, String> fields, final MapMessage msg) {,         final Map<String, String> data = msg.getData();,         for (final Map.Entry<String, String> entry : data.entrySet()) {,             fields.put(prefix + entry.getKey(), entry.getValue());,         },     }, ,     protected void addContextData(final String prefix, final Map<String, String> fields, final Map<String, String> context) {,         for (final Map.Entry<String, String> entry : context.entrySet()) {,             if (entry.getKey() != null && entry.getValue() != null) {,                 fields.put(prefix + entry.getKey(), entry.getValue());,             },         },     }, ,     protected void addGuid(final Map<String, String> fields) {,         fields.put(GUID, UUIDUtil.getTimeBasedUUID().toString());,     }, ,     /**,      * Set the body in the event.,      * @param body The body to add to the event.,      */,     @Override,     public void setBody(final byte[] body) {,         if (body == null || body.length == 0) {,             super.setBody(new byte[0]);,             return;,         },         if (compress) {,             final ByteArrayOutputStream baos = new ByteArrayOutputStream();,             try {,                 final GZIPOutputStream os = new GZIPOutputStream(baos);,                 os.write(body);,                 os.close();,             } catch (final IOException ioe) {,                 throw new LoggingException("Unable to compress message", ioe);,             },             super.setBody(baos.toByteArray());,         } else {,             super.setBody(body);,         },     }, ,     /**,      * Get the Frequently Qualified Class Name.,      * @return the FQCN String.,      */,     public String getFQCN() {,         return event.getFQCN();,     }, ,     /**,      * Returns the logging Level.,      * @return the Level.,      */,     public Level getLevel() {,         return event.getLevel();,     }, ,     /**,      * Returns the logger name.,      * @return the logger name.,      */,     public String getLoggerName() {,         return event.getLoggerName();,     }, ,     /**,      * Returns the StackTraceElement for the caller of the logging API.,      * @return the StackTraceElement of the caller.,      */,     public StackTraceElement getSource() {,         return event.getSource();,     }, ,     /**,      * Returns the Message.,      * @return the Message.,      */,     public Message getMessage() {,         return event.getMessage();,     }, ,     /**,      * Returns the Marker.,      * @return the Marker.,      */,     public Marker getMarker() {,         return event.getMarker();,     }, ,     /**,      * Returns the name of the Thread.,      * @return the name of the Thread.,      */,     public String getThreadName() {,         return event.getThreadName();,     }, ,     /**,      * Returns the event timestamp.,      * @return the event timestamp.,      */,     public long getMillis() {,         return event.getMillis();,     }, ,     /**,      * Returns the Throwable associated with the event, if any.,      * @return the Throwable.,      */,     public Throwable getThrown() {,         return event.getThrown();,     }, ,     /**,      * Returns a copy of the context Map.,      * @return a copy of the context Map.,      */,     public Map<String, String> getContextMap() {,         return ctx;,     }, ,     /**,      * Returns a copy of the context stack.,      * @return a copy of the context stack.,      */,     public ThreadContext.ContextStack getContextStack() {,         return event.getContextStack();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,44-44,[        this.isAlive = thread.isAlive();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/BasicThreadInformation.java,,41-41,[        this.longName = thread.toString();],,
STYLE,DB_DUPLICATE_SWITCH_CLAUSES,org/apache/logging/log4j/message/ExtendedThreadInformation.java,printStack,63-66,[                        sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());,                         sb.append('\n');,                         break;],,printStack,68-71,[                        sb.append("\t-  waiting on ");,                         formatLock(sb, info.getLockInfo());,                         sb.append('\n');,                         break;],,
STYLE,RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE,org/apache/logging/log4j/message/FormattedMessage.java,getMessage,129-129,[            if (formats != null && formats.length > 0) {],,
STYLE,REC_CATCH_EXCEPTION,org/apache/logging/log4j/message/FormattedMessage.java,getMessage,132-132,[        } catch (Exception ex) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testNoArgs,63-63,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testParamNoArgs,84-84,[        msg = new FormattedMessage(testMsg, array, null);],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/FormattedMessageTest.java,testStringNoArgs,41-41,[        msg = new FormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/FormattedMessageTest.java,,31-31,[    String[] array = new String[LOOP_CNT];],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/LocalizedMessageTest.java,,32-32,[    String[] array = new String[LOOP_CNT];],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/MessageFormatMessageTest.java,testNoArgs,41-41,[        msg = new MessageFormatMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/MessageFormatMessageTest.java,,31-31,[    String[] array = new String[LOOP_CNT];],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testFormattedParameterizedPerf,120-120,[        formattedTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testMessageFormatPerf,92-92,[        msgFormatTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testParameterizedPerf,106-106,[        paramTime = timer.getElapsedNanoTime();],,
STYLE,ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD,org/apache/logging/log4j/message/MessageFormatsPerfTest.java,testStringPerf,78-78,[        stringTime = timer.getElapsedNanoTime();],,
STYLE,IM_BAD_CHECK_FOR_ODD,org/apache/logging/log4j/message/ParameterizedMessage.java,format,268-268,[                            if (escapeCounter % 2 == 1) {],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/ParameterizedMessageTest.java,testNoArgs,35-35,[        msg = new ParameterizedMessage(testMsg, array, null);],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/SimpleMessage.java,getParameters,65-65,[        return null;],,
STYLE,NP_LOAD_OF_KNOWN_NULL_VALUE,org/apache/logging/log4j/message/StringFormattedMessageTest.java,testNoArgs,41-41,[        msg = new StringFormattedMessage(testMsg, array, null);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/message/StringFormattedMessageTest.java,,31-31,[    String[] array = new String[LOOP_CNT];],,
STYLE,UC_USELESS_CONDITION,org/apache/logging/log4j/message/StructuredDataId.java,<init>,96-96,[        final String id = enterpriseNumber < 0 ? name : name + "@" + enterpriseNumber;],,
STYLE,RI_REDUNDANT_INTERFACES,org/apache/logging/log4j/message/StructuredDataMessage.java,,55-357,[    public StructuredDataMessage(final String id, final String msg, final String type) {,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     },     /**,      * Constructor based on a String id.,      * @param id The String id.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final String id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = new StructuredDataId(id, null, null);,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type) {,         this.id = id;,         this.message = msg;,         this.type = type;,     }, ,     /**,      * Constructor based on a StructuredDataId.,      * @param id The StructuredDataId.,      * @param msg The message.,      * @param type The message type.,      * @param data The StructuredData map.,      */,     public StructuredDataMessage(final StructuredDataId id, final String msg, final String type,,                                  final Map<String, String> data) {,         super(data);,         this.id = id;,         this.message = msg;,         this.type = type;,     }, , ,     /**,      * Constructor based on a StructuredDataMessage.,      * @param msg The StructuredDataMessage.,      * @param map The StructuredData map.,      */,     private StructuredDataMessage(final StructuredDataMessage msg, final Map<String, String> map) {,         super(map);,         this.id = msg.id;,         this.message = msg.message;,         this.type = msg.type;,     }, , ,     /**,      * Basic constructor.,      */,     protected StructuredDataMessage() {, ,     }, ,     /**,      * Returns the supported formats.,      * @return An array of the supported format names.,      */,     @Override,     public String[] getFormats() {,         final String[] formats = new String[Format.values().length];,         int i = 0;,         for (final Format format : Format.values()) {,             formats[i++] = format.name();,         },         return formats;,     }, ,     /**,      * Returns the id.,      * @return the StructuredDataId.,      */,     public StructuredDataId getId() {,         return id;,     }, ,     /**,      * Set the id from a String.,      * @param id The String id.,      */,     protected void setId(final String id) {,         this.id = new StructuredDataId(id, null, null);,     }, ,     /**,      * Set the id.,      * @param id The StructuredDataId.,      */,     protected void setId(final StructuredDataId id) {,         this.id = id;,     }, ,     /**,      * Set the type.,      * @return the type.,      */,     public String getType() {,         return type;,     }, ,     protected void setType(final String type) {,         if (type.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("Structured data type exceeds maximum length of 32 characters: " + type);,         },         this.type = type;,     },     /**,      * Returns the message.,      * @return the message.,      */,     @Override,     public String getFormat() {,         return message;,     }, ,     protected void setMessageFormat(final String msg) {,         this.message = msg;,     }, , ,     @Override,     protected void validate(final String key, final String value) {,         if (key.length() > MAX_LENGTH) {,             throw new IllegalArgumentException("Structured data keys are limited to 32 characters. key: " + key +,                 " value: " + value);,         },     }, ,     /**,      * Format the Structured data as described in RFC 5424.,      *,      * @return The formatted String.,      */,     @Override,     public String asString() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Format the Structured data as described in RFC 5424.,      *,      * @param format The format identifier. Ignored in this implementation.,      * @return The formatted String.,      */, ,     @Override,     public String asString(final String format) {,         try {,             return asString(EnglishEnums.valueOf(Format.class, format), null);,         } catch (final IllegalArgumentException ex) {,             return asString();,         },     }, ,     /**,      * Format the Structured data as described in RFC 5424.,      *,      * @param format           "full" will include the type and message. null will return only the STRUCTURED-DATA as,      *                         described in RFC 5424,      * @param structuredDataId The SD-ID as described in RFC 5424. If null the value in the StructuredData,      *                         will be used.,      * @return The formatted String.,      */,     public final String asString(final Format format, final StructuredDataId structuredDataId) {,         final StringBuilder sb = new StringBuilder();,         final boolean full = Format.FULL.equals(format);,         if (full) {,             final String type = getType();,             if (type == null) {,                 return sb.toString();,             },             sb.append(getType()).append(" ");,         },         StructuredDataId id = getId();,         if (id != null) {,             id = id.makeId(structuredDataId);,         } else {,             id = structuredDataId;,         },         if (id == null || id.getName() == null) {,             return sb.toString();,         },         sb.append("[");,         sb.append(id);,         sb.append(" ");,         appendMap(sb);,         sb.append("]");,         if (full) {,             final String msg = getFormat();,             if (msg != null) {,                 sb.append(" ").append(msg);,             },         },         return sb.toString();,     }, ,     /**,      * Format the message and return it.,      * @return the formatted message.,      */,     @Override,     public String getFormattedMessage() {,         return asString(Format.FULL, null);,     }, ,     /**,      * Format the message according the the specified format.,      * @param formats An array of Strings that provide extra information about how to format the message.,      * StructuredDataMessage accepts only a format of "FULL" which will cause the event type to be,      * prepended and the event message to be appended. Specifying any other value will cause only the,      * StructuredData to be included. The default is "FULL".,      *,      * @return the formatted message.,      */,     @Override,     public String getFormattedMessage(final String[] formats) {,         if (formats != null && formats.length > 0) {,             for (final String format : formats) {,                 if (Format.XML.name().equalsIgnoreCase(format)) {,                     return asXML();,                 } else if (Format.FULL.name().equalsIgnoreCase(format)) {,                     return asString(Format.FULL, null);,                 },             },             return asString(null, null);,         } else {,             return asString(Format.FULL, null);,         },     }, ,     private String asXML() {,         final StringBuilder sb = new StringBuilder();,         final StructuredDataId id = getId();,         if (id == null || id.getName() == null || type == null) {,             return sb.toString();,         },         sb.append("<StructuredData>\n");,         sb.append("<type>").append(type).append("</type>\n");,         sb.append("<id>").append(id).append("</id>\n");,         super.asXML(sb);,         sb.append("</StructuredData>\n");,         return sb.toString();,     }, ,     @Override,     public String toString() {,         return asString(null, null);,     }, , ,     @Override,     public MapMessage newInstance(final Map<String, String> map) {,         return new StructuredDataMessage(this, map);,     }, ,     @Override,     public boolean equals(final Object o) {,         if (this == o) {,             return true;,         },         if (o == null || getClass() != o.getClass()) {,             return false;,         }, ,         final StructuredDataMessage that = (StructuredDataMessage) o;, ,         if (!super.equals(o)) {,             return false;,         },         if (type != null ? !type.equals(that.type) : that.type != null) {,             return false;,         },         if (id != null ? !id.equals(that.id) : that.id != null) {,             return false;,         },         if (message != null ? !message.equals(that.message) : that.message != null) {,             return false;,         }, ,         return true;,     }, ,     @Override,     public int hashCode() {,         int result = super.hashCode();,         result = HASHVAL * result + (type != null ? type.hashCode() : 0);,         result = HASHVAL * result + (id != null ? id.hashCode() : 0);,         result = HASHVAL * result + (message != null ? message.hashCode() : 0);,         return result;],,
STYLE,PZLA_PREFER_ZERO_LENGTH_ARRAYS,org/apache/logging/log4j/message/ThreadDumpMessage.java,getParameters,115-115,[        return null;],,
MT_CORRECTNESS,SWL_SLEEP_WITH_LOCK_HELD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,testMessageWithLocks,54-54,[                Thread.sleep(200);],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,80-88,[        public Thread1(final ReentrantLock lock) {,             this.lock = lock;,         }, ,         @Override,         public void run() {,             lock.lock();,             lock.unlock();,         }],,
MT_CORRECTNESS,ESync_EMPTY_SYNC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,102-102,[            }],,
PERFORMANCE,SIC_INNER_SHOULD_BE_STATIC,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,,94-103,[        public Thread2(final Object obj) {,             this.obj = obj;,         }, ,         @Override,         public void run() {,             synchronized (obj) {, ,             },         }],,
STYLE,UC_USELESS_VOID_METHOD,org/apache/logging/log4j/message/ThreadDumpMessageTest.java,run,103-103,[        }],,
STYLE,ICAST_INTEGER_MULTIPLY_CAST_TO_LONG,org/apache/logging/log4j/samples/app/LoggingController.java,run,88-88,[                        Thread.sleep(rand * 1000);],,
CORRECTNESS,RV_ABSOLUTE_VALUE_OF_RANDOM_INT,org/apache/logging/log4j/samples/app/LoggingController.java,run,95-95,[                        int eventIndex = (Math.abs(ran.nextInt())) % events.size();],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/samples/app/MockEventsSupplier.java,,33-33,[	static Random ran = new Random();],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,lowerFirst,38-38,[        return String.valueOf(name.charAt(0)).toLowerCase() + name.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,methodCaseName,73-73,[        return variable.substring(0, 1).toUpperCase() + variable.substring(1);],,
I18N,DM_CONVERT_CASE,org/apache/logging/log4j/samples/util/NamingUtils.java,upperFirst,34-34,[        return String.valueOf(name.charAt(0)).toUpperCase() + name.substring(1);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,log,138-138,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLogger.java,log,137-137,[            t.printStackTrace(new PrintStream(baos));],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/simple/SimpleLoggerContext.java,<init>,89-89,[                ps = new PrintStream(os);],,
PERFORMANCE,URF_UNREAD_FIELD,org/apache/logging/log4j/simple/SimpleLoggerContext.java,,45-45,[    private final Properties simpleLogProps = new Properties();],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/apache/logging/log4j/spi/AbstractLogger.java,,37-37,[    public static Class<? extends MessageFactory> DEFAULT_MESSAGE_FACTORY_CLASS = ParameterizedMessageFactory.class;],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,120-120,[            sb.append(baos.toString());],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/status/StatusData.java,getFormattedStatus,119-119,[            t.printStackTrace(new PrintStream(baos));],,
CORRECTNESS,RV_RETURN_VALUE_IGNORED,org/apache/logging/log4j/status/StatusLogger.java,add,259-259,[                messages.poll();],,
BAD_PRACTICE,SE_BAD_FIELD_INNER_CLASS,org/apache/logging/log4j/status/StatusLogger.java,,252-261,[        public BoundedQueue(final int size) {,             this.size = size;,         }, ,         @Override,         public boolean add(final E object) {,             while (messages.size() > size) {,                 messages.poll();,             },             return super.add(object);],,
I18N,DM_DEFAULT_ENCODING,org/apache/logging/log4j/test/appender/ListAppender.java,write,91-91,[        final String str = new String(bytes);],,
STYLE,REC_CATCH_EXCEPTION,org/slf4j/impl/SLF4JLogger.java,log,442-442,[            } catch (final Exception ex) {],,
MALICIOUS_CODE,MS_SHOULD_BE_FINAL,org/slf4j/impl/StaticLoggerBinder.java,,33-33,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
STYLE,URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD,org/slf4j/impl/StaticLoggerBinder.java,,33-33,[    public static String REQUESTED_API_VERSION = "1.6"; // !final],,
